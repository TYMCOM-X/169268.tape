*       NTRBAK.FTF (NTRACKPROGS:28)

*       DATA GATHERING PROGRAM FOR THE "NTRACK" PACKAGE.
*       EXTRACTS XRAY INFORMATION FROM NODES ABOUT NODE AND LINE
*       PERFORMANCE. THE NODES, LINES, AND COMMANDS TO BE EXECUTED ARE
*       TAKEN FROM A 1022 DATA BASE. DATA DUMPED TO FLAT FILES, ONE
*       FILE FOR EACH COMMAND. FLAT FILES ARE LATER LOADED INTO 1022
*       AND DELETED. THE PROGRAM ONLY RUNS DURING PEAK TRAFFIC TIMES.

*       JOANN JOELS JUN 83
*       DENNIS COFFEY 4TH Q 83
*       ROY ROSKILLY MAR 84

*       STORAGE DECLARATIONS

        INTEGER JOBNAM, PORT, MTRPOS, PROMPT, IDATE(2), TDATE, ERRD,
     +  STIME, SDATE, RETRY, ERRT, ERRCKT, NUMCIR, MNTMOD, MTIME
     +  CDATE, CTIME, KERNEL, NODE, XCOM, NEIGH, ITIME, TTIME

*       COMMON DATA SHARED WITH SUBROUTINE

        COMMON /AUX/ PORT
        COMMON /OUTPOS/ MTRPOS

*       PROMPT (62) IS AN UP-ARROW SIGNALING END OF XRAY OUTPUT

        DATA PROMPT /62/

*       GET ORIGINAL JOB NAME

        CALL GETNAM (-1, JOBNAM)

*       INIT 1022

        CALL DBSTRT (1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,
     +     1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1,1,-1)
        CALL DBERR ($890, IERT, IERC)

*       RE-ESTABLISH ORIGINAL JOB NAME FOR SYSTAT

        CALL SETN (JOBNAM)

*       CONVERT CURRENT DATE TO YYMMDD FORMAT

        CALL DATE (IDATE)
        CALL DATCON (IDATE, TDATE, ERRD)
        IF (ERRD .EQ. -1) GOTO 997

*       OPEN LOG FILE FOR RECORDING CIRCUIT BUILDS, FAILURES, AND OTHER
*       ERROR CONDITIONS.

        OPEN (22, '(NTRACKPROGS)NTRLOG', RANDOUT)

*       WRITE 2 BLANK LINES TO LOG FILE.

        MTRPOS = SIZE(22) + 1
        WRITE (22#MTRPOS, 5015),TDATE,TTIME
5015    FORMAT (1X/,'PROGRAM STARTUP: ',I6,1X,I4)

*       OPEN 1022 NODE-COMMAND QUEUE FILE DATA BASE

        CALL DBOPEN ('(NTRACKPROGS)NTRQUE')

*       GET PROGRAM STOP TIME FROM CONTROL FILE. PROGRAM NORMALLY ONLY
*       RUNS DURING PEAK TRAFFIC TIMES.

        OPEN (24, '(NTRACKPROGS)NTRBAK.CTL',INPUT)
        READ (24, 5020) STIME
5020    FORMAT (I4)
        CLOSE(24)

*       SORT NODE-COMMAND QUEUE

50      CALL DBCLR
        CALL DBFIND ('ALL')
        CALL DBSORT ('XRETRY', 'CDATE', 'CTIME', 'NODE')

*       PULL A JOB (NODE-COMMAND, ETC. FROM QUEUE

60      CALL DBGREC ($50)

*       EXTRACT VALUES FROM 1022 QUEUE DATA BASE AND INTO FORTRAN FIELDS

        CALL DBVAL ('NODE', NODE, 'NEIGH', NEIGH, 'KERNL', KERNEL,
     +  'COMND', XCOM, 'CDATE', CDATE, 'CTIME', CTIME, 
     +  'SDATE', SDATE, 'XRETRY', RETRY, 'MTIME', MTIME)

*       MAKE SOME TESTS TO SEE IF CURRENT JOB SHOULD NOT BE EXECUTED

*       GET CURRENT TIME

        CALL TIME (ITIME)

*       CONVERT TIME TO HHMM FORMAT FOR COMPARISON WITH QUEUE DATA BASE
*       TIME IN LIKE FORMAT

        CALL TIMCON (ITIME, TTIME, ERRT)

*       IF CURRENT TIME OF DAY IS PAST THE STOP TIME FROM THE CONTROL
*       FILE, THEN STOP THE PROGRAM. DONE FOR THE DAY. ONLY RUN DURING
*       PEAK TRAFFIC TIME

        IF (TTIME .GE. STIME) GOTO 998

*       IF GETTING CLOSE TO THE HOUR, STOP PROGRAM. IT WILL BE STARTED
*       AGAIN BY A PERP JOB.

        MNTMOD=MOD (TTIME,100)
        IF (MNTMOD.GE.57) GOTO 996

*       IF CURRENT DATE IS AFTER THE STOP DATE FOR THIS QUEUE ENTRY,
*       THEN SKIP THIS QUEUE ENTRY AND GO ON TO THE NEXT ONE.

        IF (TDATE .GT. SDATE) GOTO 60

*	IF LESS THAN MINIMUM TIME SINCE LAST SNAP GET NEXT RECORD

	IF ((TTIME-CTIME) .LT. MTIME) GOTO 60

*       IF NOT IN RETRY MODE ON THIS QUEUE ENTRY, GO PROCESS IT.

        IF (RETRY .EQ. 0) GOTO 100

*       IF THE LAST RETRY WAS NOT AT LEAST 15 MINUTES AGO, SKIP IT.

        IF ((TDATE .EQ. CDATE) .AND. ((TTIME-CTIME) .LT. 15)) GOTO 60

*       BUILD CIRCUIT TO XRAY

100     ERRCKT = 0
        CALL XRCIR (KERNEL,ERRCKT)
        IF (ERRCKT .NE. 0) GOTO 300

*       CIRCUIT BUILT

*       MTRPOS=SIZE(22)+1
*       WRITE (22#MTRPOS, 5025) NODE, TTIME
*5025    FORMAT ('LOGGED IN TO NODE', I5, '.  TIME =', I5)
*       MTRPOS=SIZE(22)+1

*       TEST WHICH COMMAND IS TO BE EXECUTED AND EXECUTE IT.

        IF (XCOM .EQ. 'KS   ') CALL KS (NODE,NEIGH,TDATE,TTIME)
        IF (XCOM .EQ. 'NS   ') CALL NS (NODE,TDATE,TTIME)
        CALL ZAP (PORT)

*       UPDATE QUEUE DATA BASE WITH THE TIME OF THIS SUCCESSFUL XRAY
*       EXTRACTION.

        CALL DBCHNG ('CDATE', TDATE, 'CTIME', TTIME, 'XRETRY', 0)
        GOTO 350

*       CIRCUIT BUILD FAILED. UPDATE RETRY SWITCH IN QUEUE DATA BASE.
*       DUMP MSG TO LOG FILE, TOO.

300     IF (ERRCKT.NE.0) MTRPOS=SIZE(22)+1
        IF (ERRCKT .GT. 0) WRITE (22#MTRPOS, 5035) NODE, TTIME,
     +  ERRCKT 
5035    FORMAT ('CIRCUIT BUILD FAILED. NODE: ',I5,
     +  1X,'TIME: ',I5,' ERROR: ',I3)

        IF (ERRCKT.EQ.-1) WRITE (22#MTRPOS,5040) NODE,TTIME
5040    FORMAT ('BAD RESPONSE, NODE: ',I5,' TIME: ',I4)

        RETRY = RETRY-1
        CALL DBCHNG ('XRETRY', RETRY)

*       GET NUMBER AUX CIRCUITS UP. THERE SHOULD BE NONE. IF MORE THAN ONE,
*       STOP PROGRAM. GARBAGE AUX CIRCUITS CAN PREVENT USERS FROM
*       LOGGING INTO THE SYSTEM DUE TO OUT OF PORTS.

350     CALL ZAP (PORT)
        CALL AUXCHK (NUMCIR)

*       IF MORE THAN ONE CIRCUIT IS UP, STOP PROGRAM

        IF (NUMCIR .LT. 2) GOTO 60

*       GOT GARBAGE CIRCUITS, RECORD ERROR IN LOG AND STOP PROGRAM

        WRITE (22#MTRPOS, 5045) NODE, TTIME
5045    FORMAT ('GARBAGE CIRCUITS, NODE-TIME = ',I,1X,I)
        GOTO 999

*       1022 ERROR - EXIT PROGRAM

890     MTRPOS = SIZE(22) + 1
        WRITE (22#MTRPOS, 5050) IERT, IERC
5050    FORMAT (/ '!!! ERROR EXIT PROGRAM:  1022 ERROR.  ',
     +  'TYPE =', I3, ', CODE =', I3, '.  !!!' /)
        GO TO 999

*       DATE CONVERSION ERROR, STOP PROGRAM

997     MTRPOS=SIZE(22)+1
        WRITE (22#MTRPOS,5110) TDATE,TTIME
5110    FORMAT ('PROGRAM EXIT, DATE CONVERSION ERROR AT: ',I6,1X,I4)
        GOTO 999

*       CURRENT TIME IS PAST PROGRAM STOP TIME IN CONTROL FILE

998     MTRPOS=SIZE(22)+1
        WRITE (22#MTRPOS,5100) TDATE,TTIME
5100    FORMAT ('CONTROL FILE EXIT, PAST STOP TIME: ',I6,1X,I4)

*       EXIT DUE TO GETTING CLOSE TO THE NEXT HOUR

996     MTRPOS=SIZE(22)+1
        WRITE (22#MTRPOS,5205) TDATE,TTIME
5205    FORMAT ('PROGRAM STOP AT THE HOUR, TIME: ',I6,1X,I4)
        GOTO 999
*       NORMAL EXIT

999     CLOSE(22)
        CALL DBEND
        CALL BYE

*       PROGRAM END

        END
