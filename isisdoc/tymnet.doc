                                                               November 12, 1981

















                ***** *   * *   * *   * ***** *****       *****
                  *    * *  ** ** **  * *       *           *  
                  *     *   * * * * * * ****    *   *****   *  
                  *     *   *   * *  ** *       *           *  
                  *     *   *   * *   * *****   *         *****

                                REFERENCE MANUAL

                           Network Development Group
                                 Tymshare, Inc.
                             Cupertino, California








      ====================================================================
      |       THIS DOCUMENT IS THE SOLE PROPERTY AND CONFIDENTIAL        |
      |       INFORMATION  OF  TYMSHARE,  INC.,  AND  MAY  NOT BE        |
      |       COPIED  IN  WHOLE OR IN PART  OR  DISCLOSED  TO ANY        |
      |       THIRD PARTY  WITHOUT THE PRIOR  WRITTEN  CONSENT OF        |
      |       TYMSHARE.                                                  |
      ====================================================================













                                                                        TYMNET-I
                                                               November 12, 1981













             Various sections of this document were written by:

             John O. Kopf
             David E. Smith







             In addition, parts were derived from other documents, written by:

             Bill Bishop
             Carl Holmberg
             Charles Landau







             Comments and suggestions related to this document are solicited.



















                                           1                            TYMNET-I
          TYMNET-I                 TABLE OF CONTENTS           November 12, 1981


        Section                                                             Page


        1.   INTRODUCTION TO TYMNET-I                                          1
          1.1   The TYMSAT                                                     1
          1.2   The TYMCOM                                                     2
          1.3   INTER-NODE COMMUNICATIONS                                      2
          1.4   The TYMNET SUPERVISOR                                          3
          1.5   TYMNET CIRCUITS                                                4
          1.6   NODE STRUCTURE                                                 5

        2.   NODE MACHINE CAPACITY                                             6
          2.1   CPU LOAD CAPACITY                                              6
          2.2   PROCESS LOAD                                                   7

        3.   BUFFERS AND BUFFERLETS                                            8
          3.1   BUFFER FLAGS                                                   9
          3.2   BUFFER ZAPS                                                   10

        4.   NETWORK SYNC LINE PROTOCOL                                       11
          4.1   RESET PATTERN                                                 11
          4.2   DATA PACKET                                                   12
             4.2.1    PACKET EXAMPLE                                          13
             4.2.2    PACKET SECTORS                                          13

          4.3   SYNC RECEIVER & TRANSMITTER                                   14
             4.3.1    SYNC. RECEIVER                                          15
                4.3.1.1     THE RECEIVER ALGORITHM                            15

             4.3.2    SYNC. TRANSMITTER                                       17
                4.3.2.1     THE TRANSMITTER ALGORITHM                         17

          4.4   PACKET TEARDOWN AND CONSTRUCTION                              18
             4.4.1    PACKET TEARDOWN                                         18
                4.4.1.1     RTD ALGORITHM                                     19

             4.4.2    PACKET CONSTRUCTION                                     20
                4.4.2.1     RMAKE ALGORITHM                                   21

        5.   SUPERVISOR COMMUNICATION                                         24
          5.1   SUPERVISORY MESSAGES                                          24
          5.2   NETWORK-INTERNAL MESSAGES                                     25
             5.2.0    Type 0 - UNTAKER                                        25

          5.3   MESSAGES FROM THE SUPERVISOR                                  26
             5.3.0    Type 0 - TAKEOVER                                       26
             5.3.1    Type 1 - PUT CHARACTERS IN BUFFER                       26
             5.3.2    Type 2 - CHANGE PERMUTER TABLE ENTRY                    26
             5.3.3    Type 3 - CHANGE MEMORY or MISCELLANEOUS                 27
             5.3.4    Type 4 - READ MEMORY/READ RANGE                         30
             5.3.5    Type 5 - LOGIN STATUS                                   31
             5.3.6    Type 6 - SUPERVISOR TIME-OF-DAY                         32
             5.3.7    Type 7 - INVOICE NUMBER                                 33
          TYMNET-I                 TABLE OF CONTENTS           November 12, 1981


          5.4   MESSAGES SENT TO THE SUPERVISOR                               34
             5.4.0    Type 0 - TAKEOVER RESPONSE                              34
             5.4.1    Type 1 - LOGIN CHARACTER                                34
             5.4.2    Type 2 - REJECT                                         35
             5.4.3    Type 3 - MEMORY DATA or REPORTS                         35
             5.4.4    Type 4 - LOGIN CHARACTER PAIR                           45
             5.4.5    Type 5 - MISCELLANEOUS                                  46
             5.4.6    Type 6 - MISCELLANEOUS                                  47
             5.4.7    Type 7 - ACCOUNTING                                     49

          5.5   SUPERVISOR'S AREA OF MEMORY                                   50

        6.   THE LEPRECHAUN                                                   53
          6.1   SUPERVISORY MESSAGE FORMAT                                    53
          6.2   LEP ROUTINES                                                  53
             6.2.1    OUTPUT ROUTINES                                         54
             6.2.2    INPUT ROUTINE                                           55

        7.   VIRTUAL TERMINAL CHARACTERISTICS                                 59
          7.1   PREFIX CODES                                                  60
          7.2   OBSOLETE CODES                                                64

        8.   TERMINALS                                                        65
          8.1   ASCII TERMINALS                                               66
             8.1.1    ASCII RECEIVER                                          69

          8.2   MESSAGES FROM THE CIRCUIT                                     71
          8.3   PRINTING                                                      73
          8.4   2741 TERMINALS                                                74
          8.5   2780 and 3780 TERMINALS                                       75
          8.6   3270 TERMINALS                                                76
          8.7   DIAL-OUT TERMINALS                                            76

        9.   BASE-HOST INTERFACE                                              77
          9.1   The BASE                                                      77
             9.1.1    SUMMARY OF BASE-TO-HOST MESSAGES                        78
             9.1.2    SUMMARY OF HOST-TO-BASE MESSAGES                        79

          9.2   ESTABLISHING COMMUNICATION WITH THE BASE                      80
          9.3   BUILDING CIRCUITS                                             81
             9.3.1    EXTERNALLY-INITIATED CIRCUITS                           81
             9.3.2    INTERNALLY-INITIATED CIRCUITS                           82

          9.4   TEARING DOWN CIRCUITS                                         84
          9.5   USING CIRCUITS                                                84

        10.  ACCOUNTING                                                       88
          10.1  SUPERVISORY MESSAGE FORMAT                                    88

        11.  CIRCUIT BUILDING                                                 90
          11.1  TIME-SEQUENCE OF SUPERVISORY MESSAGES                         92
          TYMNET-I                 TABLE OF CONTENTS           November 12, 1981


                                     APPENDICIES
                                     ===========


        I.   Summary of TYMNET-I LEP Messages                                 93


        II.  Summary of TYMNET-I Virtual Terminal Codes                       96


                                     GLOSSARY
                                     ========                                 98

                                      INDEX
                                      =====                                  101
        INTRODUCTION TO TYMNET-I                               November 12, 1981






                              1 - INTRODUCTION TO TYMNET-I


             TYMNET-I is a  multiplexed-packet network characterized  by circuit
        routing established by a  SUPERVISOR.  Each circuit is  a bi-directional
        data  path,  constructed  from the  circuit  originator  to  the circuit
        destination.  This circuit passes through one or more nodes.

             TYMNET-I  interfaces  to  host  computers  and  to  terminals.  The
        network consists of a large  number of NODES, each of which  is designed
        to provide a subset of the functions required within the network.  Thus,
        there are nodes which  are classed as TYMSATS  (terminal interfaces),and
        other nodes which are classed as TYMCOMS (host computer interfaces).

             Each node has a unique  node number, by which it is  identified.  A
        node is a collection of processes which are used to transfer data to and
        from buffer storage.  Individual processes are normally (but not always)
        concerned with one type of  interface to the exterior of the  node, such
        as asynchronous ports, synchronous lines, and host ports.






                                    1.1  The TYMSAT


             A TYMSAT is characterized by having  a node number 1000 < N  < 1777
        (octal).   It  may  be  further  characterized  as  a  NORMAL-,  SUPER-,
        INTERDATA-, or ENGINE-TYMSAT.

             A  NORMAL-TYMSAT has  maxima of  32 ports,  48 passthroughs,  and 3
                network lines.
             A SUPER-TYMSAT  has maxima  of 64 ports,  256 passthroughs,  and 16
                network lines.
             The INTERDATA-TYMSAT  is a variation  of the SUPER-TYMSAT,  and has
                maxima of 128 ports, 256 passthroughs, and 16 network lines.
             The ENGINE-TYMSAT is also a variation of the SUPER-TYMSAT,  and has
                maxima of 256 ports, 512 passthroughs, and 16 network lines.










                                           1                            TYMNET-I
        INTRODUCTION TO TYMNET-I                               November 12, 1981


                                    1.2  The TYMCOM


             A TYMCOM  is characterized by  having a  node number 0  < N  < 1000
        (octal).

             A  special class  of TYMCOM  is the  BASE: this  is a  TYMCOM which
        interfaces to  one of TYMSHARE's  host computers, through  a specialized
        interface.  A TYMCOM may  be further characterized as a  SINGLE-, DUAL-,
        or SUPER-TYMCOM.

             A  SINGLE-TYMCOM has  maxima of  96 ports,  48 passthroughs,  and 5
                network lines.
             A DUAL-TYMCOM  has maxima  of 128  ports (two  hosts, each  with 64
                ports), 96 passthroughs, and 8 network lines.
             A SUPER-TYMCOM has  maxima of 256 ports  (may have 1-4  hosts, with
                ports equally divided between  hosts, in groups of 256,  128, or
                64 respectively), 192 passthroughs, and 16 network lines.






                             1.3  INTER-NODE COMMUNICATIONS


             Nodes communicate with each other via one of two protocols, both of
        which are unique to TYMNET-I:  these are normal-  and satellite-protocol
        (the basic distinction  is with the format  of the packet  header, which
        determines the number of packets outstanding).  Each packet has a 16-bit
        header, 0-60 bytes of contents (in multiples of 2 bytes), and 4 bytes of
        checksum information.   Within the  contents there  may be  0-20 logical
        records, each containing information for one circuit.

             Each TYMNET-I node may talk to another node by a single  sync line.
        That  line  is logically  partitioned  into CHANNELS,  and  channels are
        assigned to circuits for the duration of that circuit.  Two channels are
        pre-assigned  for  network  usage:  one  for  communications   with  the
        supervisor;  one for  communications  with that  neighboring  node.  The
        assignment of channels, to circuits, is performed by the supervisor.

             Packets are  of varying  length, from a  minimum of  6 bytes,  to a
        maximum of 66 bytes.










                                           2                            TYMNET-I
        INTRODUCTION TO TYMNET-I                               November 12, 1981


                               1.4  The TYMNET SUPERVISOR


             TYMNET-I  has  an  active  supervisor  at  all  times;   additional
        supervisors may  exist on a  standby basis, so  that if  the controlling
        supervisor is lost for any reason, an alternate supervisor  "takes over"
        the network.

             The supervisor is responsible for building circuits and controlling
        access  to hosts.   It  maintains a  Master User  Directory  (MUD) which
        contains an entry  for each username which  is authorized on  TYMNET.  A
        username  is a  string of  ASCII characters;  it may  not  contain colon
        (":"),  semicolon (";"),  exclamation point  ("!"), carriage  return, or
        some  other  characters.  The  case  (upper, lower)  of  letters  is not
        significant.  Each entry in the MUD has:

             (1) a function of the password for this username;
             (2) the host number(s) of the home system(s) for this username;
             (3) a bit telling whether the username is valid on hosts other than
                the home system(s); and
             (4) a bit telling whether this username has shut override.

             The supervisor communicates with the TYMNET-I nodes in  the network
        via 6-byte supervisory messages.  These messages flow over a tree-shaped
        path, with those going toward the supervisor being  guided automatically
        in the correct direction, and  those going to the nodes  being directed,
        by the supervisor, at the various nodes of the network.

             The supervisory messages are used for control functions, as well as
        to provide information  to various processes:   accounting, diagnostics,
        and responses to supervisory commands.

             The supervisor has three major functions: maintaining a description
        of  the  topology  of  the network;  maintaining  a  description  of the
        topology of each circuit  passing through the network;  and accumulating
        certain  information  from  the  nodes.   The  descriptions  of topology
        maintained by the supervisor are "secondary" descriptions: the "primary"
        description resides in the collective nodes of the network.   This makes
        it possible  for a  new supervisor  to "take"  the net  without previous
        explicit knowledge.

             The supervisor is actively involved with a circuit only at the time
        of circuit creation...after that, the nodes along the way  have complete
        control.  The supervisor will  not re-use any of the  assigned resources
        until it is informed that the circuit has been "zapped".









                                           3                            TYMNET-I
        INTRODUCTION TO TYMNET-I                               November 12, 1981


                                  1.5  TYMNET CIRCUITS


             A TYMNET circuit is  a full duplex data communication  path between
        two ports.  A port is either a TYMCOM port or a TYMSAT port.  One of the
        ports of a circuit is always  a TYMCOM port.  A port is identified  by a
        12-bit node number and an 8-bit port number.

             A TYMCOM port  is a logical information  path to a host.   A TYMSAT
        port  is an  interface to  a  terminal or  other device  (not  all these
        devices are documented here).

             A circuit is  like two pipes.  The  messages that flow  through the
        pipes are either  8-bit data bytes or  control codes.  In each  pipe the
        messages always  flow in the  same direction and  they never get  out of
        order.

             Messages in a pipe may get crowded.  This can occur  either because
        messages are  not being  removed from the  output end  of the  pipe fast
        enough, or because  messages are slowed down  in the middle of  the pipe
        due to friction.  Normally when messages get crowded they simply back up
        in   the   pipe  ("backpressure").    Occasionally    messages  get
        overcrowded.   When  this  happens a  contiguous  group  of  messages is
        discarded and replaced by a control code called a black ball.  Since the
        black ball is smaller than  the messages it replaces, the  congestion in
        the pipe is relieved.

             A circuit has a speed which can be 30 cps or 120 cps.  The speed of
        a circuit is the approximate number  of data bytes that can be  sent per
        second without generating friction.

             Two control codes receive special treatment when passing  through a
        circuit,  namely the  character gobbler  and the  circuit  zapper.  When
        either of these  control codes encounters a  message ahead of it  in the
        pipe, the  latter is discarded  ("gobbled").  Thus gobblers  and zappers
        are immune to friction and overcrowding.

             Occasionally, network difficulties may cause a circuit zapper to be
        spontaneously sent  on each  pipe of a  circuit from  some point  in the
        circuit (thus destroying the circuit).














                                           4                            TYMNET-I
        INTRODUCTION TO TYMNET-I                               November 12, 1981


                                  1.6  NODE STRUCTURE


             Aside from certain machine dependencies, or supervisor requirements
        on fixed memory  locations, there is  no unique "node-code".   Nodes do,
        however, have certain elements in common.

             The cleanest description has the following properties:

             At  the heart  of the  system is  a pool  of storage,  allocable to
        various uses;

             There  is also  a  set of  buffer descriptors,  with  certain fixed
        functional  assignments,  which  may be  referenced  both  by individual
        interfaces within the node, and by the supervisor;

             Furthermore, there are  a collection of subroutines  for management
        of the buffer descriptors and the data pool.

             In  addition,  there  are  typically  a  collection  of independent
        processes  also running  within the  node.  Some  of these  are standard
        network applications, such as node-node (201) and  node-supervisor (LEP)
        communications.  Others are  application specific, such  as asynchronous
        terminal handling, host interfaces, etc.

             Each  of these  processes is  designed to  be independent  of other
        processes.  A process which places characters into a buffer (descriptor)
        does not  care which  process removes them:   the process  which removes
        characters does not care where they originated.

























                                           5                            TYMNET-I
        NODE MACHINE CAPACITY                                  November 12, 1981






                               2 - NODE MACHINE CAPACITY


             Basic to a  discussion of the  capabilities of the  current network
        nodes is the power of the CPU involved and the power needed  for various
        operations.  Laroy Tymes has defined an empirical quantity  called "load
        unit"  which is  useful  to describe  these quantities.   The  load unit
        capacity of a CPU varies directly with the number of instructions it can
        perform  in a  unit  time--thus this  quantity scales  basically  as the
        reciprocal of the memory cycle time.






                                 2.1  CPU LOAD CAPACITY


             We are currently concerned with  seven types of CPU, five  of which
        are produced by Varian.  These are the 620i and 620l, with a  cycle time
        of  1.8  microseconds,   the  620l-100,  with   a  cycle  time   of  .95
        microseconds, and the  V72, V73 and  V77, which are  software compatible
        with the  620, but which  have several options  available to  them.  The
        other CPU's are  the INTERDATA 7/32, and  the TYMNET ENGINE,  which have
        similar instruction sets.

             The load unit for a Varian CPU corresponds to  approximately 70,000
        memory cycles/second; for an Interdata 7/32 or engine (with  a different
        instruction  set)  a  load corresponds  to  approximately  55,000 memory
        cycles/second.

        CPU                             LOAD CAPACITY

        620I, 620L                       8
        620L-100                        15
        V77                             20
        V72, V73: 660-us core memory    21.5
          {V72, V73: with interleave}     {1-1.5 * Load without interleave}
        V72, V73: (core: max. possible) 35
        V72, V73: 330-ns semiconductor  40
        7/32                            24
        ENGINE                          28
        ENGINE (enhanced)               28 (with reservations)

             The ENGINE (enhanced) has the capability of putting  many functions
        into microcode, and  thereby reducing the  number of memory  cycles (and
        therefore  the load)  required by  that function.   We  therefore cannot


                                           6                            TYMNET-I
        NODE MACHINE CAPACITY                                  November 12, 1981


        speak of the ENGINE (enhanced) as supporting more load, but must instead
        describe it in terms of reduced-load processes.






                                   2.2  PROCESS LOAD


             The corresponding load for various processes is shown below:

        Process                         LOAD

        2400 baud synchronous line      1
        4800  "        "       "        2
        7200  "        "       "        3
        9600  "        "       "        4
        16 low-speed (async) ports      2
        16 high-speed (async) ports     5
        16 high-speed (async) ports     1/2 {ENGINE (enhanced) }
        50 kilobaud synchronous line    5 {not on Varians}

             LOAD  is an  instantaneous quantity,  and a  given process  may, at
        times exert less  than it's full  load on the  CPU.  LOAD CAPACITY  is a
        time-average quantity, and is necessarily less than the full capacity of
        the CPU, since there will  be times when the CPU is  alternating between
        full capacity and being more or less idle.

             Also, the load for a process is dependent on external hardware.  If
        the hardware is performing  functions independently of the CPU,  some of
        the load is obviously removed from the CPU.  Thus a 2400 baud  line with
        no  "201-card" is  a heavier  load than  with the  card, since  the card
        accumulates a total  of 16 bits  before the CPU  sees it, while  the CPU
        must process each bit without the card present.


















                                           7                            TYMNET-I
        BUFFERS AND BUFFERLETS                                 November 12, 1981






                               3 - BUFFERS AND BUFFERLETS


             A special kind  of buffer which exists  in all TYMNET nodes  is the
        GCI/WCI buffer.  Each circuit  terminating in or passing through  a node
        has a pair of these buffers associated with it.  In addition, a node may
        have additional buffers assigned to special functions.

             These  buffers are  better named  "buffer descriptors",  since they
        hold no data, but instead  indicate where the transient data  is stored.
        The "buffer" associated with buffer descriptors is  dynamically assigned
        from a "buffer pool", or "pool of bufferlets".

             In a given type  of node, the number  of buffers is not  fixed, but
        can vary from node to node according to the traffic that node will bear.
        In general, there will be a buffer pair for each low-speed port, and one
        or two buffer pairs (for supervisory traffic [and traffic  control]) for
        each line.  In  addition, if passthrough  traffic is possible  (i.e., if
        there is more than  1 line on the  node), there is an  additional buffer
        for each channel (a  passthrough circuit requires two buffers,  and must
        of necessity use two channels, one on each of the incoming  and outgoing
        lines).  Part of the information available to the supervisor is a set of
        descriptors which  specify the  buffer range assigned  to each  of these
        function, so the supervisor can link a circuit correctly.

             The buffer pool is divided into bufferlets.  Each buffer descriptor
        has  associated with  it a  pair of  pointers:  the  "fill"  and "empty"
        pointers.   A chain  of bufferlets  may be  in use  for a  buffer  if it
        contains  more  characters than  a  single bufferlet  can  hold.  Unused
        bufferlets are also chained together in a list of free bufferlets.  When
        placing a character  in a buffer, and  the current bufferlet is  full, a
        new bufferlet is  allocated, removed from the  free list, and  linked to
        the current bufferlet.  The  normal process of placing the  character in
        the  bufferlet  proceeds  with the  new  bufferlet.   Similarly,  when a
        bufferlet is exhausted, it is freed (chained to the free list),  and the
        empty pointer is switched to the beginning of the next bufferlet.

             Each buffer has associated  with it (at least) four  table entries:
        BP, BF, BC, and BE.  BF is the flag pointer and it's usage  is described
        below.  BC is  the buffer count, and  specifies how many  characters are
        associated  with the  buffer.   BP and  BE  are the  "empty"  and "fill"
        pointers, respectively.  Initially, BC is  zero and BP is null.   As the
        first character is to  be placed in the  buffer, the zero-ness of  BC is
        noted  and a  bufferlet is  allocated, and  BP and  BE are  set  to that
        pointer.  Thereafter, successive characters are placed in  the bufferlet
        specified  by BE,  with  additional bufferlets  allocated  as necessary,
        linked to the previous bufferlet,  and BE is updated at such  times.  In
        addition, BC is incremented each time another character is placed in the
        buffer.

                                           8                            TYMNET-I
        BUFFERS AND BUFFERLETS                                 November 12, 1981


             BP  is used  when a  character is  to be  removed (remember  that a
        buffer is a  queue of characters,  and the first  in is the  first out).
        Each time a character is removed, BC is decremented, and a determination
        is made if this was the  end of the bufferlet.  If so, the  bufferlet is
        freed and the appropriate chaining is made to the next bufferlet for BP.

             There are a couple of additional features of bufferlets which it is
        as well to describe here.

             Occasionally it  is necessary for  the code to  remove one  or more
                characters from a buffer and then restore them.  This  is easily
                effected with this bufferlet scheme, even if the  bufferlet with
                the character has been freed, provided that no other  buffer has
                been  addressed between  fetching and  restoring  the character.
                This  is  because  the  character  pointer  associated  with the
                bufferlet is not modified  when the bufferlet is freed,  and the
                freed bufferlet is always at the top of the free stack.
             A second feature  is that a character  can readily be added  to the
                beginning of the buffer.






                                   3.1  BUFFER FLAGS


             Independent processes share buffer (descriptors).  In particular, a
        collection  of buffers  which  interface to  a single  process  may also
        interface to a "set" of other processes.  It is necessary  to "decouple"
        independent processes which address  the same buffer, if only  to insure
        that the processes need not "know" details of each other.

             Independence  is  achieved  through  the  mechanism  of  the "FLAGS
        array".   Each  node  has  a  bit  array,  and  the  BF  of  each buffer
        (descriptor) points at one of these bits.  The array is partitioned into
        functional  areas,  corresponding to  different  processes  which remove
        characters from  a set  of buffers.  (Note...if  the BF  of a  buffer is
        zero, this is treated in a special fashion...that buffer becomes  a "bit
        bucket", or character sink.)

             Each  process  knows  which  area  of  the  FLAGS  array  it  is to
        reference, and, by simply loading a  word of bits, detect if any  of the
        buffers in that group have data to be processed.  Additional constraints
        can be applied, onto the examination of a group, by simple boolean AND's
        and OR's.

             The set of  standard routines used  to place and  remove characters
        perform these operations on the FLAGS array automatically.




                                           9                            TYMNET-I
        BUFFERS AND BUFFERLETS                                 November 12, 1981


                                    3.2  BUFFER ZAPS


             Any process which references  a buffer may, on occasion,  have need
        to  EMPTY that  buffer.  This  is not  considered a  critical condition.
        However,  the  buffer  management  logic  itself  may,  on  occasion and
        independently of the process  addressing the buffer, have need  to empty
        the  buffer.  This  is known  as a  buffer zap!   When a  buffer  zap is
        necessary, the set of all  buffers is searched for the buffer  which has
        the greatest number of characters, and this buffer is emptied.

             Buffer zaps may be effected by either of two mechanisms:

             In one implementation, the routines perform the operation  in real-
        time, initiated by an attempt to allocate a bufferlet and  the discovery
        that the  pool of  free bufferlets  is empty.   This method  has several
        faults:

             The asynchronous nature of the operation can cause a fragment  of a
                character string  to be  destroyed, when  that string  should be
                kept or destroyed as a unit.
             The asynchronous  nature of  the operation can  also cause  a time-
                critical   sequence   to   be   interrupted,    with   attendant
                difficulties.
             These  two faults  impose  a constraint  on the  maximum  number of
                buffers which are to be  searched for a buffer zap, and  also on
                the maximum number of  bufferlets which may be  allocated.  Both
                of these constraints are a direct result of the time consumed in
                the zap process in this implementation.

             In the second implementation, a  part of the bufferlet pool  is set
        aside as a "reserve tank".  Instead of zapping a buffer when the pool is
        exhausted,  the  reserve  tank  is  transfered  to  the  free  pool  and
        subsequent storage  is used  from it.   At a  later and  more convenient
        time, a routine is called to restore the reserve tank, at a  known point
        in  the processes  execution.  This  prevents the  loss of  fragments of
        character  strings.  It  also  permits the  execution  of time-dependent
        processes beforehand, so that  more time is available if  necessary, but
        at the cost of having a significant quantity of the free pool  set aside
        for the reserve tank, and unavailable except for momentary usage.














                                           10                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981






                             4 - NETWORK SYNC LINE PROTOCOL


             The  major mechanism  used to  communicate between  two neighboring
        nodes in TYMNET is the  sync line (201 line).  The  following discussion
        describes the protocol used on these lines.

             Data is transmitted in  16-bit "words", or multiples  thereof.  The
        hardware transmits the 16-bit quantities high-order bit first (left-most
        bit in the  examples below).  The  transmission of "marking  state" (all
        1's) is also in 16-bit chunks.  When there is no data to transmit,  or a
        pause  in the  transmission is  called for,  the line  will  be carrying
        marks.

             At other times, a 201-line  may be in either of two  states.  These
        states are:

             1.  Reset-state  (a special,  two-word  packet, used  to  reset the
                line)
             2.  Packet-state   (the   normal  state,   where   data   is  being
                transmitted)






                                   4.1  RESET PATTERN


             A reset pattern (packet) consists of two words:

                        --.-.-.-.+.-.+.-.+.-.+.-.+.-.+.+-
         RESET          |            5253               |
                        |-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-|
         PATTERN        |    Originating Node Number    |
                        ---------------------------------

             The first word is the value 005253 (octal).

             The  second  word  of  a reset  indicates  the  node-number  of the
        originating node.  This an additional  check on the line, and is  of use
        primarily in catching errors in configuring the network.







                                           11                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                                    4.2  DATA PACKET


             A packet consists of a  one-word header, zero to 31 words  of data,
        and two words of checksum.  The header can have either of two formats:

                        --.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--
         NORMAL         |0|d|0|1|0|  count  | rec | ack |
                        ---------------------------------
            or
                        --.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--
         SATELLITE      |0|d|1|  count  |  rec  |  ack  |
                        ---------------------------------

             where  the  leading "0"  is  the  sync bit,  "d"  is  the direction
        indicator ("d"  is computed  at the origination  node, by  performing an
        arithmetic subtract of the neighbor's node number from  the originator's
        node number; "d" is "1" if the difference is negative, else "0"), "1" is
        called  the  Beginning-Of-Record-Input.   (This  name  derives  from  an
        obsolete usage, and does not really designate the current usage.)

             The current usage is that the leading bits, including  "0"', "1"'s,
                and  "d"'s,  be  of  correct  form  to  be  recognized   as  the
                "synchronization" (BORI) field.
             The 5-bit field "count" contains the number of words (1-31d) in the
                packet,  including the  header, but  excluding the  two checksum
                words.
             "rec" is the record number.
             "ack" is the record acknowledgement.

             The ONLY  difference between  normal and  satellite formats  is the
        size  of the  "rec"  and "ack"  fields,  and effects  derived  from this
        difference.  All packet contents, checksums, etc., have  identical usage
        in either format.

             The body (packet text) of the packet is taken up with zero  or more
        logical records.  A logical record consists of a two-byte  header, which
        defines  the  logical record  length  and the  channel  number  for this
        logical record.  This  is followed by one  or more data  characters.  (A
        line  is  logically  partitioned into  groups  [of  16  channels].  Each
        circuit  passing over  a line  has  been assigned  to a  channel  by the
        supervisor.  Channels 0 and 1 on each line are reserved for special data
        transmission, dealing with  supervisory messages and with  line traffic,
        respectively.)

             Following the set of logical records which make up the data for the
        physical packet, is the longitudinal checksum.  This is  an exclusive-or
        of all the words preceding.  This is followed by the  diagonal checksum,
        which is computed by taking the partial checksum, rotating it left  by 1
        place, and  exclusive-or'ing the  next word  in.  The  diagonal checksum
        includes the  longitudinal checksum  in it's  span.  The  checksums must
        include the packet  header, which is not  completed until the  packet is


                                           12                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


        transmitted,  in  order  to  include  the  most  recent  acknowledgement
        possible.





                    4.2.1  PACKET EXAMPLE

             Let us examine a  packet.  In this example (Normal  packet format),
        "d"  = 0,  "count"  = 3,  "rec"  = 4,  "ack"  = 5;   the  logical record
        specifies 2 bytes of data for channel 7, with contents 'Go'.   The "+"'s
        denote the positions of "1"'s in the words; "*" is a particular  bit (in
        the header), and the corresponding bits that it affects in the checksum:

                        --.-.-.+.-.-.-.-.*.+.+.-.-.+.-.+-
         HEADER         |    2    |    3    |  4  |  5  |
                        |-.-.-.-.-.-.+.-.-.-.-.-.-.+.+.+|
         Log. Head      |       2       |       7       |
                        |+.+.-.-.-.+.+.+.+.+.+.-.+.+.+.+|
         L. R. Text     |      'G'      |      'o'      |
                        |+.+.-.+.-.+.-.+.-.-.-.-.+.+.-.+|
         Long. Cksm.    |                *              |
                        |+.-.+.-.+.-.+.-.+.+.-.-.+.+.-.+|
         Diag. Cksm.    |        *     *                |
                        ---------------------------------





                    4.2.2  PACKET SECTORS

             A  sector  is  a  buffer  for the  storage  of  a  packet,  and may
        (depending   on    the   implementation)    include   space    for   the
        checksums...alternately,  the checksums  may be  computed "on  the fly".
        Sectors are numbered 0 to 3 (normal format; satellite format has sectors
        numbered 0  to 7).  A  node has  sectors for only  half of  the possible
        packet  numbers.   This  permits  a  node  to  transmit  (normal format;
        extension  to  satellite should  be  obvious) four  packets,  receive an
        acknowledgement for the first, transmit the fifth packet, and be able to
        distinguish the next acknowledgement for packet 0 (meaning sector 1 must
        be re-transmitted)  from an  acknowledgement for  packet 5  (meaning all
        sectors transmitted have been received successfully).

             The  low-order  bits of  the  "rec" and  "ack"  fields  (those bits
        excluding  the high-order  bit) denote  the sector  associated  with the
        packet number.

             Sectors have one or  more flags associated with them.   These flags
        are used to indicate that the sector (on input) contains a  good packet,
        or that (on  output) a packet  is queued in  that position, or  has been
        transmitted.

                                           13                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                            4.3  SYNC RECEIVER & TRANSMITTER


             There are a number  of different implementations of  Sync. Receiver
        and Transmitter, but the  basic functions are the same.   Note, however,
        that  there  may  be   important  real  differences  dependant   on  the
        implementation choice.

             Definition of some general variables is in order:

             nlines:  the number of lines on the node;
             line:  the number of the current line being serviced;
             nsect[line]:  the number of sectors for a particular line;
             secmask[line]:  a binary mask to extract the sector number from the
                record number (equal_to_numbr_of_sectors-1);
             cos[line]:  Current Output Sector...the last sector built;
             caos[line]:   Current  Assembly  Output  Sector...the  sector  last
                built, or currently being built;
             osf[line, nsect[line] ]:   Output Sector Flags...indicate  a packet
                exists in a particular sector;
             oss[line, nsect[line] ]:  Output Sector Sent...indicate a packet in
                a particular sector has been transmitted;
             liner[line]:  counter for line errors;
             linout[line]:  counter for good packets received--none  received if
                zero;
             linrtr[line]:  counter for line retransmissions received;
             lreset[line]:  counter for line resets received;
             badack[line]:  counter for bad acknowledgements received;

             Let's also  define some  functions that we  will be  referencing in
        subsequent descriptions of algorithms:

             next(line):  inputs  the next  word  from the  sync  line, properly
                justified;
             sync_bits(head):  returns the sync bits from the header appropriate
                to that line type;
             rec(head):  returns the "rec" field of the header;
             ack(head):  returns the "ack" field of the header;
             count(head):  returns the "count" field of the header;
             pointer(variable):  returns the "address" of the variable;
             cir_speed(word):  returns  the two  high-order bits  of  that word,
                right justified;












                                           14                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                    4.3.1  SYNC. RECEIVER

             The Receiver periodically examines the stream of words  being input
        (this  may occur  at the  receipt of  each word,  or it  may  occur less
        often).

             Let us define the following symbols:

             isf[line, nsect[nline] ]:  Input_Sector_Flags   (TRUE   if   sector
                contains packet);
             bori[line]:  Beginning_Of_Record_Input...the BORI expected for each
                line (includes "d" bit);
             istate[line]:  the   input   state   indicator   for   each   line:
                Initialized to "ireset";
             lrr[line]:  Last_Record_Received (last packet number);
             lra[line]:  Last_Record_acknowledged (used by transmitter);
             isect[line, nsect[line], 31]:  the input sector storage;



        4.3.1.1  THE RECEIVER ALGORITHM

        input:  head := next(line);
                IF head = -1 THEN GOTO input
                ELSE BEGIN {we have an input word that is not all 1's}
                    CASE istate[line] OF
                ipacket: {we are expecting packets} BEGIN
                        IF head = O'5253' THEN GOTO reset1;
                        {we didn't get a reset unexpectedly}
                        IF sync_bits(head) <> bori[line] THEN GOTO input;
                        {we got a match on sync bits...
                            set up to accept packet}
                        this_rec := rec(head);
                        sec := this_rec AND secmask[line];
                        size := count(head);
                        long := head;
                        diag := head;
                        saving := TRUE;
                        {we'll save this if we haven't got it already}
                        IF sec > lrr[line] THEN saving := FALSE;
                        IF NOT isf[line, sec] THEN saving := FALSE;
                        {if saving is still true, we have a potential packet
                            in any case, we want to perform checksumming}
                        IF saving THEN isect[line, sec, 1] := head;
                        FOR i := 2 TO size DO BEGIN
                            x := next(line);
                            IF saving THEN isect[line, sec, i] := x;
                            long := long XOR x;
                            diag := left_rotate(diag);
                            diag := diag XOR x;
                        END;
                        x := next(line);
                        long := long XOR x;

                                           15                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                        diag := left_rotate(diag);
                        diag := diag XOR X;
                        diag := diag XOR next(line);
                        IF diag = 0 AND long = 0 THEN BEGIN
                            {good checksums...accept it if saving}
                            linout=linout+1
                            IF NOT saving THEN linrtr[line] := linrtr[line]+1
                            ELSE isf[line, sec] := TRUE;
                            x := ack(head);
                            IF x < caos[line] OR x > cos[line]
                                THEN badack[line] := badack[line] + 1
                            ELSE BEGIN
                                {valid ack...set all sectors ack'ed empty}
                                FOR i := cos[line] TO x DO BEGIN
                                    osf[line, i] := FALSE;
                                    oss[line, i] := FALSE;
                                END;
                            END;
                        END
                        ELSE liner[line] := liner[line] + 1;
                        END { ipacket };
                ireset: {we are expecting resets, ONLY!}
                        IF head <> O'5253 THEN GOTO input ELSE BEGIN
                            {ignor resets for 2 seconds after receiving one}
                reset1:     IF now < tslr[line] GOTO input;
                            {we have a reset...clean up everything}
                            lrr[line] := -1;
                            lra[line] := -1;
                            FOR i := 1 TO nsect[line] DO BEGIN
                                isf[line, i] := FALSE;
                                osf[line, i] := FALSE;
                            END;
                            cdis[line] := 0;
                            cos[line] := 0;
                            caos[line] := 0;
                            istate[line] := ipacket;
                            ostate[line] := o1reset;
                            tslr[line] := now + 2;
                            lreset[line] := lreset[line] + 1;
                        END { ireset };
                    END;
                END;












                                           16                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                    4.3.2  SYNC. TRANSMITTER

             Let us define some more variables:

             ostate[line]: the output state of the line;
             osect[line,nsect[line], 33]:  the output sector storage;



        4.3.2.1  THE TRANSMITTER ALGORITHM

        output: CASE ostate(line) OF
            opacket: {are there any packets to transmit?} BEGIN
                sec := cos[line] AND secmask[line];
                IF osf[line, sec] THEN BEGIN
                    {there is a packet to be transmitted in this sector}
            pack1:      IF oss[line, sec] THEN BEGIN
                            {this packet already sent once before}
                            ostate[line] := retran;
                            {TRANSMIT 33 words of marks}
                        END
                        ELSE BEGIN {this packet has not been sent before}
                            cos[line] := cos[line] + 1;
                            oss[line, sec] := TRUE
            pack2:          head := osect[line, sec, 1];
                            size := count(head);
                            {insert the acknowledgement, fix checksums};
                            {TRANSMIT size+2 words from
                                osect[line, sec, 1] };
                        END;
                END
                ELSE BEGIN {nothing to send just now}
                    {TRANSMIT 1 word of marks}
                END;
             END { opacket } ;

            retran: {we have just output a space before retransmit...
                    should we proceed?} BEGIN
                ostate[line] := opacket;
                sec := cos[line] AND secmask[line];
                IF NOT oss[line, sec] THEN GOTO opacket
                ELSE BEGIN
                    linrts[line] := linrts[line] + 1;
                    GOTO pack2;
                END;
            END { retran } ;

            oreset: {to transmit a steady stream of resets};
                BEGIN
                {TRANSMIT 33 words of marks, followed by reset pattern}
                END;
            END {oreset} ;


                                           17                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


            o1reset: {to transmit a single reset, and then begin outputting
                      packets}; BEGIN
                {TRANSMIT 33 words of marks, followed by reset pattern}
                END;
                ostate[line] := opacket;
            END {1oreset} ;






                         4.4  PACKET TEARDOWN AND CONSTRUCTION


             Once a packet has been input, it must be  disassembled (torn-down).
        Similarly,  new  packets  must  be  constructed.   These   routines  are
        described herewith.   However, the  following additional  information is
        needed for understanding:

             Each machine has a  set of tables called "permuter  tables".  There
        is a separate table for each  line, and each table has a  separate entry
        for each "channel".  The entries have the following information:

             If the cell contains a "-1", that channel is not in use,  and there
                should be no  good reason to  reference it, other  than possible
                race conditions.
             Otherwise, the  two high-order bits  indicate the  "circuit speed".
                The  two-bit  speed  can  have  the  values  0,  1,  2,  3;  the
                corresponding limits are:   32, 128, 256-512,  >1000...these are
                the number of characters  which may be transmitted  before back-
                pressure is applied.
             The 14 low-order bits contain the number of a buffer,  whither data
                will be delivered.

             A second set of tables, called "buffer restrictions" ("^BR"), is in
        one-to-one  correspondence with  the permuter  tables, and  contains the
        count of characters which may be send over the line, before  the channel
        is to stop transmission (this is a part of the backpressure mechanism).





                    4.4.1  PACKET TEARDOWN

             Once a packet has been input, it must be  disassembled (torn-down).
        The name given to this routine is universally "RTD".






                                           18                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


        4.4.1.1  RTD ALGORITHM

        rtd:    FOR line := 1 TO nlines DO BEGIN
                sec := lrr[line] AND secmask[line];
                IF NOT isf[line, sec] THEN GOTO rtdend;
                ELSE BEGIN {the next sequential packet is present,
                        and may be torn down}
                    head := isec[line, sec, 1];
                    size := count(head)*2-3;
                    IF size < 1 THEN GOTO rtdone;
                    {the packet is not empty, so tear it down}
                    char_pnt := pointer(isec[line, sec, 2]);
            rtd1:   channel := next_char(char_pnt);
                    number := next_char(char_pnt);
                    buffer := ptable(line, channel);
                    {we now have the channel number, the destination buffer,
                        and number of bytes}
                    CASE channel OF
                        sup:    BEGIN {we have a sup record...( on channel
                                    0)....these are supposed to be 6-bytes
                                    long}
                                IF MOD(number, 6) <> 0 THEN GOTO error;
                                FOR i := 1 TO number DO BEGIN
                                    char := next_char(char_pnt);
                                    wci(char, buffer);
                                END;
                            END { sup } ;

                        flow:   BEGIN {we have gotten flow-control (back-
                                    pressure) info  (on channel 1)  there
                                    should be 2 bytes / group}
                                IF number > 2*group[line] THEN GOTO error;
                                FOR i := 1 TO number DO
                                    bpsf(line, i) := next_char(char_pnt);
                                FOR i := 1 to 2*group[line] DO
                                    IF bit_set(bpsf[line], i) THEN BEGIN
                                        speed :=cir_speed(ptable[line, i] );
                                        br[line, i] := limit[speed];
                                    END;
                            END { flow } ;

                        other:  BEGIN {we have a user channel}
                                FOR i := 1 TO number DO BEGIN
                                    char :=next_char(char_pnt);
                                    CASE char OF
                                        0or1:   BEGIN {char pair}
                                                wci(char, buffer);
                                                i := i+1;
                                                char := next_char(char_pnt);
                                                wci(char, buffer);
                                                END;

                                        2:      BEGIN {gobbler}

                                           19                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                                                empty(buffer);
                                                wci(char, buffer);
                                                END;

                                        3:      BEGIN {zapper}
                                                ptable(line, channel) := -1;
                                                empty(buffer);
                                                wci(char, buffer);
                                                END;

                                    other:  wci(char, buffer);
                                    END { CASE char };
                                END;
                            END { other } ;
                    END { CASE channel }  {this ends a logical record};
                    size := size - number - 2;
                    IF size > 0 THEN GOTO rtd1;
                END {this completes the packet};
        rtdone: lrr[line] := lrr[line] + 1;
                isf[line, sec] := FALSE;
            END;
        rtdend:

        FUNCTION next_char(pnt: INTEGER): INTEGER;
                next_char := load_byte(pnt);
                pnt := pnt + 1;
        END





                    4.4.2  PACKET CONSTRUCTION

             Data must be gathered  from several sources and constructed  into a
        packet.  The name given to this routine is universally "RMAKE".

             Packets  are  constructed  addressing all  users  on  a round-robin
        basis.  Users with back-pressure applied will have no data  sent, unless
        "expedite" has been set.

             If RMAKE  is unable to  service all channels  on a line  within any
        one-half  second  period,  because the  volume  of  traffic  exceeds the
        bandwidth of the  line, a counter  is ticked, indicating  line overload.
        This will cause the network  supervisor to avoid the application  of new
        circuits to this line, until this condition is resolved.








                                           20                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


        4.4.2.1  RMAKE ALGORITHM

        rmake:  FOR line := 1 TO nlines DO BEGIN
                    {don't get too far ahead on filling sectors}
                    IF cos[line] <> caos[line] THEN GOTO rmend;
                    sec := caos[line]+1 AND secmask[line];
                    IF osf[line, sec] THEN GOTO rmend
                    ELSE BEGIN {the next sequential sector is available,
                        and it's packet may be constructed}
                        char_pnt := pointer(osec[line, sec, 2] );
                        start := char_pnt;
                        fill := 58;
                        {every half-second we send neighbor back-pressure
                            info...is it time to do that?}
                        IF timeb[line] < now THEN BEGIN
                            timeb[line] := now + .5;
                            put_byte(1, char_pnt) {channel 1};
                            put_byte(2*group(line), char_pnt) {length};
                            fill := fill - 2
                            FOR i := 1 TO 16*group[line] DO BEGIN
                                flow := FALSE;
                                IF ptable(line, i) = -1 THEN GOTO rmake1;
                                speed := cir_speed(ptable[line, i] );
                                buffer := X'3FFF' AND ptable[line, i];
                                IF bc[buffer] < limit[speed] THEN flow := TRUE;
                    rmake1:     set_bit(i, char_pnt, flow);
                            END;
                            fill := fill - 2*group(line)
                            char_pnt := char_pnt + 2*group(line)
                        END;
                        {now supervisor data has priority}
                        buffer := x'3FFF' AND ptable[line, 1];
                        IF bc[buffer] > 0 AND br[line, 1] > 0 THEN BEGIN
                            number := min(bc[buffer],
                                          br[line, 1]);
                            number := number - mod(number, 6);
                            put_byte(0, char_pnt) {channel 0};
                            put_byte(number, char_pnt) {size};
                            FOR i := 1 to number DO
                                put_byte(gci(buffer), char_pnt);
                            fill := fill - number;
                        END;
                        {now check for any user data}
            rmake2:     FOR i := 1 TO group[line] DO BEGIN
                            IF fill < 4 THEN GOTO rmfull;
                            x := bpsf[line, i] OR expedite[line, i];
                            x := x AND cfob[line, i] AND pcfob[line, i];
                            IF x <> 0 THEN BEGIN
                                channel := 16*i + bid(x);
                                buffer := X'3FFF' AND ptable[line, channel]
                                {translate to output buffer}
                                buffer := buffer XOR 1;
                                set_bit(channel, pcfob[line, 1], 0);

                                           21                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                                set_bit(channel, expedite[line, 1], 0);
                                number := min(bc(buffer),
                                              fill-2,
                                              br[line, channel] );
                                putbyte(channel, char_pnt) {channel};
                                here := char_pnt;
                                putbyte(number, char_pnt) {number of bytes};
                                FOR j := 1 TO number DO BEGIN
                                    char := gci(buffer)
                                    CASE char OF
                                    0or1:   IF i < number THEN BEGIN
                                                put_byte(char, char_pnt);
                                                char := gci(buffer);
                                                put_byte(char, char_pnt);
                                            END
                                            ELSE BEGIN
                                                {no room for a character
                                                    pair...return & quit}
                                                wcd(char, buffer);
                                                number := char_pnt - here - 1;
                                                put_byte(number, here);
                                                GOTO rmpdone;
                                            END;

                                    2:      BEGIN {gobbler}
                                                n := char_pnt - here - 1;
                                                IF n > 0 THEN BEGIN
                                                    {delete chars which
                                                        preceeded gobbler}
                                                    number := number - n;
                                                    char_pnt := here;
                                                    put_byte(number, char_pnt);
                                                END;
                                            END;

                                    3:      BEGIN {zapper}
                                                IF number > 1 THEN BEGIN
                                                    {delete chars which
                                                        preceeded zapper}
                                                    number := 1;
                                                    char_pnt := here;
                                                    put_byte(number, char_pnt);
                                                END;
                                                put_char(char, char_pnt);
                                                ptable[line, channel] := -1;
                                                empty(buffer);
                                                bf[buffer] := 0;
                                                GOTO rmlrdone;
                                            END;
                                    other:  put_char(char, char_pnt);
                                    END { CASE char } ;
                                END {FOR};
            rmlrdone:       fill := fill - number {log. rec. done};

                                           22                           TYMNET-I
        NETWORK SYNC LINE PROTOCOL                             November 12, 1981


                            IF fill <3 THEN GOTO rmdone ELSE GOTO rmake2;
                            END {logical records};

                        END {search for active channels};
                        {we've scanned around round-robin (indicated by cfob...
                            reset this, and check}
                        x := 0;
                        FOR i := 1 TO group[line] DO BEGIN
                            pcfob[line, i] := -1;
                            xx := bpsf[line, i] OR expedite[line, i]
                            x := xx AND cfob[line, i] OR x;
                        END;
                        IF x <> 0 THEN GOTO rmake2;

        rmdone:         size := char_pnt - start {here to finish off a packet};
                        IF size > 0 THEN BEGIN {make header, etc}
                            header := bori[line] XOR x'4000';
                            size := (size + 3) / 2;
                            {insert size, "rec" into header}
                            osec[line, sec, 1] := header;
                            {compute checksums}
                            long := 0;
                            diag := 0;
                            FOR i := 1 TO size DO BEGIN
                                long := osec[line, sec, i] XOR long;
                                diag := left_rotate(diag);
                                diag := osec[line, sec, i] XOR diag;
                            END;
                            osec[line, sec, size+1] := long;
                            osec[line, sec, size+2] := diag;
                            caos[line] := caos[line] + 1;
                            cos[line] := cos[line] + 1;
                            osf[line, sec] := TRUE;
                        END;
                    END;
        rmend:  END;


















                                           23                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981






                              5 - SUPERVISOR COMMUNICATION


             The supervisor communicates  with each node using  special messages
        which are sent over channel zero of each inter-node line.   Although the
        communication path for these messages uses the inter-node  link protocol
        for transfer between nodes, it is not a circuit in the usual sense.  The
        communication paths from the supervisor to all the nodes in  the network
        form a tree with the currently active supervisor at its root.  Thus each
        node  has one  UPSTREAM line,  which  is used  to send  messages  to the
        supervisor, and may have any number of DOWNSTREAM lines, to  lower nodes
        in the tree.  The exact  structure of the network tree is  determined at
        takeover time.

             Supervisory messages are used  to communicate with a node  not only
        directly,  but  also  indirectly  by  reading  and   modifying  specific
        locations in the  node's memory.  To do  this, a portion of  each node's
        memory  is set  aside  as a  special supervisor's  area,  which contains
        certain  parameters,  switches, and  pointers  at  pre-defined locations
        within the area (see Section 5.5).






                               5.1  SUPERVISORY MESSAGES


             Each supervisory message has a fixed length of three  16-bit words,
        named SR1,  SR2, and SR3.   These messages are  sent on  logical channel
        zero, possibly with  data from other  channels (see Section  4.2).  More
        than one message  may be grouped into  a logical record, but  no message
        can be split across a  record boundary.  The first word of  each message
        (SR1) has the same format for all supervisory messages, but  the formats
        of SR2 and SR3 are dependent on the message type:

                       SR1 = UTTTNNNNNNNNNNNN
                             where U = direction indicator:
                                          0 = downstream message
                                          1 = upstream message
                                   T = message type
                                   N = source/destination node number

             Note in the  above diagram, and others  like it in this  section of
        the manual, that the 16 bits of SR1, SR2, or SR3 are represented.  A "0"
        or "1" in a  position indicates a fixed  value and a letter  indicates a
        variable value described below the diagram.


                                           24                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             If an upstream bound  message (SR1 high bit  = 1) is received  by a
        node from one of its downstream lines, then the message is simply passed
        on  to the  node's  upstream line.   If  a downstream  bound  message is
        received from  the upstream line,  however, the destination  node number
        must be checked, and if it is this node's number, the message processed.
        If the message is not destined for this node, then it must be  passed to
        one  of  the downstream  lines.   The line  number  to  which downstream
        messages are passed  is stored in a  switch in the supervisor's  area of
        the node's memory and is under the control of the supervisor.






                             5.2  NETWORK-INTERNAL MESSAGES






                    5.2.0  Type 0 - UNTAKER

             This message  is broadcast (on  all lines,  with downstream-message
        indicator) by  a node when  that node EITHER  detects that  the upstream
        line (toward  the Supervisor) has  gone out of  service, OR  receives an
        untaker message from it's upstream line, OR if the node is taken over by
        the Supervisor.  If received from any line other than the  true upstream
        line, it is ignored, and discarded (including the case where there is no
        upstream line).  If there is no upstream line, it unconditionally is NOT
        generated.   It's  purpose  is to  inform  all  nodes--downstream  of an
        outage--that there is no longer a path to the supervisor.

             At the time  a node broadcasts untakers,  it should also  flush all
        incoming supervisor buffers, as well as the outgoing upstream supervisor
        buffer, and hang up all circuits in logon state.

                       SR2 = 0010010010111111
                       SR3 = 0000NNNNNNNNNNNN
                             where N is the number of the node which detected
                                   the outage.












                                           25                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                           5.3  MESSAGES FROM THE SUPERVISOR


             ALL  other   messages  proceeding   downstream  originate   at  the
        supervisor.





                    5.3.0  Type 0 - TAKEOVER

             This  message is  sent when  a new  supervisor is  taking  over the
        network.  When received, the node  should send this message back  to the
        old supervisor  if there was  one, change its  upstream line  pointer to
        point to  the line  over which this  message came,  and send  a TAKEOVER
        RESPONSE message (Type 0) to the new supervisor.

                       SR2 = 0101101101SSSSSS
                             where S = supervisor number
                       SR3 = 000000000000000N
                             where N is set if the supervisor can accept the
                                   "New" types 4 and 6 supervisor
                                   messages.





                    5.3.1  Type 1 - PUT CHARACTERS IN BUFFER

             This message is sent to "sneak" characters from the supervisor into
        a circuit.  It  is used to  send text messages  and login data  from the
        supervisor to a  host or terminal.  When  this message is  received, the
        node should  simply put  the two  characters contained  in SR3  into the
        buffer whose number is specified in SR2.

                       SR2 = buffer number
                       SR3 = FFFFFFFFSSSSSSSS
                             where F = first character
                                   S = second character





                    5.3.2  Type 2 - CHANGE PERMUTER TABLE ENTRY

             This message is sent to every node that is part of a  circuit being
        built.  When received,  the node should put  the value contained  in SR3
        into the permuter table entry specified by SR2.  If the table  entry was
        previously in  use, the  previous circuit should  be zapped.   The value


                                           26                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


        placed in the permuter table consists of both a circuit-speed code and a
        buffer number.   The circuit-speed  code is used  for flow  control (see
        Section 4.4).

                       SR2 = QLLLLL00CCCCCCCC
                             where Q = 1 if requester declared IIX (and if
                                   dest. is H-IQ)
                                   L = line number (L > 16d invalid)
                                          (L = 16d ==> internal circuit)
                                   C = channel number (C > 255d invalid)
                       SR3 = GG00BBBBBBBBBBBB
                             where G = circuit-speed code:
                                          0 = low-speed
                                          1 = medium-speed
                                          2 = high-speed
                                          3 = very-high-speed
                                   B = buffer number





                    5.3.3  Type 3 - CHANGE MEMORY or MISCELLANEOUS

             This message has several uses.  If the high-order bit of SR2  is 0,
        then the remainder of SR2  contains a memory address to be  modified and
        SR3 contains the  new value that should  be stored there.  This  is used
        primarily to modify locations in the supervisor's area of memory.

                       SR2 = 0AAAAAAAAAAAAAAA
                             where A = address to change
                       SR3 = new value

             If the high-order  bit of SR2 is  1, however, then the  low-order 6
        bits of SR2 contain a  sub-type code for this message.   Valid sub-types
        are as follows:


             Subtype 0 - LOGIN CHARACTER RESPONSE

             Sent as a response to each LOGIN CHARACTER message terminator (Type
        1 or Type 4) that is sent to the supervisor during a normal login.

             SR3 contains the current status of the login for the specified port
        number.   The status  also indicates  which "canned"  message  should be
        typed, if  any; whether to  echo the next  login character  entered; and
        whether to clear the input or output buffer for this login.

                       SR2 = 1XXXXXXXXX000000
                             where X is extended message field
                       SR3 = IEQ00PPPPPPPPMMM
                             where I = empty input buffer indicator
                                   E = echo on indicator

                                           27                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                                   Q = empty output buffer indicator
                                   P = port number
                                   M = message number:
                                          0 = (no message)
                                          1 = "PLEASE LOG IN"
                                          2 = "ERROR, TYPE USERNAME"
                                          3 = "ERROR, TYPE PASSWORD"
                                          4 = "USERNAME"
                                          5 = "PASSWORD"
                                          6 = unused
                                          7 = extended-message flag
                                            then, from XXXXXXXX field:
                                           10 = "PLEASE SEE YOUR REP..."
                                           11 = "BAD MUD"
                                           12 = "CIRCUITS BUSY"
                                           13 = "HOST NOT AVAIL..."
                                           14 = "HOST OUT OF PORTS"
                                           15 = "HOST DOWN"
                                           16 = "HOST SHUT"
                                           17 = "TRY AGAIN IN 2 MINUTES"
                                           20 = "ACCESS NOT PERMITTED"
                                           21 = "NO HOST SPECIFIED"
                                           22 = "BAD HOST NUMBER"
                                           23 = "MUD ERROR"


             Subtype 1 - PERMANENT HANG QUERY

             Sent when the supervisor wants the node to report all ports  in the
        permanent-hung state.

                       SR2 = 1000000000000001
                       SR3 = 0000000000000000


             Subtype 2 - PERMANENT HANG DISABLE

             Sent when the supervisor wants  the node to remove a port  from the
        permanent-hung state.

                       SR2 = 1000000000000010
                       SR3 = Port number


             Subtype 3 - PERMANENT HANG ENABLE

             Sent when the  supervisor wants the node  to place a port  into the
        permanent-hung state.

                       SR2 = 1000000000000011
                       SR3 = Port number



                                           28                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Subtype 4 - CLEAR BUFFER

             Sent when  the supervisor wants  the node to  clear a  buffer.  The
        node  should   simply  put  a   "character  gobbler"  (see   Section  7)
        into the buffer whose number is specified in SR3.

                       SR2 = 1000000000000100
                       SR3 = buffer number


             Subtype 5 - ZAP CIRCUIT

             Sent when the supervisor wants the node to zap a circuit.  The node
        should  put  a  "circuit  zapper"  (see  Section  7)  into   the  buffer
        whose number is specified in SR3.

                       SR2 = 1000000000000101
                       SR3 = buffer number


             Subtype 10 - HOST REJECTION

             Sent to  inform a  host attempting to  come into  the network  on a
        particular base  that it has  been rejected as  an impostor.   This will
        happen if a host with the same host number exists in the net  but proper
        multi-base protocol has not been observed.

                       SR2 = 100000000001000
                       SR3 = host number


             Subtype 11 - LINEOUT REPORT ACK

             Sent when the supervisor receives a line-out report from  the node.
        The  node need  no longer  report the  line-out until  the  line's state
        changes, or the node is taken over again.

                       SR2 = 100000000001001
                       SR3 = line number


             Subtype 12 - SET CONGESTION TIMEOUT

             Sent to set the supervisor message congestion timer.  This timer is
        used to ensure that  backpressure is not applied to  supervisor messages
        for too long a time.

                       SR2 = 1000000000001010
                       SR3 = time in seconds





                                           29                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Subtype 14 - GO TO BOOTSTRAP

             Sent  to  reload  the  node.  The  node  should  go  to  its reload
        bootstrap program when this message is received.  SR3 contains  the line
        number from which to read data.

                       SR2 = 1000000000001100
                       SR3 = line number


             Subtype 16 - REPORT LINE SPEEDS

             Sent when the supervisor wants to know the speed of all  the inter-
        node  lines connected  to a  node.  The  node should  send a  LINE SPEED
        REPORT message (Type 3, subtype 6) for all of its lines.

                       SR2 = 1000000000001110
                       SR3 = (not used)


             Subtype 17 - DOWNLOAD NEIGHBOR

             Sent to  start downloading  of a neighbor  node.  SR3  contains the
        line and channel  numbers of the pass-thru  circuit which is to  be used
        for downloading.

                       SR2 = 1000000000001111
                       SR3 = LLLLLLCCCCCCCCCC
                             where L = line number
                                   C = channel number





                    5.3.4  Type 4 - READ MEMORY/READ RANGE

             This message is sent when the supervisor wants to read the contents
        of  the node's  memory, primarily  the supervisor's  area.  SR2  and SR3
        contain two addresses to be read.  If the high-order bit of SR2 is zero,
        the node should respond with two MEMORY DATA messages (Type 3,  SR2 high
        bit = 0) containing the values in the specified locations.

                       SR2 = address 1
                       SR3 = address 2

             If the  high-order bit of  SR2 is 1,  this is a  request to  read a
        range  of  memory (as  specified  in takeover  response),  and  then the
        addresses are  memory start- and  end-addresses.  The response  may take
        the form of compression codes, in part.




                                           30                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                       SR2 = 100000o + start address
                       SR3 = end address





                    5.3.5  Type 5 - LOGIN STATUS

             This message is sent only to TYMCOMS to indicate the status of both
        incoming and outgoing  circuit requests.  The  high-order 8 bits  of SR3
        contain   the   sub-type    code.    See   Section   11    for   further
        information on building circuits.


             Subtype 5 - INTERNALLY-INITIATED LOGIN STATUS

             This message  has two forms.   If the high-order  bit of SR2  is 0,
        this message is a response to a node's initial auxiliary circuit request
        and indicates  that the node  may now send  its originating  host number
        followed by its login stream.

                       SR2 = 0HHHHHHHKKKKKKKK
                             where H = host number if a "dual base"
                                   K = key
                       SR3 = 0000010100000000

             If the high-order bit of SR2 is 1, however, this  message indicates
        that the login is terminated.  The low-order 8 bits of SR3  indicate the
        reason for termination, with zero meaning successful completion.

                       SR2 = 10000000KKKKKKKK
                             where K = key
                       SR3 = 00000101EEEEEEEE
                             where E = error code:
                                          0 = no error
                                          1 = format error
                                          2 = bad user name
                                          3 = bad MUD
                                          4 = system unavailable
                                          5 = downline load or
                                              dialout request failure
                                          6 = timeout
                                          7 = access not permitted
                                          8 = out of origination ports
                                          9 = sup will not honor
                                              requests at this time--
                                              try again later






                                           31                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Subtype 9 - EXTERNALLY-INITIATED LOGIN

             This message indicates that a new circuit terminating at  this node
        has been built.  The low-order  8 bits of SR2 give the  destination port
        number.   When  this message  is  received, the  supervisor  has already
        "sneaked" the TID, originating  node and port numbers, and  the username
        into the  port's outgoing buffer  using PUT-CHARS-IN-BFR  messages (Type
        1).

                       SR2 = 00000000PPPPPPPP
                             Where P = port number
                       SR3 = 000010010000000Q
                             where Q = 1 if origination requested IIX, and
                                   destination is IIX capable (H-IQ is set).


             Subtype 10 - INTERNALLY-INITIATED LOGIN

             This  message  indicates   that  an  auxiliary  circuit   has  been
        successfully made.  The low-order 8 bits of SR2 contain the  actual port
        number to which this circuit has been assigned.  This message is sent by
        the supervisor before the login termination message (subtype 5, SR2 high
        bit = 1) if the login was successful.

                       SR2 = H00000AAPPPPPPPP
                             where H = 1 ==> circuit is IIX capable
                                   A = host position
                                   P = port number
                       SR3 = 00001010KKKKKKKK
                             where K = key





                    5.3.6  Type 6 - SUPERVISOR TIME-OF-DAY

             This message is sent only to TYMCOMS as a response to a host coming
        up, or in  response to a time-request.   SR2 and SR3 contain  the 32-bit
        binary time-of-day in seconds since GMT 00:00:00 01-JAN-1974.

                       SR2 = time high word
                       SR3 = time low word











                                           32                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                    5.3.7  Type 7 - INVOICE NUMBER

             This message is sent only to TYMCOMS to transfer the 24-bit invoice
        number  assigned  by the  supervisor  to the  circuit  connected  to the
        specified  port.   The  invoice  number must  be  used  by  the  node in
        transfering  accounting  data  to  the  supervisor  for  this particular
        circuit (see the document TYMNET ACCOUNTING for elaborations).

                       SR2 = PPPPPPPPIIIIIIII
                             where P = port number
                                   I = invoice number high 8 bits
                       SR3 = invoice number low 16 bits










































                                           33                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                          5.4  MESSAGES SENT TO THE SUPERVISOR






                    5.4.0  Type 0 - TAKEOVER RESPONSE

             This message  should be  sent when a  TAKEOVER message  is received
        from the supervisor.  It informs the new supervisor of the configuration
        of this node.

                       SR2 = TTCHHHHHHHLLLLLL
                             where T = node type:
                                          0 = normal TYMSAT,
                                              normal TYMCOM (1 or 2 hosts)
                                          1 = Interdata TYMSAT
                                          2 = super TYMSAT,
                                              super TYMCOM (1,2,3,4 hosts)
                                          3 = Engine TYMSAT
                                   C = 1 if compressed transfers allowed:
                                          then node may originate Type 6
                                           compression;
                                           accept extended type 3 text codes;
                                           accept extended type 4 Range-read
                                            requests;
                                            accept Type 3 Subtype 9
                                            lineout ACK.
                                   H = number of hosts
                                   L = number of lines
                       SR3 = version number of software





                    5.4.1  Type 1 - LOGIN CHARACTER

             This message is used to send one login character to  the supervisor
        when requesting either a normal or auxiliary circuit.  The  entire login
        stream is sent  one character at a  time using several messages  of this
        type  (see   Section  11).    SR2  contains   the  buffer   number  from
        which the character originated.

                       SR2 = buffer no.
                       SR3 = 00000000CCCCCCCC
                             where C = login character






                                           34                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                    5.4.2  Type 2 - REJECT

             This message  should be  sent if a  supervisor message  is received
        which is invalid or cannot be processed for some reason.  SR2 and SR3 of
        this message contain the SR2 and SR1 fields of the erroneous message.

                       SR2 = SR2 of bad message
                       SR3 = SR1 of bad message





                    5.4.3  Type 3 - MEMORY DATA or REPORTS

             This message has several uses.  If the high-order bit of SR2  is 0,
        then the remainder of SR2 contains a memory address and SR3 contains the
        value currently stored at that  address.  This is sent in response  to a
        READ MEMORY message (Type 4) from the supervisor.

                       SR2 = 0AAAAAAAAAAAAAAA
                             where A = memory address
                       SR3 = value at address

             If the high-order bit  of SR2 is 1,  then this is a  REPORT message
        and the 6 low-order  bits of SR2 contain  a code indicating the  type of
        report.  Reports are used to inform the supervisor of various conditions
        detected by each node.  Report numbers 0, 1, 2, 4, 5, 6, and 7  are used
        directly by the supervisor to  keep track of the available  resources in
        the  network, but  the  other reports  are  simply passed  to  a logging
        program which  stores the information  for debugging and  maintenance of
        the network.


             Report 0 - CIRCUIT ZAPPED

             This report  is sent  only by  TYMCOMS when  a "circuit  zapper" is
        received from a  host port.  SR3 contains  the buffer number  from which
        the zapper came (2 * port number).

                       SR2 = 1000000000000000
                       SR3 = buffer no.


             Report 1 - PERMUTER TABLE CHANGE ACKNOWLEDGMENT

             This report is sent in response to a PERMUTER TABLE  CHANGE message
        (Type 2).   It contains  in SR3 the  value to  which the  permuter table
        entry was changed (SR3 of the original message).

                       SR2 = 1000000000000001
                       SR3 = value just stored


                                           35                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Report 2 - HOST UP/DOWN

             This  report  is sent  by  a TYMCOM  when  a host  to  which  it is
        connected  changes  its  up/down  state.   The  high-order  bit  of  SR3
        indicates the new status of  the host.  SR3 also contains the  host port
        array number (0, 1, 2, or 3) and the host number.  If the host  has just
        come up, SR2 contains the number of host ports available, in addition to
        the  report  code.   See  Section  9.2  for  more  information  on  host
        states.

                       SR2 = 1PPPPPPPPP000010
                             where P = number of host ports (if up)
                       SR3 = U0AAHHHHHHHHHHHH
                             where U = new status of host:
                                          0 = host just came up
                                          1 = host just went down
                                   A = host port array number
                                   H = host number


             Report 3 - BUFFER ZAPPED

             This report  is sent  when a  buffer had  to be  "zapped" (emptied)
        because of a lack of space.  SR2 contains the size of the  zapped buffer
        (divided by 8) and SR3 contains its buffer number.

                       SR2 = 1SSSSSSSSS000011
                             where S = size of zapped buffer / 8
                       SR3 = buffer number


             Report 4 - LINE RESET

             This report is sent when  a RESET message is received on  an inter-
        node  line  (see  Section  4.1).  SR3  contains  the  line  number.  SR2
        contains a code indicating the speed of the reset line.

                       SR2 = 1000000SSS000100
                             where S = line speed code:
                                          1 = 2400 baud
                                          2 = 4800 baud
                                          3 = 7200 baud
                                          4 = 9600 (or 19200) baud
                                          5 = memory shuffler
                                          6 = 56000 baud
                       SR3 = 0000000000LLLLLL
                             where L = line number


             Report 5 - LINE OUT

             This report is sent when  a network line has been determined  to be


                                           36                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


        non-functional.  SR3 indicates the  line number and SR2 contains  a code
        indicating the type of problem.

                       SR2 = 1CCCCCCCCC000101
                             where C = problem code:
                                          1 = no input interrupts
                                          2 = line continuously spacing
                                          3 = line continuously marking
                                          4 = supervisor zapped BORI
                                          5 = no good records received
                                          6 = no output interrupts
                       SR3 = 0000000000LLLLLL
                             where L = line number


             Report 6 - LINE ERRORS or LINE SPEED

             This report has two forms, distinguished by the value in  the high-
        order 10  bits of SR3.   In one form,  it is sent  to indicate  that the
        number of records with checksum errors received over an  inter-node line
        in the past  256 seconds has exceeded  a certain threshold  value.  This
        value is assembled  into the node software.   The high-order 10  bits of
        SR3 contain the number of such errors and the low-order bits contain the
        line number.

                       SR2 = 1000000000000110
                       SR3 = EEEEEEEEEELLLLLL
                             where E = error count (non-zero)
                                   L = line number

             In the other form, this report  is sent to indicate the speed  of a
        line.  It is typically sent in response to a LINE SPEED  REQUEST message
        (Type  3,  subtype  14)  from  the  supervisor.   SR2  contains  a  code
        indicating the line speed and SR3 contains the line number.

                       SR2 = 1s00000SSS000110
                             where s = 1 if window_size_8 line;
                             and S = line speed code:
                                          0 = speed unknown
                                          1 = 2400 baud
                                          2 = 4800 baud
                                          3 = 7200 baud
                                          4 = 9600 (or 19200) baud
                       SR3 = 0000000000LLLLLL
                             where L = line number


             Report 7 - LINE OVERLOAD or SUPERVISOR CONGESTION

             This report has two forms,  distinguished by the value in  the low-
        order 6  bits of  SR3.  In  one form, it  is sent  to indicate  that the
        number of times that an  inter-node line has been overloaded  (unable to


                                           37                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


        send flow-control information every half-second) in the past  64 seconds
        has exceeded a  certain threshold value.   This value is  assembled into
        the node software.  The high-order 10 bits of SR3 contain the  number of
        such occurrences and the low-order bits contain the line number.

                       SR2 = 1000000000000111
                       SR3 = VVVVVVVVVVLLLLLL
                             where L = line number
                                   V = line overload counter

             In  the  other form,  this  report  is sent  to  indicate  that the
        supervisor  message congestion  timer has  timed out  for  an inter-node
        line.  When this occurs, the supervisor message buffer for that  line is
        zapped and this report is sent. SR2 contains the zapped line number.

                       SR2 = 1LLLLLLLLL000111
                             where L = line number
                       SR3 = 0000000000111111


             Report 10 - HOST UNHAPPY

             the hosts connected to the TYMCOM.  SR2 contains the number  of the
        unhappy host  and SR3 contains  the "host sad"  bits, which are  used to
        indicate the reason for the unhappiness.

                       SR2 = 1HHHHHHHHH001000
                             where H = host number
                       SR3 = host sad bits


             Report 11 - BAD ACKNOWLEDGEMENT

             This  report  is sent  when  an invalid  record  acknowledgement is
        received on an  inter-node line.  SR3 contains  the line number  and the
        number of times this has happened in the past 256 seconds.

                       SR2 = 1000000000001001
                       SR3 = CCCCCCCCCCLLLLLL
                             where C = occurrence counter
                                   L = line number


             Report 12 - TEMPERATURE REPORT

             This report requires  that special temperature-sensing  hardware be
        attached to  the node.   The report is  sent every  256 seconds  when an
        abnormal  temperature  is  detected.  SR3  contains  the  temperature as
        encoded by the hardware.

                       SR2 = 1000000000001010
                       SR3 = temperature


                                           38                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Report 13 - NODE MESSAGE 1

             Report format not known.


             Report 14 - NODE MESSAGE 2

             Report format not known.


             Report 15 - NODE MESSAGE 3

             Report format not known.


             Report 16 - TYMCOM TRACE

             When trace mode is enabled in a bisync or async TYMCOM, this report
        is  sent  for  each  character received  or  transmitted  over  the host
        interface lines.  SR2 contains  an indication of the time  the character
        was  received  or  transmitted  and  SR3  contains  the  trace  value (a
        direction indicator and a character).

                       SR2 = 1TTTTTTTTT001110
                             where T = time tag
                       SR3 = trace value


             Report 17 - SOFT SBOD CRASH IN TYMCOM

             Report format not known.


             Report 20 - CHECKSUM ERROR

             This report is sent when a memory checksum error is  detected.  The
        memory  checksum  is  used  to  ensure  that  none  of   the  procedural
        instructions (the pure code) in the node have been modified.  The report
        is  actually  sent  as two  separate  report  messages,  one immediately
        following the other and distinguished by the second highest order bit of
        SR2.  The  first part  contains the  high-order 8  bits of  the checksum
        difference  in SR2  and  the starting  address  of the  block  of memory
        containing the error in SR3.

                       SR2 = 10CCCCCCCC010000
                             where C = high 8 bits of checksum difference
                       SR3 = block start address

             The  second part  contains  the low-order  8 bits  of  the checksum
        difference in  SR2 and the  ending address of  the block  containing the
        error in SR3.



                                           39                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                       SR2 = 11CCCCCCCC010000
                             where C = low 8 bits of checksum difference
                       SR3 = block end address


             Report 21 - LOOPBACK

             This report  is sent  when a node  receives a  RESET message  on an
        inter-node line  that contains the  node's own machine  number, probably
        indicating that  the line is  in loopback mode.   SR3 contains  the line
        number  and  the number  of  times this  has  occurred in  the  past 256
        seconds.

                       SR2 = 1000000000010001
                       SR3 = CCCCCCCCCCLLLLLL
                             where C = occurrence count
                                   L = line number


             Report 22 - TYMCOM CONSTIPATED

             Report format not known.


             Report 23 - NODE OVERLOADED

             This report is sent when a node becomes overloaded (it is  not able
        to execute certain processes as  often as it should).  SR3  contains the
        number of times this has happened in the past 256 seconds.

                       SR2 = 1000000000010011
                       SR3 = occurrence count


             Report 24 - LINE SNIPPED

             This report is sent when  an invalid logical record is  received on
        an inter-node line.  When this  occurs, all circuits using the  line are
        zapped and the line is returned to the idle state.  SR2 contains  a code
        indicating the type of error and SR3 contains the line number.

                       SR2 = 1000000EEE010100
                             where E = error code:
                                          0 = logical record length was zero
                                          1 = invalid length for channel 0
                                              (supervisory messages)
                                          2 = invalid length for channel 1
                                              (flow control)
                                          3 = character pair was split
                                          4 = channel number out of range
                       SR3 = 0000000000LLLLLL
                             where L = line number


                                           40                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Report 25 - TYMCOM SYNC LINE RETRANSMISSIONS

             This  report is  sent when  the number  of records  that had  to be
        retransmitted over a bisync host interface line by a TYMCOM in  the past
        256 seconds exceeds a certain threshold value.  This threshold  value is
        assembled into the node software.  SR2 contains the host number to which
        the records had to be retransmitted and SR3 contains both the  number of
        such records and the line number.

                       SR2 = 1HHHHHHHHH010101
                             where H = host number
                       SR3 = 000CCCCCCCCCCLLL
                             where C = occurrence count
                                   L = line number


             Report 26 - CRASH

             This  report  is  sent  when  the  node  detects  a   condition  so
        catastrophic that  it must  restart itself.  This  would occur  for such
        hardware  failures  as  power  failure,  parity  error,   or  unexpected
        interrupt,  and  for various  software  failures.  SR2  contains  a code
        indicating the type  of crash and SR3  contains the location  from which
        the crash  subroutine was called,  to aid in  debugging.  Note  that the
        list of crash codes below includes values which may not be applicable to
        all implementations.

                       SR2 = 100000EEEE010110
                             where E = crash code (octal):
                                           0 = power failure
                                           1 = manual restart
                                           2 = SBOD crash
                                           3 = GCI crash
                                           4 = WCD crash
                                           5 = WCI crash
                                           6 = GCOL crash
                                           7 = SPEED crash
                                          10 = bad crash type
                                          11 = WCH crash
                                          12 = WWI crash
                                          13 = EMPTY crash
                                          14 = parity error
                                          15 = unexpected interrupt
                                          75 = Sync overrun; Engine remote code
                       SR3 = crash location


             Report 27 - TYMCOM SYNC LINE ERRORS

             This report is sent when the number of records  containing checksum
        errors  received over  a  bisync host  interface  line in  the  past 256
        seconds  exceeds a  certain threshold  value.  This  threshold  value is


                                           41                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


        assembled into  the node  software.  SR2 contains  the host  number from
        which the records were received and SR3 contains both the number of such
        records and the line number.

                       SR2 = 1HHHHHHHHH010111
                             where H = host number
                       SR3 = 000CCCCCCCCCCLLL
                             where C = occurrence count
                                   L = line number


             Report 30 - TYMCOM SYNC LINE OUT

             This  report is  sent  when a  bisync host  interface  line changes
        status.  SR2 contains  the host number and  SR3 contains the  new status
        and the line number.

                       SR2 = 1HHHHHHHHH011000
                             where H = host number
                       SR3 = S000000000000LLL
                             where S = new status:
                                          0 = up
                                          1 = down
                                   L = line number


             Report 31 - RETRANSMISSIONS RECEIVED

             This  report  is  sent when  the  number  of  retransmitted records
        received on an  inter-node line in the  past 256 seconds has  exceeded a
        certain  threshold  value.   This  value  is  assembled  into  the  node
        software.  The  high-order 10  bits of  SR3 contain  the number  of such
        retransmitted records and the low-order bits contain the line number.

                       SR2 = 1000000000011001
                       SR3 = CCCCCCCCCCLLLLLL
                             where C = occurrence count
                                   L = line number


             Report 32 - RETRANSMISSIONS SENT

             This  report is  sent when  the number  of records  that had  to be
        retransmitted on an  inter-node line in the  past 256 seconds  exceeds a
        certain threshold  value.  This  threshold value  is assembled  into the
        node software.  The high-order 10 bits of SR3 contain the number of such
        records and the low-order bits contain the line number.

                       SR2 = 1000000000011010
                       SR3 = CCCCCCCCCCLLLLLL
                             where C = occurrence count
                                   L = line number


                                           42                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Report 33 - BACK-TALK

             This report  is sent  when a node  receives its  own records  on an
        inter-node line.  The  high-order 10 bits of  SR3 contain the  number of
        such records  received in the  past 256 seconds  and the  low-order bits
        contain the line number.

                       SR2 = 1000000000011011
                       SR3 = CCCCCCCCCCLLLLLL
                             where C = occurrence count
                                   L = line number


             Report 34 - BAD BOOTSTRAP CHECKSUM

             This report is sent in response to a GO TO BOOTSTRAP  message (Type
        3, subtype  12) if the  checksum for the  bootstrap program  is invalid,
        indicating that it may have been destroyed.

                       SR2 = 1000000000011100
                       SR3 = (not used)


             Report 35 - DOWNLOAD ACKNOWLEDGEMENT

             This  report is  sent in  response to  a DOWNLOAD  NEIGHBOR message
        (Type 3, subtype 15) when the node is ready to start downloading.

                       SR2 = 1000000000011101
                       SR3 = (not used)


             Report 36 - SUPERVISOR CLOCK REPORT

                       SR2 = 100000XX00011110
                             where XX is code:
                                   00 no good WWVC readings diring last 48
                                          hours;
                                   01 clock has been adjusted;
                                   10 discrepancy between WWVB and clock is

                                          greater than 2000 seconds - no
                                          adjustment
                                          attempted.
                       SR3 = (adjustment)
                             adjustment to clock applies to XX = 01


             Report 37/77 - DEAD-END AUTO-DETECT

             A report will be  sent by the node  when it detects that  a circuit
        passes no data after some interval of existence (incomplete  circuit, or


                                           43                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


        Dead End).   This interval is  nominally 60 seconds.   A report  will be
        sent  for both  sides of  a passthrough  circuit.  (NOTE:   This  may be
        confused with ISIS Slot Diagnostic 77--the distinction is that this will
        issue from  nodes numbered 1000  and higher, while  ISIS nodes  are less
        than 1000.)

                       SR2 = 1XXXXXXXXXX11111
                       SR3 = LLLLLLCCCCCCCCCC
                             where X is the buffer number
                                   L = Line number
                                   C = Channel number


             Report 40 - NEW LINE-ERROR REPORT

             This report is sent when the number of errors detected on an inter-
        node  line in  the past  interval (nominally  256 seconds)  has exceeded
        1/64th of the total number of packets detected.

                       SR2 = 1PPPPPPPPP100000
                       SR3 = OOOOOOOOOOOOLLLL
                             where P = number of packets/64
                                   O = occurrences/8 (of errors)
                                   L = line number


             Report 41 - NEW LINE-RETRANSMISSION-SENT REPORT

             This report is sent when  the number of retransmissions sent  on an
        inter-node  line  in  the  past  interval  (nominally  256  seconds) has
        exceeded 1/8th of the total number of packets sent.

                       SR2 = 1PPPPPPPPP100001
                       SR3 = OOOOOOOOOOOOLLLL
                             where P = number of packets/64
                                   O = occurrences/8 (of retransmissions sent)
                                   L = line number


             Report 42 - NEW LINE-RETRANSMISSION-DETECTED REPORT

             This report is sent when the number of retransmissions  detected on
        an  inter-node line  in the  past interval  (nominally 256  seconds) has
        exceeded 1/8 of the total number of packets detected.

                       SR2 = 1PPPPPPPPP100010
                       SR3 = OOOOOOOOOOOOLLLL
                             where P = number of packets/64
                                   O = occurrences/8 (of retransmissions)
                                   L = Line number




                                           44                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Report 43 - LEP 2 CHANNEL IN USE

             If  a LEP  2  message (permuter  table  change) is  received  for a
        channel which is already in use, a report is sent to the supervisor:

                       SR2 = 1BBBBBBBBB100011
                       SR3 = LLLLLLCCCCCCCCCC
                             where B = previous buffer no. (may overflow)
                                   L = Line number
                                   C = Channel number


             Reports 70-77 - ISIS SLOT DIAGNOSTIC

             This  report  originates  within ISIS  slots,  and  reports various
        internal  conditions.   These  conditions  are  different  for different
        applications, and must therefore be interpreted in light of this.

                       SR2 = 10XXXXXXXX111SSS
                       SR3 = YYYYYYYYZZZZZZZZ
                             where S = Slot Number (7 is ISIS system)
                                   X = HW2 (low)
                                   Y = HW3 (low 8 bits)
                                   Z = HW4 (low 8 bits)





                    5.4.4  Type 4 - LOGIN CHARACTER PAIR

             This message is used to send two login characters to the supervisor
        when requesting either a normal or auxiliary circuit.  The  entire login
        stream is sent two characters (whenever possible -- otherwise type  1 is
        used)  at  a time  using  several  messages of  this  type  (see Section
        11).   SR2  contains  the   buffer  number  from  which   the  character
        originated.

             The character codes  which cause exception  to use of  this message
        type are: carriage-return, semi-colon, and escape (ASCII character codes
        033o  -  037o,  and  173o  - 176o).   The  appearance  of  any  of these
        characters in the logon stream  is cause to flush the  characters toward
        the Supervisor; using a Type 4 if possible, else a Type 1 if there is no
        preceding character available to form a pair.

                       SR2 = buffer no.
                       SR3 = FFFFFFFFSSSSSSSS
                             where F = first login character
                             where S = second login character





                                           45                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                    5.4.5  Type 5 - MISCELLANEOUS

             This  message has  multiple  uses.  The  8 high-order  bits  of SR3
        contain a sub-type code.


             Subtype 1 - PORT HANG

             This report is sent if the node has detected a  malfunctioning port
        (e.g. sending an excessive number of login characters), and the port has
        been hung.

                       SR2 = 00000000PPPPPPPP
                             where P = port number
                       SR3 = 0000000100000000


             Subtype 2 - PERMANENT PORT HANG

             This  message  is  sent when  the  node  has put  the  port  in the
        permanently-hung state, normally as a result of a Supe Type  3/subtype 3
        message.

                       SR2 = 00000000PPPPPPPP
                             where P = port number
                       SR3 = 0000001000000000


             Subtype 3 - PERMANENT HANG QUERY RESPONSE

             This message  is sent  in response to  a supervisor  permanent port
        hang  query (only  sent to  'smart'  nodes).  If  X=0, then  the  port  
        provided in SR2  has been permanently hung.   If X=1, then the  entry in
        SR2 is ignored and the message indicates all responses to the query have
        been sent.

                       SR2 = 00000000PPPPPPPP
                             where P = port number
                       SR3 = 000000110000000X
                             where X = Termination flag


             Subtype 4 - AUXILIARY ORIGINATING HOST NO.

             This message is sent in response to a type 5 subtype 5 message from
        the Supe, to identify the  originating host number.  SR2 contains  a KEY
        to   identify    this   request.    See    Section   11    for   further
        information on building circuits.

                       SR2 = XHHHHHHHHHHHHHHH
                             where X = 1 ==> IIX desired
                                   H = Originating Host No.
                       SR3 = 00000100KKKKKKKK

                                           46                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                             where K = key


             Subtype 5 - AUXILIARY CIRCUIT REQUEST

             This  message  is  sent  to  request  the  supervisor  to  build an
        auxiliary circuit.  SR2  contains a KEY  to identify this  request.  See
        Section 11 for further information on building circuits.

                       SR2 = 00000000KKKKKKKK
                             where K = key
                       SR3 = 0000010100000000


             Subtype 6 - HOST STATUS CHANGE

             This  message is  sent  by a  TYMCOM when  a  host to  which  it is
        connected changes its answered/shut state.  The low-order 8 bits  of SR3
        indicate the new status of the host.  SR2 contains the host number.  See
        Section 9.2 for more information on host states.

                       SR2 = host number
                       SR3 = 00000110SSSSSSSS
                             where S = new status of host:
                                          zero     = host shut
                                          non-zero = host answered





                    5.4.6  Type 6 - MISCELLANEOUS

             This message has  several forms.  If the  high-order bit of  SR2 is
        zero, it  is used  to transmit  permuter-table compression  at takeover.
        When a series of sequential  addresses contain a value of minus  one (an
        empty permuter  table entry),  the node  will send  the start-  and end-
        addresses of the  range.  Note that the  high-order bits of SR2  and SR3
        will ALWAYS be zero:

                       SR2 = range start address
                       SR3 = range end address

             Alternate forms may  be sent by  TYMCOMS to set  various parameters
        used by multiple-TYMCOM hosts and other special configurations.

             If the high-order  bit of SR2 is  1, however, then the  low-order 6
        bits of SR2 contain a sub-type code for this message.  SR3  contains the
        host port array number (0, 1, 2, or 3) in the high-order 2 bits  and the
        host number in the remaining 14 bits.  Valid sub-types are as follows:




                                           47                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Subtype 0 - REPORT KEY

             This message  is sent  by TYMCOMS that  are connected  to multiple-
        TYMCOM hosts.  It  is sent in response  to a LINE SPEED  REQUEST message
        (Type 3, subtype  14), in addition to  the usual response,  and whenever
        the host comes up.  SR2 contains  a KEY, which is supplied by  the host,
        that confirms the host number connected to the TYMCOM.

                       SR2 = 1KKKKKKKKK000000
                             where K = key
                       SR3 = AAHHHHHHHHHHHHHH
                             where A = host port array number
                                   H = host number


             Subtype 1 - REPORT COST

             This message is sent to change the "cost" used by the supervisor in
        determining to which  of several hosts a  circuit should be  built.  SR2
        contains the new cost.

                       SR2 = 1CCCCCCCCC000001
                             where C = cost
                       SR3 = AAHHHHHHHHHHHHHH
                             where A = host port array number
                                   H = host number


             Subtype 2 - SET OUT-OF-PORTS

             This message is  sent to instruct the  supervisor to allow  no more
        circuits to be  built to a specific  host.  Circuits currently  built to
        the host are not affected.

                       SR2 = 1000000000000010
                       SR3 = AAHHHHHHHHHHHHHH
                             where A = host port array number
                                   H = host number


             Subtype 3 - CLEAR OUT-OF-PORTS

             This message is sent  to instruct the supervisor to  allow circuits
        to be built to a  specific host again after a SET  OUT-OF-PORTS (message
        type 6, subtype 2).

                       SR2 = 1000000000000011
                       SR3 = AAHHHHHHHHHHHHHH
                             where A = host port array number
                                   H = host number




                                           48                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Subtype 4 - REQUEST GMT TIME

             This message is  sent to request the  supervisor to send  this node
        the current GMT time (message type 6, from SUP).

                       SR2 = 1000000000000100
                       SR3 = 0000000000000000


             Subtype 5 - DECLARE H-IQ and TYPE

             This message is  sent by hosts which  wish to be available  for IIX
        circuit terminations.  The message specifies both a host type and a host
        IQ (H-IQ).  A host which declares itself as smart (has a "high" IQ) will
        be  considered  available  for  IIX conversations  if  it  is  a circuit
        destination.

                       SR2 = 1QTTTTTTTT000101
                             where Q = 1 ==> the host has a high IQ
                                   T = Host Type Identifier (HID)
                       SR3 = AAHHHHHHHHHHHHHH
                             where A = host port array number
                                   H = host number


             Subtype 6 - ORIGINATING HOST NUMBER (Normal Circuit)

             This message is  sent to the  supervisor for normal  circuits which
        originate at a host.  The message is sent after the TID but before a C/R
        or ";".

                       SR2 = 1BBBBBBBBB000110
                             where B = Buffer Number
                       SR3 = X0HHHHHHHHHHHHHH
                             where X = 1 ==> IIX not desired
                                   H = host number





                    5.4.7  Type 7 - ACCOUNTING

             This message  is sent  by TYMCOMS  to pass  accounting data  to the
        supervisor.  Accounting codes 7  through 15 may be sent  as appropriate.
        Input and output  character counts should  be sent every  15-20 minutes,
        and when a session terminates.  The high-order 4 bits of SR2 contain the
        accounting code,  and the remainder  of SR2 and  all of SR3  contain the
        data appropriate for that code.  See the TYMNET ACCOUNTING  document for
        further information on accounting data formats.




                                           49                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


                       SR2 = CCCCDDDDDDDDDDDD
                             where C = accounting code
                                   D = high 12 bits of data
                       SR3 = low 16 bits of data






                            5.5  SUPERVISOR'S AREA OF MEMORY


             For  communication  in  ways   that  do  not  require   the  active
        participation of a node, the supervisor uses CHANGE MEMORY (Type  3, SR2
        high bit =  0) and READ  MEMORY (Type 4) messages  to modify and  read a
        special portion of the node's memory, called the supervisor's area.

             Originally  this area  was  fixed in  low  memory of  a  Varian 620
        computer, and the "addresses" used to refer to items in the area reflect
        this historical basis.  Thus, each "address" points to a 16-bit quantity
        and ranges from 4 to  about 512 (decimal), skipping several  values.  It
        is of course, not necessary that the supervisor's area be located at any
        particular  physical  address (or  even  be contiguous),  only  that the
        "addresses" used in supervisory messages be mapped so that they refer to
        certain functional items.

             Some of  the items  in the  supervisor area  are pointers  to other
        items, thus allowing these other items to be at variable  locations.  In
        addition,  READ and  CHANGE  MEMORY messages  may be  used  for remotely
        debugging a node.  In both of these cases, the "address" may  be outside
        of the supervisor's area.  These addresses must also be mapped properly.

             The following is a  description of those items in  the supervisor's
        area which are the same for all types of nodes:

             Location (octal)  Function

                3              Pointer to location containing the address from
                               which the crash subroutine was last called.
                4              Node descriptor: 000000000PI00000
                                  where P = 1 if no passthrus are to be
                                           assigned to this node
                                        I = 1 if this is an ISIS node
              100              Node number.
              101              Software version number.
              102              Debugger lock; non-zero indicates
                               last address supervisor may change.
              103              Downstream switch; points to buffer
                               for current downstream line.
              104              Number of crashes since loading
                               software (starts at 1).


                                           50                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             For the following  tables of those  items in the  supervisor's area
        which differ according to node type, some terminology should be defined.
        A "host descriptor" consists  of two 16-bit values.  The  first contains
        the host  number in the  low-order 12 bits  and an  answered/shut status
        indicator  in  the  high-order  bit  (0=shut,  1=answered).   The second
        contains the number  of ports if the  host is up and  -1 if the  host is
        down.  The "BORI" is the  value used to start an inter-node  record.  It
        may be modified by the supervisor to prevent a node from  receiving data
        over  a  particular line.   A  "group" contains  sixteen  channels.  The
        supervisor uses  the permuter table  pointer value for  line 0  only and
        assumes that the permuter tables are packed in sequential order.

             Supervisor's area for normal TYMSATS:

             Location (octal)  Function

              110+n            Node number for neighbor on line n.
              113+n            Pointer to permuter table start for line n.
              121+n            Number of groups on line n.
              130+n            BORI for line n.

             Supervisor's area for normal TYMCOMS (1 host):

             Location (octal)  Function

              106-107          Host descriptor.
              115+n            Node number for neighbor on line n.
              122+n            Pointer to permuter table start for line n.
              136+n            Number of groups on line n.
              152+n            BORI for line n.

             Supervisor's area for dual TYMCOMS (2 hosts):

             Location (octal)  Function

              106-107          Host descriptor for host 0.
              110-111          Host descriptor for host 1.
              122+n            Node number for neighbor on line n.
              132+n            Pointer to permuter table start for line n.
              154+n            Number of groups on line n.
              176+n            BORI for line n.

             Supervisor's area for super TYMSATS, Interdata TYMSATS,  and Engine
        TYMSATS:

             Location (octal)  Function

              105+n            BORI for line n.
              125+n            Pointer to permuter table start for line n.
              145+n            Number of groups on line n.
              165+n            Node number for neighbor on line n.

             Supervisor's area for super TYMCOMS (1, 2, 3, or 4 hosts).

                                           51                           TYMNET-I
        SUPERVISOR COMMUNICATION                               November 12, 1981


             Location (octal)  Function

              105+n            BORI for line n.
              125+n            Pointer to permuter table start for line n.
              145+n            Number of groups on line n.
              165+n            Node number for neighbor on line n.
              205-206          Host descriptor for host 0.
              207-210          Host descriptor for host 1 if present.
              211-212          Host descriptor for host 2 if present.
              213-214          Host descriptor for host 3 if present.












































                                           52                           TYMNET-I
        THE LEPRECHAUN                                         November 12, 1981






                                   6 - THE LEPRECHAUN


             Each  node   contains  a  process   which  communicates   with  the
        supervisor.  This process is universally known as the  "leprechaun".  It
        is basically an  extension of the supervisor,  in that it, more  or less
        blindly, performs actions at the command of the supervisor.






                            6.1  SUPERVISORY MESSAGE FORMAT


             TYMNET passes supervisory messages, to and from the  supervisor, of
        the form:

               --.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--
         SR1:  |u| type|    node number        |
               |-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-|
         SR2:  |                               |
               |-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-|
         SR3:  |                               |
               ---------------------------------

             WHERE:
             u:     direction    indicator..."1"    indicates    travel   toward
                supervisor;
             type:  message type...indicates format of SR2 and SR3;
             node:  the number of the destination/origination node, depending on
                the message passing downstream or upstream, respectively.






                                   6.2  LEP ROUTINES


             Within a node, there are typically several different  routines used
        in conjunction  with supervisory traffic.   There are also  certain data
        structures used:

             sr1, sr2, sr3:  successive words used for storage of  a supervisory
                record within a node, while it is being processed;


                                           53                           TYMNET-I
        THE LEPRECHAUN                                         November 12, 1981


             up_buffer:  a  pointer  to  the  buffer  wherein  data  placed will
                proceed to the supervisor...set up on takeover;
             down_switch:  a  switch, set  by the  supervisor via  direct writes
                into memory, which indicates the line on which down-stream bound
                messages should be transmitted;
             mach_number:  the number of this node;
             in_bufs[nlines]:  the set of  supervisory buffers for input  to the
                node;
             out_bufs[nlines]:  the set of  supervisory buffers for  output from
                the node;

             We will also define  the symbol, "tymsat", to  distinguish messages
        meaningful to TYMSAT's from those meaningful to TYMCOM's.





                    6.2.1  OUTPUT ROUTINES

             There are a number of special-purpose output routines:

        PROCEDURE report BEGIN
                { report is used to report diagnostics to the supervisor...
                    these are all type-3 messages. }
                sr1 := x'3000';
                lep_send_up;
        END

        PROCEDURE lep_send_up BEGIN
                { lep_send_up is used to pass an arbitrary message to the
                    supervisor. }
                sr1 := x'8000' OR mach_number OR sr1 { make upstream format };
                send_sup;
        END

        PROCEDURE send_sup BEGIN
                { send_sup verifies that there is a supervisor, and sends
                    the message, if so }
                IF up_buffer <> nil THEN lep_send(up_buffer);
        END

        PROCEDURE lep_send(buffer: INTEGER) BEGIN
                { lep_send places sr1-sr3 into buffer. }
                wci(sr1/256, buffer);
                wci(sr1, buffer);
                wci(sr2/256, buffer);
                wci(sr2, buffer);
                wci(sr3/256, buffer);
                wci(sr3, buffer);
        END



                                           54                           TYMNET-I
        THE LEPRECHAUN                                         November 12, 1981


                    6.2.2  INPUT ROUTINE

             There is  only one  input routine,  which services  all supervisory
        traffic to the node:

        PROCEDURE lep FOR line := 1 TO nlines DO BEGIN
                { This is the supervisory input routine.  It processes
                    input for all supervisory input buffers  (1/line).
                    Non-standard functions will be denoted by "{ **". }
                IF up_buffer = out_buf[line] THEN BEGIN
                    { we apply certain constraints to the line which
                        goes toward the supervisor....in particular,
                        if there is too much data outbound,  we will
                        stop looking at the line from the supervisor
                        to insure  that we will not be flooded  with
                        "multiplying" messages. }
                    n := 6*100*nlines;
                    FOR i := 1 TO nlines DO
                        n := n-buf_size(out_bufs[i] );
                    IF n < 0 THEN GOTO lepend;
                END;
                buffer := in_bufs[line];
        nexlep: IF size(buffer) = 0 THEN GOTO lepend;
                { we have determined that there is data present
                    on this line...get it. }
                get_lep(buffer);
                IF going_up(sr1) THEN
                    { we don't expect up-bound messages from upstream
                        and if we get one it's an error. }
                    IF up_buffer = out_bufs[line] THEN BEGIN

        lepret:         { lepret is used to return (reject) a message to the
                            supervisor....it may have been received from the
                            supervisor or from some other (external) source. }
                        sr3 := sr1 { return received sr1 in sr3 } ;
                        sr1 := X'2000' { return message type 2 } ;
                        lep_send_up;
                        GOTO nexlep { and process next message } ;
                    END
                    ELSE send_sup
                ELSE BEGIN
                    { this message is going down-stream...verify
                        that it is valid. }
                    IF node_num(sr1) = mach_number AND
                        type(sr1) = 0 THEN GOTO lep0 { takeover
                    OK...HOWEVER, all other message types MUST come
                    from upstream! }
                    ELSE IF up_buffer <> in_bufs[line] THEN GOTO lepret;
                    { it's valid...is it for us? }
                    IF node_num(sr1) <> mach_number THEN
                        IF down_switch = nil THEN GOTO lepret
                        ELSE BEGIN
                            { we are to pass this on }

                                           55                           TYMNET-I
        THE LEPRECHAUN                                         November 12, 1981


                            lep_send(out_bufs[down_switch]);
                            GOTO nexlep;
                        END
                    ELSE CASE type(sr1) OF

                    0:  { type 0...takeover } BEGIN
        lep0:           IF sr2/64 <> O'555' THEN GOTO lepret { validate } ;
                        FOR i := 1 TO nline DO empty(out_buf[i])
                            { flush all output } ;
                        send_sup { send to old supervisor } ;
                        up_buffer := out_bufs[line] { set new upstream } ;
                        empty(up_buffer) { cancel previous usage } ;
                        down_switch := 0 { now no down-stream } ;
                        sr2 := configuration;
                        sr3 := version;
                        send_sup { report to new sup } ;
                        IF tymsat THEN BEGIN
                            { ** functions dependent on TYMSAT...
                                e.g. hang all ports in log_on. } ;
                        END
                        ELSE BEGIN
                            { ** functions dependent on TYMCOM...
                                e.g. host may be interested...tell it } ;
                        END;
                    END;

                    1:  { type 1...place two chars into specified
                        buffer } BEGIN
                        wci(sr3/256, sr2);
                        wci(sr3, sr2);
                    END;

                    2:  { type 2...make a permuter table entry } BEGIN
                        { check parameters }
                        i := sr2/1024 { line number } ;
                        IF i > nlines THEN GOTO lepret;
                        buffer := (sr3 AND x'3FFF') XOR 1 { other buffer } ;
                        IF buffer > nbufs THEN GOTO lepret;
                        channel := sr2 AND X'3FF' { channel number } ;
                        IF channel > nchannel[i] THEN GOTO lepret;
                        IF channel < 2 THEN GOTO lepret;
                        IF ptable[i, c] <> -1 THEN BEGIN
                            { re-assignment of in-use permuter
                                table...cancel that circuit }
                            j := (ptable[i, c] AND X'3FFF') XOR 1;
                            clear(j);
                            bf[j] := 0;
                        END;
                        ptable[i, c] := sr3;
                        set_bit(flags, bf[buffer], 0);
                        bf[buffer] := bit_number(cfob[i, channel]);
                        IF size[buffer] <> 0
                            THEN set_bit(flags, bf[buffer], 1);

                                           56                           TYMNET-I
        THE LEPRECHAUN                                         November 12, 1981


                        sr2 := X'8001' { now report success } ;
                        report;
                        END;
                    END;

                    3:  { type 3...change cell or special message }
                        IF going_up(sr2) THEN BEGIN
                            { if the sign bit is set, then special...
                                low 6 bits of sr2 are message. }
                            i := sr2 AND X'3F';
                            CASE i OF
                            0:  IF tymsat THEN BEGIN
                                { ** do "normal logon" function } ;
                                END
                                ELSE GOTO lepret;

                            4:  { empty a buffer }
                            clear(sr3);

                            5:  { zap a buffer } BEGIN
                                clear(sr3);
                                wci(zapper, sr3);
                                END;

                            E:  { report line speeds } ;

                            F:  { load neighbor } ;

                            other: GOTO lepret;

                            END;
                        END;
                        ELSE { change cell of memory...sr3 is address,
                             sr2 is content.   supervisor can only
                             address certain areas unless dlock is
                             negative. size of area supervisor can
                             address is configuration dependent. }
                             IF dlock < 0 THEN memory[sr2] := sr3;

                    4:  { read out 2 cells } BEGIN
                        x := sr3;
                        sr3 := memory[sr2];
                        report;
                        sr2 := x;
                        sr3 := memory[sr2];
                        report;
                        END;

                    5:  { supervisory-host message }
                        IF tymsat THEN GOTO lepret
                        ELSE BEGIN
                            { ** the actions performed herein are VERY
                                host-specific!! } ;

                                           57                           TYMNET-I
        THE LEPRECHAUN                                         November 12, 1981


                        END;

                    6: { GMT report from supervisor }
                        IF tymsat THEN GOTO lepret
                        ELSE BEGIN
                            { ** sr2-sr3 contain a 32-bit quantity which
                                is the GMT since 1 JAN 74 } ;
                        END;

                    7: { accounting invoice number }
                        IF tymsat THEN GOTO lepret
                        ELSE BEGIN
                            { ** again, very host-specific } ;
                        END;
                    END;
        lepend: { done with this line!! }
                END;
        END

        PROCEDURE get_lep(buffer: INTEGER) BEGIN
                { get_lep is used to remove one supervisor message from
                    "buffer" and place it in SR1-SR3. }
                sr1 := gci(buffer);
                sr1 := sr1*256+gci(buffer);
                sr2 := gci(buffer);
                sr2 := sr2*256+gci(buffer);
                sr3 := gci(buffer);
                sr3 := sr3*256+gci(buffer);
        END

        FUNCTION going_up(w: INTEGER): BOOLEAN BEGIN
                going_up := TRUE;
                IF (w AND X'8000') = 0 THEN going_up := FALSE;
        END

        FUNCTION type(w: INTEGER): INTEGER BEGIN
                type := w/X'1000' AND X'7';
        END

        FUNCTION node_num(w: INTEGER): INTEGER BEGIN
                node_num := w AND X'0FFF';
        END












                                           58                           TYMNET-I
        VIRTUAL TERMINAL CHARACTERISTICS                       November 12, 1981






                          7 - VIRTUAL TERMINAL CHARACTERISTICS


             TYMNET has  a number of  parameters which can  be set to  control a
        terminal.  This document is intended to describe the  "virtual terminal"
        described by these parameters.   Some of these parameters  may originate
        only at one end of the circuit, and are keyed:

          > Originates only at TYMSAT (circuit originator).
          < Originates only at BASE (circuit terminator).

             Unless  otherwise specified,  codes  will be  represented  by octal
        numbers.  The default is an 8-bit value (byte).  Multiple-byte codes are
        designated by X::Y, where X  and Y are successive bytes.   Certain codes
        have subfields of  less than 8  bits.  these will  be noted by  the form
        (X)Y, designating  X bits of  value Y.  Subfields  will be  separated by
        "\".

             Characters flowing  through the network  are all  8-bit quantities.
        This provides  a character-space of  256 (decimal)  distinct quantities.
        However,  certain characters  in this  space are  set aside  for network
        control, and some  of the control  commands are character  pairs.  These
        control functions are transparent to the actual data stream.

             Reference will  be made to  "Parameter-C Mapping"  ("C-MAP").  This
        mapping translates a 4-bit quantity according to the following mapping:


         VALUE  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15
          MAP   0   1   2   3   4   5   7  10  14  19  26  36  50  69  95 131




             Character codes 000 to 007 are control codes:

             Code 000 is an  escape character.  It is  the first character  of a
        character pair, and  the second character  is the data  character.  This
        permits the distinguishing of data codes from control codes.

             Code 001 is a  prefix code, and is  followed by a  second character
        which specifies the specific code to use.  These are described below.

             Code 002 is known as a GOBBLER.  it is used to flush all characters
        from a circuit, traveling in the same direction.

             Code 003 is a CIRCUIT ZAPPER,  and is used to empty  all characters
        from a circuit and tear the circuit down.


                                           59                           TYMNET-I
        VIRTUAL TERMINAL CHARACTERISTICS                       November 12, 1981


             >  Code 004 is a LDEM (LEAVING-DEFERED-ECHO-MODE) report.

             >  Code 005 is a GREEN BALL.  These originate only at  TYMSATS, and
        are held by the host until released again to return to the  TYMSAT.  The
        receipt  of  a GREEN  BALL  by the  TYMSAT  signifies that  the  host is
        dismissed, waiting for input.  The GREEN BALL may be used by  the TYMSAT
        to  decide when  to leave  DEFERED-ECHO-MODE on  some terminals,  and to
        decide when to turn other (half-duplex) terminals around.  A  green ball
        may be destroyed if a  red ball catches it;  especially if  this happens
        while  the  green  ball  is  resident  at  the  host,  waiting  for  the
        appropriate host condition (waiting for input) to occur.

             >  Code 006 is a RED BALL.   These are used to cancel  GREEN BALLS.
        In  particular, a  red ball  which  catches a  green ball  causes  it to
        disappear,  and  the  red  ball  then  propagates  around  the  circuit,
        immediately.

             >  Code 007  is a  EDEM (ENTERING-DEFERED-ECHO-MODE)  report.  This
        character is sent whenever a conflict occurs such that either: 1. a non-
        printable character is received from the terminal;  or 2. if a character
        is received while output to the terminal is in progress.






                                   7.1  PREFIX CODES


             Prefix  codes  are  used  to  manipulate  and  test   the  terminal
        characteristics.  As noted above, these consist of a pair  of characters
        of the form 1::CODE.  In the following, the quantity [a; b] is the basic
        value of the code, to which the appropriate number of bits of  value are
        to be "OR"ed.  "a" is octal; "b" is hexadecimal.

             CODE  is  subdivided   into  the  form   (4)SUBTYPE\(4)VALUE.   The
        following list is in subtype order.



             1::03 [060; 30].  INPUT BAUD RATE.  When fully deployed,  this code
        will in  turn supercede the  obsolete code to  set "C/R DELAY  and INPUT
        BAUD RATE".

             1::04 [100; 40].  PARAMETER  D.  Parameter "D" is a  terminal delay
        parameter which applies to the ALTERNATE of the normal delay parameters.
        That  is,  if  C/R  DELAY  is  set,  parameter  "D"  is  applied  to L/F
        characters.  The VALUE maps into the parameter, using C-MAP.

             1::05 [120; 50].  PARAMETER C.  The VALUE maps into  the parameter,
        using C-MAP.


                                           60                           TYMNET-I
        VIRTUAL TERMINAL CHARACTERISTICS                       November 12, 1981


             1::06 [140; 60].  PARAMETER B.  The VALUE is the parameter.

             1::07 [160; 70].  PARAMETER A.  The VALUE is the parameter.

             NOTE on  PARAMETERS "A", "B",  "C", and "D"...These  parameters are
        used to generate delays on output to the terminal to allow time  for the
        carriage to return.  The delay is in units of 1/30 second.

             <  1::10 [200; 80].  Set OUTPUT BAUD RATE.  The VALUE is the output
        baud rate, according to the key:

                baud rate       terminal speed or other
                0               110 baud (10 CPS)
                1               150 baud (15 CPS)
                2               300 baud (30 CPS)
                3               400 baud (40 CPS) (no terminals exist)
                4               600 baud (60 CPS)
                5               1200 baud (120 CPS)
                6               3767 type terminal (32.4 cps)
                7               2741 type terminal (14.6 cps)
                [10; 8]         300 baud (10 CPS)
                [11; 9]         1200 baud (10 CPS)
                [12; A]         2400 baud (240 CPS)
                [13; B]         4800 baud (480 CPS)
                [14; C]         9600 baud (960 CPS)
                [15; D]         300 baud (10 CPS)
                [16; E]         300 baud (10 CPS)
                [17; F]         300 baud (10 CPS)



             <  1::11 [220; 90].  Query FIELD PARAMETER.  The VALUE is the INDEX
        of the appropriate field parameter as above.  The response  generated by
        the TYMSAT is of the form of the appropriate SET prefix code  (e.g., for
        query 1::225  the response  is 1::(4)05\(4)V,  where V  is the  value of
        parameter "C").

                Value   Parameter

                  3     Input baud-rate
                  4     Parameter D
                  5     Parameter C
                  6     Parameter B
                  7     Parameter A
               [10; 8]  Output baud-rate



             <  1::12 and  1::13.  Query  BIT PARAMETER.   This class  of prefix
        codes has the format:
                            1::(4)SUBTYPE\(3)INDEX\(1)UNUSED



                                           61                           TYMNET-I
        VIRTUAL TERMINAL CHARACTERISTICS                       November 12, 1981


             Note that this pair of prefix codes can also be interpreted  as the
        alternate format:
                            1::(3)subtype\(4)index\(1)unused

             where subtype = 5.  The following list is in terms of  this format.
        The response to these types is:
                               1::(3)6\(4)index\(1)value

             (see section 1\14 and 1::15).

             <  1::5\00 [240; A0].  Query ECHO CONTROL.

             <  1::5\01 [242; A2].  Query ECHO CONTROL-I.

             <  1::5\02 [244; A4].  Query ECHO C/R with C/R::L/F.

             <  1::5\03 [246; A6].  Query ECHO L/F with L/F::C/R::Rubout.

             <  1::5\04 [250; A8].  Query HALF-DUPLEX.

             <  1::5\05 [252; AA].  Query PARITY.

             <  1::5\06 [254; AC].  Query XON/XOFF ENABLE.

             <  1::5\07 [256; AE].  Query C/R DELAY.

             <  1::5\10 [260; B0].  Query ECHO CONTROL-H (backspace).

             <  1::5\11 [262; B2].  Query REVERSE X-ENABLE.

             <  1::5\12 [264; B4].  Query KATAKANA.

             <  1::5\13 [266; B6].  Query TERMINATE-OUTPUT-ON-BREAK-DETECTED.



             1::14 and  1::15.  SET BIT  PARAMETER.  This class  is used  to set
        those terminal parameters which can be specified by one bit.  The format
        is as described in 1::12 and 1::13, with "value" being the value  of the
        appropriate  bit parameter.  The quantity  in "()"  is the  second byte,
        where an even value turns the  parameter off, and an odd value  turns it
        on.

             1::6\00 [300; C0].  Set ECHO CONTROL.

             1::6\01 [302; C2].  Set ECHO CONTROL-I.

             1::6\02 [304; C4].  Set ECHO C/R with C/R::L/F.

             1::6\03 [306; C6].  Set ECHO L/F with L/F::C/R::Rubout.

             1::6\04 [310; C8].  Set HALF-DUPLEX.


                                           62                           TYMNET-I
        VIRTUAL TERMINAL CHARACTERISTICS                       November 12, 1981


             1::6\05 [312; CA].  Set PARITY.

             1::6\06 [314; CC].  Set XON/XOFF ENABLE.

             1::6\07 [316; CE].  Set C/R DELAY.

             1::6\10 [320; D0].  Set ECHO CONTROL-H.

             1::6\11 [322; D2].  Set REVERSE X-ENABLE.

             1::6\12 [324; D4].  Set KATAKANA.

             1::6\13 [326; D6].  Set TERMINATE-OUTPUT-ON-BREAK-DETECTED.



             1::17.   This set  is used  to transfer  control  information.  The
        format is 1::(4)17\(4)FUNCTION.  They will be tabulated according to the
        8-bit codes.

             <  1::[360; F0].   HANG CHARACTER.   Causes the  TYMSAT port  to be
        hung up (forced disconnect).

             <  1::[361;  F1].  TURNAROUND  HANG CHARACTER.   Causes  the tymsat
        port to be hung if it is connected to a true half-duplex  device.  (This
        is necessary  since, if  the port is  in input  mode from  an unattended
        terminal, there is no way  that the normal HANG command can  be serviced
        until the terminal  turns around, and  the port will  be tied up  for an
        extended period.)

             <  1::[362; F2].  ENTER  TRANSPARENCY MODE (GLASS BALL).   Used for
        those terminals which  have character sets  which are translated  by the
        TYMSAT.

             >  1::[363; F3].  LEAVE  TRANSPARENCY MODE.  This function  is also
        effected if the TYMSAT receives a ZAPPER.

             1::[364; F4].  ENTER ALTERNATE OUTPUT DEVICE MODE.  Used  to switch
        output  on special  devices or  ports, ignored  on all  ports  where not
        applicable.  Used on CDC printer ports to divert output to printer.

             1::[365; F5].  LEAVE  ALTERNATE OUTPUT DEVICE MODE.   This function
        is also effected if the TYMSAT receives a ZAPPER.

             1::[366;  F6].   SIIX (Start  of  Interface  Information eXchange).
        This is an escape flag to indicate the Start of an IIX.

             1::[367;   F7].    TIIX  (Termination   of   Interface  Information
        eXchange).  This is an (optional) escape flag to indicate the End  of an
        IIX.

             1::[372;  FA].   BREAK  END.   Designates  the  end  of  a  "break"
        condition.

                                           63                           TYMNET-I
        VIRTUAL TERMINAL CHARACTERISTICS                       November 12, 1981


             1::[373; FB].  BREAK BEGIN.  Designates the beginning of  a "break"
        condition ("break" detected, if coming from TYMSAT).

             1::[374; FC].  GRAY BALL.  Indicates a BLACK BALL has been detected
        by the TYMSAT.

             1::[375; FD].  BLACK BALL.  Replaces the contents of a buffer which
        has been zapped.  Indicates an unknown amount of data was lost.

             1::[376;  FE].  ORANGE  BALL.   The response  to the  receipt  of a
        YELLOW BALL.

             1::[377;  FF].   YELLOW  BALL.   May  be  emitted  by  any  port to
        determine  when  all preceding  characters  have been  flushed  from the
        circuit (by the receipt of the response, Yellow Ball).






                                  7.2  OBSOLETE CODES


             Certain of the  codes have been  superceded, and are  now obsolete.
        These are  included only  because they  may still  exist in  some hidden
        corner of the network, but should not be used for new development.

             <  1::00 [000;  00].  Set  ECHO-CONTROL.  The  VALUE is  a four-bit
        quantity, of format:

                (1)W\(1)X\(1)Y\(1)Z

        where:

                W designates ECHO ON,
                X designates ECHO CONTROL-I,
                Y designates ECHO L/F with C/R,
                Z designates ECHO C/R with L/F.

             <  1::01 [020; 10].  Set C/R DELAY and INPUT BAUD RATE.   The VALUE
        is of format:

                (1)X\(3)Y

        where:

                X designates C/R DELAY control,
                Y designates INPUT BAUD RATE (see 1::10).





                                           64                           TYMNET-I
        TERMINALS                                              November 12, 1981






                                     8 - TERMINALS


             A TYMSAT port is a port  that is handled by a TYMNET node  called a
        TYMSAT.   The most  common type  of  TYMSAT port  is an  interface  to a
        terminal.  A terminal may be connected to a TYMSAT port  either directly
        or via dialed phone  lines.  For information on connecting  a particular
        terminal to TYMNET, see your Tymshare representative.

             As  part of  the  procedure of  connecting  to a  TYMSAT  port, the
        terminal user  specifies the type  of the terminal  to TYMNET.   In most
        cases, a terminal identification character (TIC) is used.  The following
        terminal types are available:

        Terminal       Terminal           Input
          Type          Class    TIC    Baud Rate
          (TID)

            0                   - - -           Auxiliary circuit
            1           ASCII    A,Y    300
            2           ASCII     C     300
            3           ASCII    E,I    300
            4           ASCII     G     300
            5           ASCII     B     150
            6           ASCII     F     150
            7           ASCII     J     150
            8           2741     <CR>   300     (i.e. a 3767 in 2741 mode)
            9           2741     <CR>   134
           10           ASCII     D     110
           11           2780    - - -
           12           ASCII   A,G,I   1200, 2400, 4800 (Gouging = 1)
           13                   - - -           Burroughs Polled
           14                   - - -           Aux Through Gateway
           15                   - - -   Variable:  Baudot
           16           ASCII   A,G,I   2400 (Gouging = 2)
           17                   - - -           3270
           18                   - - -           3270 Printer
           19           ASCII   A,G,I   4800 (Gouging = 2)
           20           ASCII   A,G,I   9600 (Gouging = 3)
           21                   - - -           Multiplexed PVC
           22                   - - -           Audio Response









                                           65                           TYMNET-I
        TERMINALS                                              November 12, 1981


                                  8.1  ASCII TERMINALS


             Each  ASCII  terminal  has  a  set  of  variables  called  terminal
        characteristics (TC's), viz.:

        TC Code Name                No. of bits

           1    Echo Control-I          1
           2    Echo LF|CR on LF        1
           3    Echo CR|LF|RUB on CR    1
           4    Delay after CR          1
           5    Input Baud Rate Code    4
           6    Output Baud Rate Code   4
           7    Parity                  1
           8    Half Duplex             1
           9    Parameter A             3
          10    Parameter B             4
          11    Parameter C             4
          12    X-enable                1
          13    Echo Control-H          1
          14    Reverse X-enable        1
          15    Katakana                1
          16    Term. Output on Break   1

             On some  TYMSATs, Echo  Control-H and  Reverse X-enable  are always
        zero.

             When  a  terminal   is  connected,  the  following   variables  are
        initialized to zero:
                Echo Control-I
                Half Duplex
                Echo Control-H
                Reverse X-enable

             There  is  a  boolean  variable  called  Output  Enable   which  is
        initialized to true.  The following variables are  initialized depending
        on the terminal type:

        Terminal  Input/Output   Parameter     CR
          Type   Baud Rate Code  A  B  C  D  Delay  Parity

          1 (A)          2       0  0  0  0    1      0
          1 (Y)          2       0  0  0  0    0      0 (H-dux)
          2              2       4  0  4  9    1      0
          3 (E)          2       4  6  6  1    1      0
          3 (I)          2       1 12  8  6    1      0
          4              2       3  5  8  0    0      0
          5              1       6  0  2  0    1      0
          6              1       4  0  4  9    1      0
          7              1       6  0  2  0    1      1
         10              0       0  0  0  0    1      0
         12 (A)          5       0  0  0  0    1      0

                                           66                           TYMNET-I
        TERMINALS                                              November 12, 1981


         12 (G)          5       3  5  8  0    0      1
         12 (I)          5       1 12  8  6    1      1
         16 (A)         10       0  0  0  0    1      0
         16 (G)         10       3  5  8  0    0      1
         16 (I)         10       1 12  8  6    1      1
         19 (A)         11       0  0  0  0    1      0
         19 (G)         11       3  5  8  0    0      1
         19 (I)         11       1 12  8  6    1      1
         20 (A)         12       0  0  0  0    1      0
         20 (G)         12       3  5  8  0    0      1
         20 (I)         12       1 12  8  6    1      1

             The input and output baud rates and number of characters per second
        are controlled by the Input and Output Baud Rate Codes as follows:

        Baud Rate Code  Baud Rate  CPS
              0            110      10
              1            150      15
              2            300      30
              3            400      40
              4            600      60
              5           1200     120
              6            300      32.4 (3767 terminal)
              7            134      14.6 (2741 terminal)
              8            300      10 (sic)
              9           1200      10 (sic)
             10           2400     240
             11           4800     480
             12           9600     960
             13            300      10
             14            300      10
             15            300      10

             After the terminal is connected, the port enters login state.  When
        the port enters login state, the following variables are initialized:

        Variable                Initial Value

        Echo LF|CR|RUB on LF          1
        Echo CR|LF on CR              1
        Alternate Output Device Mode  0
        Echo Off                      0
        Deferred Echo Mode            1
        Ball Out Flag               False
        Green Ball Flag             False

             (Note: this terminology is not necessarily the same as that used in
        TYMSAT code.)

             In  this state  there is  no  circuit to  the port.   A  message is
        printed  asking  for  a  login string,  and  then  ASCII  characters are
        accepted for the  login string.  The login  consists of two  parts:  the


                                           67                           TYMNET-I
        TERMINALS                                              November 12, 1981


        username string, and the  password string.  The username  characters are
        echoed.   The following  characters, which  may appear  anywhere  in the
        username string, have special significance:

             Control-A:  Causes the speed of the circuit to be built  using this
                logon  string to  be 32cps.   This is  the default  for terminal
                types other than type 12.
             Control-B:  Causes the speed of the circuit to be built  using this
                login string to  be 160 cps.  This  is the default  for terminal
                type 12.
             Control-C:  Causes the speed of the circuit to be built  using this
                login string to be 512 cps.  This is the default for type 0 (Aux
                circuit).
             Control-D:  Causes the speed of the circuit to be built  using this
                login string to be 2048 cps.
             Control-H:  Sets the Half Duplex variable to 1.
             Control-K:   Sets  the   KATAKANA  variable  to   1  (Configuration
                dependent).
             Control-P:  Sets the Parity variable to 1.
             Control-R:  Sets the Reverse X-enable variable to 1.
             Control-U:    Sets   the  Uppercase   (KATAKANA)   variable   to  1
                (Configuration dependent).
             Control-X:  Sets the X-enable variable to 1.

             The following characters apply to both the username and password:

             Control-W:  Erases characters in  the login string back to  a colon
                or to the beginning of the string (i.e.  cancels the username or
                system number typed so far.
             Escape:  Erases the login string and re-enters login state.
             Carriage Return:  Terminates the login string.
             Semicolon:  Terminates the login string.

             The  username string  consists of  a username  (and  optionally,  a
        colon, and the destination host  number).  If the colon and  host number
        are omitted, the home system of the username is used as  the destination
        host number.

             If the username is not in the MUD, an error message is  printed and
        the port re-enters login state.

             If the username  is in the MUD,  then a password is  accepted.  The
        password  and  its  terminator are  not  echoed.   The  Escape character
        returns  the  port  to  login  state.   Carriage  return  and  semicolon
        terminate the password and constitute the login-line terminator  for the
        circuit to be built.

             If the login string and password are not completely received within
        about  2 minutes  of  entering login  state,  then an  error  message is
        printed, after which the terminal is disconnected.

             A function of the password is computed and compared with  the value


                                           68                           TYMNET-I
        TERMINALS                                              November 12, 1981


        stored in  the MUD.  If  they do not  match, or if  the username  is not
        valid on the destination host, an error message is printed and  the port
        re-enters login state.

             If the passwords match, the supervisor tries to build a  circuit to
        the  destination  host.  The  TYMSAT  port is  the  initiating  end.  If
        unsuccessful, an error message  is printed and the port  re-enters login
        state.

             The terminal type  code for the circuit  is the type (v.s.)  of the
        terminal, plus 32 if a Control-H was typed in the login string.





                    8.1.1  ASCII RECEIVER

             When an ASCII character is received from the terminal the effect is
        as if the following PASCAL procedures were called:

        PROCEDURE receive(VAR char: INTEGER) { process input character }
            BEGIN
            c = MOD(char, X'80') { character without parity bit };
            IF reverse_x_enable AND
                    c = X'11' { control-Q, DC1, XON } AND
                    output_enable := FALSE
            THEN
                output_enable :=TRUE
            ELSE
                IF reverse_x_enable AND
                        c = X'13' { control-S, DC3, XOFF } AND
                        output_enable := TRUE
                THEN
                    output_enable := FALSE
                ELSE
                    BEGIN
                    IF echo_on
                    THEN
                        echo(c,char) {perform echo logic};
                    send(char)
                    END;
            END;

        PROCEDURE echo(VAR c, char: INTEGER) {echo input character }
            BEGIN
            IF deferred_echo_mode
            THEN
                IF green_ball_flag
                THEN
                    BEGIN
                    green_ball_flag := FALSE;
                    send(red_ball);

                                           69                           TYMNET-I
        TERMINALS                                              November 12, 1981


                    END;
            ELSE {NOT defered_echo_mode}

                IF output_buffer_empty AND
                        output_enable := TRUE
                THEN
                    IF half_duplex
                    THEN
                        IF c = X'0D' { CR }
                        THEN
                            IF echo_cr_with_lf
                            THEN
                                print (X'0A' { LF }) ;
                        ELSE
                            IF c = X'0A' { LF }
                            THEN
                                IF echo_lf_with_cr
                                THEN
                                    BEGIN
                                    print(X'0D' { CR }) ;
                                    print(X'FF' { DEL }) ;
                                    END;
                    ELSE { NOT half_duplex }

                        CASE c OF
                            c=X'7F': {DEL,RUBOUT}
                                enter_dem ;
                            c=X'7E': {tilde}
                                enter_dem ;
                            c=X'7D': {ALTMODE,"}"}
                                enter_dem ;
                            c>X'20': {printable character}
                                print(char) ;
                            c=X'0D': { CR }
                                BEGIN
                                print(char) ;
                                IF echo_cr_with_lf
                                THEN
                                    print (x'0A' { LF }) ;
                                END;
                            c=X'0A': { LF }
                                BEGIN
                                print(char) ;
                                IF echo_lf_with_cr
                                THEN
                                    BEGIN
                                    print(X'0D' { CR }) ;
                                    print(X'FF' { DEL }) ;
                                    END;
                                END;
                            c=X'09': { HT }
                                IF echo_control_i
                                THEN

                                           70                           TYMNET-I
        TERMINALS                                              November 12, 1981


                                    print(char) ;
                                ELSE
                                    enter_dem ;
                            c=X'08': { BS }
                                IF echo_control_h
                                THEN
                                    print(char) ;
                                ELSE
                                    enter_dem ;
                            other:
                                enter_dem ;
                        END;
                ELSE {NOT output_bufer_empty}

                    enter_dem ;
            END;

        PROCEDURE enter_dem
            BEGIN
            deferred_echo_mode := TRUE;
            send(enter_deferred_echo_mode);
            END;

             If  the  terminal  sends  a break  and  the  TYMSAT  is  capable of
        detecting breaks, a break character is sent on the circuit.

             If the terminal disconnects  (e.g.  hangs up), a circuit  zapper is
        sent.  (Note: If the terminal  is connected through a modem with  a half
        duplex line protocol, it is not always possible for the TYMSAT to detect
        when the terminal hangs up.)






                             8.2  MESSAGES FROM THE CIRCUIT


             When output_enable is FALSE,  messages other than a  circuit zapper
        are not accepted from the circuit (they will back up in the pipe).  When
        a message  is accepted from  the circuit the  following action  is taken
        depending on the message:

            Data Byte:  The  data byte is printed.   While it is  being printed,
                  output_enable is set FALSE.

            Circuit Zapper:  The port enters login state.

            Character Gobbler:  Ignored.

            Black_Ball:  A Gray_Ball is returned on the circuit.


                                           71                           TYMNET-I
        TERMINALS                                              November 12, 1981


            Green_Ball:  If  green_ball_flag is TRUE  then it  and ball_out_flag
                  are   set   to   FALSE   and   if   echo_off   is   FALSE  and
                  deferred_echo_mode is TRUE  then deferred_echo_mode is  set to
                  FALSE and a  Leave_Deferred_Echo_Mode control code is  sent on
                  the circuit.  If  green_ball_flag is FALSE, the  Green_Ball is
                  ignored.

            Red_Ball:  ball_out_flag is set to FALSE.

            Yellow_Ball:  An Orange_Ball is returned on the circuit.

            Orange_Ball:  Ignored.

            Enter_Transparency_Mode:  Ignored for ASCII terminals.

            Leave_Transparency_Mode:  Ignored for ASCII terminals.

            Enter_Alternate_Output_Device_Mode:  alternate_output_device_mode is
                  set to TRUE.

            Leave_Alternate_Output_Device_Mode:  alternate_output_device_mode is
                  set to FALSE.

            Set_Terminal_Characteristics(tc, val):  The  terminal characteristic
                  whose code is tc is  set to the value right-justified  in val.
                  After the variable has been set, a response is sent  as though
                  a Probe Terminal Characteristics(tc) had been received.

            Probe_Terminal_Characteristics(tc):    A   terminal  characteristics
                  response(tc, val)  is sent  on the circuit,  where val  is the
                  value of the terminal characteristic whose code is tc.

            Hang_Character:  Disconnects (i.e.  hangs up) the terminal.   If the
                  terminal has  a half  duplex line  protocol (e.g.   2741), the
                  hang up will not occur  until the terminal is ready  to accept
                  output from the TYMSAT.

             When x_enable  is TRUE and  the pipe leading  from the  TYMSAT port
        becomes crowded, a DC3  (Control-S, XOFF) is printed.  When  x_enable is
        TRUE and the  pipe leading from the  TYMSAT port becomes  not_crowded, a
        DC1 (Control-Q, XON) is printed.  (Some terminal devices interpret these
        characters as commands to stop and resume sending, respectively.)

             Whenever  deferred_echo_mode  is  TRUE and  echo_off  is  FALSE and
        ball_out_flag is FALSE and there  is no output in progress  (or queued),
        ball_out_flag and green_ball_flag are both set to TRUE and  a Green_Ball
        is sent on the circuit.  When deferred_echo_mode is TRUE and echo_off is
        FALSE and ball_out_flag is TRUE  and there is no output in  progress (or
        queued) and approximately 8 seconds have elapsed since either a  Red_ or
        Green_Ball  has  been  sent  on the  circuit,  a  Red_Ball  is  sent and
        green_ball_flag is set to FALSE.



                                           72                           TYMNET-I
        TERMINALS                                              November 12, 1981


             If a character  is input and defered_echo_mode  and green_ball_flag
        are both TRUE, a Red_Ball is sent and green_ball_flag is set to FALSE.

             It is a  consequence of the  above that when  deferred_echo_mode is
        FALSE, echo_off must be FALSE and green_ball_flag and ball_out_flag must
        both be FALSE.






                                     8.3  PRINTING


             When a character is printed  it is sent to the terminal.   Then, if
        the character is  a carriage return  and CR Delay  is 1, a  delay occurs
        before another character can be printed.  The size of the delay is:

              Minimum(N/2**(Parameter A) + (Parameter B), F(Parameter C))

             where N is the carriage position and F(Parameter C) is given by the
        following table:

                 C     0  1  2  3  4  5  6  7  8  9 10 11 12 13 14  15
                F(C)   0  1  2  3  4  5  7 10 14 19 26 36 50 69 95 131

             (The sequence of numbers is calculated as follows:
                                       1 --> V(1)
                                       2 --> V(2)
                                       3 --> V(3)
                                       4 --> V(4)
                              V(i) + V(i+3) --> V(i+4)  .)

                Example of carriage-return delay (A=2, B=5, C=7)

            | - - - - - - - - - -============================ F(C)
            |                ====
            |            ====
         d  |        ====                              A
         e  |    ====    slope of line related to (1/2)
         l  |====
         a  | \
         y  |   B
            |   
            |   
            +-------------------------------------------------- N
                        (number of characters)


             If a line feed is printed  and CR Delay is 0, a delay  is generated
        (before the line feed; N is then reset to 0) whose size is:


                                           73                           TYMNET-I
        TERMINALS                                              November 12, 1981



            IF N = 1 THEN (Parameter A)
            ELSE maximum(0, F(Parameter C) - N) + (Parameter B)
            FI

                Example of line-feed delay (A=2, B=4, C=6)
                    ---------------
            | =                 |
            |  =                |
         d  |   =               } F(C)
         e  |    =              |
         l  |     =             |
         a  |      =            |
         y  |-------========================================== B
            |
            |=
            | \ A
            =-------------------------------------------------- N
                        (number of characters)


             If a carriage return is printed  and CR Delay is 0, or a  line feed
        is printed and CR Delay  is 1, a delay occurs ("alternate  delay") whose
        size is F(Parameter D).

             The duration of a delay is the size times 1/30th of a second.

             For  purpose  of  computing the  carriage  position,  tab-stops are
        assumed to be set every 8 characters.

             If Parity = 1  then the high order  bit of every character  sent to
        the terminal will be even parity instead of the high order bit specified
        in the 8-bit byte from the circuit.

             Alternate Output Device Mode  affects only certain devices  such as
        CDC printers.






                                  8.4  2741 TERMINALS


             This class  of terminals includes  the IBM 2741  and the  3767 when
        operating in 2741 mode.  These awkward (because they are half-duplex, by
        LINE  of  text)  devices are  treated  somewhat  differently  from ASCII
        terminals.   This  documentation  is incomplete,  but  the  following is
        believed to be fairly accurate.

             There is a variable  called Transparency Mode which  is initialized


                                           74                           TYMNET-I
        TERMINALS                                              November 12, 1981


        to  0 when  the terminal  enters  login state.   It is  set to  1  and 0
        respectively by the Enter and Leave Transparency Mode control codes.

             When Transparency Mode is 1, data is sent to and from  the terminal
        with  no translation  whatsoever.  (You  will have  to refer  to  a 2741
        manual to make sense of this mode.) The low order bit of each  data byte
        is sent  first.  The high  order bit  should be 1.   If the  keyboard is
        locked the attention key sends a begin-break ball through the network.

             When Transparency Mode is 0, translation to and from  ASCII occurs.
        All 128 ASCII codes can be sent.  A break character cannot be sent.  The
        terminal is in one of  four states depending on whether the  keyboard is
        locked  and the  value of  Red Ball  Flag (initially  false).   When the
        keyboard is unlocked, the output (to terminal) stream is  not processed,
        except to  examine the first  element in the  output stream  for control
        codes.   When the  keyboard becomes  locked (because  carriage-return or
        attention was typed), if  Red Ball flag is  false a green ball  is sent.
        When the keyboard is locked and attention is typed, the keyboard becomes
        unlocked and if Red Ball Flag is false then it is set to true and  a red
        ball is sent.  When a green ball is received, if Red Ball Flag  is false
        the keyboard becomes unlocked.  When a red ball is received, if Red Ball
        Flag is true it is set to false and a green ball is sent.

             The net effect is that for normal input, the keyboard is  locked at
        the end  of each line,  and a  green ball is  circulated, to  permit any
        response to the last line to be typed.  When the green ball is returned,
        the  keyboard is  once again  unlocked.  This  feature depends  upon the
        specification for green ball--which  specifies that the green  ball will
        be returned when the host application dismisses, looking for more input-
        -to insure that input and  output appear in the correct sequence  on the
        terminal.






                              8.5  2780 and 3780 TERMINALS


             This section is not written yet.













                                           75                           TYMNET-I
        TERMINALS                                              November 12, 1981


                                  8.6  3270 TERMINALS


             This section is not written yet.






                                8.7  DIAL-OUT TERMINALS


             This section is not written yet.








































                                           76                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981






                                9 - BASE-HOST INTERFACE


             This chapter describes  the protocol used between  certain TYMSHARE
        hosts, such as IBM-370 (PDP-10 to a lesser extent), and  the specialized
        TYMCOM  (BASE) connecting  them  to TYMNET.   It does  not  describe the
        hardware used to connect a host to TYMNET.  Here the hardware  is viewed
        as a mechanism  for transmitting messages  consisting of some  number of
        eight-bit bytes to and from TYMNET.

             Note:   Do  not  confuse  base-host  messages  with  messages  in a
        circuit!






                                     9.1  The BASE


             A host communicates  with a part of  TYMNET called a  base.  TYMNET
        identifies a base port with  a node number, identifying the base,  and a
        base  port  number.   The base  port  number  is the  sum  of  an offset
        identifying the host (if there is more than one host on the base)  and a
        host port number.  If there is  only one host on the base its  offset is
        zero.  Host port numbers range from zero up to but not including a limit
        called the base port  limit.  For the 370  bases the base port  limit is
        currently 255.  For example:





















                                           77                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981



                                         base ports   host ports
                                     ------------        ----------
                                     |          | 0    0 |        |
                                     |          |--------|        |
                    -------------    |          | 1    1 |        |
                    |           |    |  base 1  |--------|  host  |
                    |           |----|          | 2    2 |        |
                    |  rest of  |    |          |--------|        |
                    |           |    ------------        ----------
                    |           |
                    |           |    ------------        ----------
                    |  TYMNET   |    |          | 0    0 |        |
                    |           |----|          |--------|        |
                    |           |    |          | 1    1 |  host  |
                    -------------    |          |--------|        |
                                     |          |        ----------
                                     |  base 2  |
                                     |          |        ----------
                                     |          | 100  0 |        |
                                     |          |--------|        |
                                     |          | 101  1 |  host  |
                                     |          |--------|        |
                                     ------------        ----------

             Messages to and from the  base are summarized in the  following two
        tables.  Numbers in these tables are octal.  A comma separates  bytes in
        a message.  All bytes are considered to be unsigned.  The first  byte of
        a message is a type code.  The length of a message is a function  of the
        type code.   Any base-to-host  message which  is shown  as being  an odd
        number of bytes in length has an extra byte at the end, not shown, whose
        contents is of no  significance.  Thus all base-to-host messages  are an
        even number of bytes in length.

             The symbol "p"  indicates a host port  number, and it must  be less
        than  the base  port limit  (otherwise the  message is  invalid).  Other
        symbols are  explained below.  Any  message not listed  in the  table is
        invalid.





                    9.1.1  SUMMARY OF BASE-TO-HOST MESSAGES

        Message Format                  Message Name

            3                           Interface Reset by Base
            4                           Interface Reset by Host
            5                           Supervisor Reset
            6, p                        Externally-Initiated New Circuit
            7, p                        Internally-Initiated New Circuit
           10, p                        Backpressure On

                                           78                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


           11, p                        Backpressure Off
           12, p                        Character Gobbler
           13, p                        Circuit Zapper
           14, p                        Enter Deferred Echo Mode
           15, p                        Leave Deferred Echo Mode
           16, p                        Green Ball
           17, p                        Red Ball
           20, p                        Yellow Ball
           21, p                        Orange Ball
           25, p, 0                     Gray Ball
           25, p, 377                   Black Ball
           27, q, e                     Supervisor Response
           32, 0, d1, d2, d3, d4        Test Pattern Response
           40, p, tc, val               Terminal Characteristics Response
           43, 0, t1, t2, t3, t4        Supervisor Clock Data
           57, p                        Break Character
           60, p, d                     Port Status
        200+n, p, n bytes of data       Data Bytes





                    9.1.2  SUMMARY OF HOST-TO-BASE MESSAGES

        Message Format                  Message Name

            1                           Host is Open
            2                           Host is Shut
            3                           Zap All Circuits
           10, p                        Backpressure On
           11, p                        Backpressure Off
           12, p                        Character Gobbler
           13, p                        Circuit Zapper
           14, p                        Enter Deferred Echo Mode
           15, p                        Leave Deferred Echo Mode
           16, p                        Green Ball
           17, p                        Red Ball
           20, p                        Yellow Ball
           21, p                        Orange Ball
           22, p                        Hang Character
           23, p                        Enter Transparency Mode
           24, p                        Leave Transparency Mode
           26, q, 0                     Supervisor Request
           30, q, d                     Supervisor Login Character
           31, 0, d1, d2, d3, d4        Test Pattern Probe
           33, 0, x, x, u1, u2          Host Sad
           34, p                        Echo On
           35, p                        Echo Off
           36, p, tc, val               Set Terminal Characteristics
           37, p, tc                    Probe Terminal Characteristics
           41, np, hn1, hn2             Set Host Number
           42                           Supervisor clock request

                                           79                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


           61, p                        Enter Alternate Output Device Mode
           62, p                        Leave Alternate Output Device Mode
           63                           Set 4096 second timeout
           64                           Set 60 second timeout
           65, k                        Send key
           66, c                        Send cost
        200+n, p, n bytes of data       Data Bytes






                     9.2  ESTABLISHING COMMUNICATION WITH THE BASE


             When  the  interface is  reset  the base  initializes  the hardware
        connecting to the  host and sends circuit  zappers on all  circuits from
        this host,  and the supervisor  terminates all  circuit-building dialogs
        with the host  (v.i.).  The base  may reset the  interface spontaneously
        but infrequently (e.g.   when it goes down).   The host can  provoke the
        base to  reset the  interface by  either of  the following  actions: (1)
        failing to exercise the hardware interface to the base within  a certain
        period (32 seconds  for the 370); or  (2) sending an invalid  message to
        the base (type 4 is recommended for intentionally resetting).  After the
        interface has been reset by the base, the first message sent to the host
        will be an Interface Reset  by Base message.  No circuits will  be built
        to  this host  for approximately  two minutes  after  the base-initiated
        reset.  After the interface has  been reset at the request of  the host,
        the first message sent  to the host will  be an Interface Reset  by Host
        message.

             TYMNET considers each  host to be either  up or down.  A  host goes
        down when its  interface is reset.   A host comes  up when it  sends its
        base  a Set  Host Number,  Host  Open, Host  Shut, or  Zap  All Circuits
        message.  The  supervisor will  not build  circuits to  a host  which is
        down.

             TYMNET remembers a host number for each host.  When a base receives
        a Set Host Number message, if the hn byte of the message is  nonzero the
        host number for this host is set to hn.  If two hosts have the same host
        number confusion will result.  The  ^<host port limit> for this  host is
        set to the np field of the message if that is nonzero, otherwise  to 48.
        The  np  field  must be  less  than  or equal  to  the  base  port limit
        (otherwise the  message is invalid).   In addition, if  this is  not the
        first  Set  Host Number  message  since the  host  began  exercising the
        hardware interface  since the interface  was reset, circuit  zappers are
        sent on all  circuits from this host.   The Zap All Circuits  message is
        completely equivalent to a Set Host Number message with hn=0 and np=0.

             A host is considered to be  either open or shut.  The Host  is Open
        message causes the host to be open.  The Host is Shut, Set  Host Number,


                                           80                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


        and Zap All Circuits messages cause the host to be shut.  The supervisor
        will not build to a shut host circuits whose username does not have shut
        override.

             For  each host  the  base maintains  a 16-bit  variable  called the
        unhappy bits.  When the host sends  a Host Sad message, bytes u1  and u2
        are stored in the unhappy bits.  Bytes labeled x are ignored.   When the
        host sends a Host Sad message, and also approximately every 8.5 minutes,
        if the  unhappy bits are  nonzero a TYMNET  operator receives  a message
        which is  a function  of the  unhappy bits  and the  type of  host.  The
        unhappy bits are not affected when the host goes down or up.

             When the  host sends a  Test Pattern Probe  message, the  base will
        send a Test Pattern Response message  with the same data in the  d1, d2,
        d3, and d4 bytes.

             When a host comes up  or sends a Supervisor Clock  Request message,
        the base will send a  Supervisor Clock Data message.  Bytes t1,  t2, t3,
        and t4 form a 32 bit binary number (t1 is most significant) which is the
        number of  seconds since  GMT 00:00:00 1  January 1974.   The Supervisor
        Clock Request message is ignored for a 370 host.






                                 9.3  BUILDING CIRCUITS


             When a circuit  is built, one  end is the  initiating (origination)
        end, the other is the passive end.





                    9.3.1  EXTERNALLY-INITIATED CIRCUITS

             When a circuit is built whose  passive end is at a host,  that host
        receives an  Externally-Initiated New  Circuit message.   The supervisor
        selects a  free (v.i.)  port on the  host and  identifies its  host port
        number in the message.  The host port number will be less than  the host
        port limit.  The  following data bytes are  placed in the pipe  going to
        the passive end of the circuit, in order:

             (0)  The terminal type code for the circuit (v.i.).
             (1)  The high  6 bits  of the  node number  of the  initiating port
                (right justified).
             (2)  The  low 6  bits of  the node  number of  the  initiating port
                (right justified).
             (3)  The base or remote port number of the initiating port.


                                           81                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


             (4)  If the  username of  the circuit has  shut override,  41 octal
                (ASCII exclamation  point), otherwise  no data  byte is  sent in
                this position.
             (5)  The  upper  case  ASCII  characters  of  the  username  of the
                circuit.
             (6)  The  login  line  terminator  of  the  circuit  (semicolon  or
                carriage return).
             (7)  If the number of data  bytes in (0) through (6) is  odd, zero,
                otherwise no data byte is sent in this position.

             The data bytes  and control codes sent  by the initiating  end will
        follow the above information.   (But note that the above  information is
        subject to character gobblers.)





                    9.3.2  INTERNALLY-INITIATED CIRCUITS

             A host can initiate building a circuit; such a circuit is called an
        auxiliary circuit.  The host begins a circuit-building dialog by sending
        a Supervisor Request  message (to the  base).  The q  field ("requesting
        port")  of  this  message  identifies  this  particular circuit-building
        dialog.  There must not  be another circuit-building dialog  in progress
        by this host with the same q field.  All q fields must be less  than the
        base port limit (otherwise the message is invalid).

             When the supervisor is willing to proceed with the dialog  the host
        will receive a  Supervisor Response message  with a q  field identifying
        this dialog.  The e field will be zero.  Then the host sends  a sequence
        of Supervisor  Login Character messages.   Again, the q  fields identify
        the dialog.  The  d fields of these  messages contain the  login string,
        consisting of the following ASCII characters, in order:

             (1)  The string to be used as the username of the circuit.
             (2)  A colon.
             (3)  The decimal representation of  the host number of the  host to
                which the circuit is to  be built (the destination host);  or an
                asterisk,  signifying  the   host  number  of   the  supervisor.
                Destination host  number 197 indicates  a dialout  request.  The
                username must be valid on the destination host.
             (4)  The character to be used  as the login line terminator  of the
                circuit, which must be semicolon or carriage return.

             The supervisor  will select a  free (v.i.) port  on the host  to be
        used as the initiating port.  Its host port number will be less than the
        host port  limit.  If the  circuit is successfully  built the  host will
        then receive an Internally-Initiated New Circuit message giving  (in the
        p field) the initiating host port number.  (For the PDP10,  this message
        has  a  third  byte  containing  the  q  field  identifying  the  dialog
        responsible for this circuit.) This is followed by a Supervisor Response


                                           82                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


        message with a q field identifying this dialog and a zero e field.  This
        second Supervisor Response message ends the dialog.

             If the circuit  could not be built  (for any of the  reasons listed
        below), the  host will receive  a Supervisor Response  message with  a q
        field identifying  this dialog and  with a nonzero  error code in  the e
        field telling the reason for the failure:

        Error Code      Meaning

             1       Format error in login string;
             2       Username not in MUD;
             3       MUD unreadable due to disk error;
             4       Other  (including destination  host down,  destination host
                cannot be reached through the network, circuits busy, initiating
                or destination host out  of ports, destination host is  shut and
                username  does not  have shut  override, username  not  valid on
                destination host, etc.);
             5       Error related to dialout request;
             6        Timeout.  Host  was slow  in sending  login  string and/or
                network was slow in building circuit.

             This second Supervisor Response message ends the dialog.

             The supervisor does not require the host to supply the password for
        the username.

             At any time, the host may receive a Supervisor Reset message.  This
        message  indicates  that  the  supervisor  is  terminating  all circuit-
        building dialogs with this host.  This will be an infrequent occurrence.
        Note that a circuit may have been built even if the dialog is terminated
        in this  manner (instead  of by  a Supervisor  Response).  The  host may
        initiate the dialogs again  after receiving this message.  Also,  if the
        most recent of the  events (1) interface was  reset and (2) host  sent a
        Set Host Number message was (1), the host port limit is set to 48.

             Auxiliary circuits have  a terminal type code  of 0 and a  speed of
        120 cps.

             After a circuit has  been built the distinction  between initiating
        end and passive end is of no significance.













                                           83                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


                               9.4  TEARING DOWN CIRCUITS


             Either  end of  a circuit  can initiate  tearing the  circuit down.
        When the  host sends  a Circuit Zapper  message to  the base,  a circuit
        zapper  control code  is sent  on the  specified port.   When  a circuit
        zapper is sent on a port (including the cases of resetting the interface
        and using the Set Host Number  or Zap All Circuits messages -  v.s.), no
        subsequent messages may  be sent by  the host on  that port until  a new
        circuit is established on it; if they are, they will be discarded.

             After the  zapper is sent,  the next base-to-host  transmission may
        contain  messages from  that  circuit, but  no  subsequent transmissions
        will.  If there was a base-to-host transmission in progress at  the time
        the  zapper  is  sent  (not  possible  for  the  370   interface),  that
        transmission may  contain messages from  that circuit but  no subsequent
        transmissions will.  In any  case, if the port  number is used in  a new
        Externally-  or  Internally-Initiated  New  Circuit  message, subsequent
        messages will be from  the new circuit, not  the old one.  Also,  if the
        host receives a Circuit Zapper  message from a circuit, it  will receive
        no subsequent messages from that circuit.

             A port is either free or busy.  A free port becomes busy when it is
        assigned  to   a  circuit   by  the   supervisor.   Except   in  unusual
        circumstances, the host will be  notified that a port has  been assigned
        by an Externally- or  Internally-Initiated New Circuit message.   A port
        becomes free when a circuit zapper is sent on it.

             If a message arrives at a port from a circuit and messages  may not
        be delivered (because  a zapper was sent  on that port), the  message is
        discarded.






                                  9.5  USING CIRCUITS


             The base  sends the host  a Backpressure On  message when  the pipe
        leading out  of the  port becomes crowded.   The base  sends the  host a
        Backpressure Off message when the  pipe leading out of the  port becomes
        not crowded.  Initially the pipes of a circuit are not crowded.

             If a host sends messages (other than character gobblers  or circuit
        zappers) on the port while the pipe leading out of it is  crowded, there
        is an increased  chance of black balls  being created, i.e.   data loss.
        If  there   is  a  host-to-base   transmission  in  progress   when  the
        Backpressure On message is received (not possible on the 370),  the host
        may be unable to prevent some messages (i.e.  those that are part of the
        transmission in progress) from being  sent on the port.  It  is believed


                                           84                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


        that  up  to  150 data  bytes  may  be sent  in  this  situation without
        significantly increasing the chances  of black balls being  created.  It
        is possible, though unlikely, for black balls to be created even  if the
        host strictly obeys this backpressure protocol.

             The base considers  a host to be  willing to receive messages  on a
        port or not.  When a  circuit is built the host is  initially considered
        to  be  willing to  receive  messages on  the  port.  The  host  sends a
        Backpressure On message to indicate it is unwilling, and  a Backpressure
        Off message  to indicate  it is willing.   When a  host indicates  it is
        unwilling, the base will quickly stop delivering messages on  that port.
        However,  character  gobblers  and  circuit  zappers  will  be delivered
        regardless  of  the  host's  willingness.   The  rules  determining when
        messages will stop are  the same as in the  case where the host  sends a
        Circuit  Zapper message  (v.s.).  When  a host  is unwilling  to receive
        messages,  the messages  coming to  it  will back  up in  the  pipe, and
        eventually the sending  port will be notified  that the pipe  is crowded
        ("propagation of backpressure").

             The following  host-to-base messages  will cause  the corresponding
        control code to be sent on the port identified in the p field:
                     Circuit Zapper (v.s.)
                     Character Gobbler
                     Enter Deferred Echo Mode
                     Leave Deferred Echo Mode
                     Green Ball
                     Red Ball
                     Yellow Ball
                     Orange Ball
                     Hang Character
                     Enter Transparency Mode
                     Leave Transparency Mode
                     Enter Alternate Output Device Mode
                     Leave Alternate Output Device Mode

             The host-to-base messages  Echo On and  Echo Off are  equivalent to
        Set Terminal Characteristics(0, 1 and 0 respectively).

             For each circuit the base  has a variable for each of  the terminal
        characteristics numbered 0 through  5 inclusive.  All variables  are one
        bit in size except for 5 (Input  Baud Rate Code) which is 3 bits.   If a
        variable  is  set  to  a  value bigger  than  will  fit,  the  result is
        unspecified.

             If tc is less than 4, Set Terminal Characteristics(tc,  val) causes
        the base's variable  for terminal characteristic tc  to be set  to value
        val, and then four set terminal characteristics(tc2, val2) control codes
        to be  sent on the  circuit with values  of tc2 from  0 to  3 inclusive,
        where  val2   is  the  value   of  the  base's   corresponding  terminal
        characteristic   variable.    If   tc   is   4   or   5,   Set  Terminal
        Characteristics(tc,  val)  causes  the  base's  variable   for  terminal
        characteristic  tc to  be set  to value  val and  then two  set terminal


                                           85                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


        characteristics(tc2, val2) control codes to be sent on the  circuit with
        values  of tc2  of  4 and  5,  where val2  is  the value  of  the base's
        corresponding terminal characteristic variable.  If tc is between  6 and
        15  inclusive,   Set  Terminal   Characteristics(tc,  val)   causes  the
        corresponding control code to be sent on the circuit.

             If  tc  is  less  than  16  and  not  equal  to  5,  Probe Terminal
        Characteristics(tc) causes  the corresponding control  code to  be sent.
        Probe  Terminal  Characteristics(5)  causes  a  Terminal Characteristics
        Response(5, val) message to be sent to the host, where val is  the value
        of the  base's variable for  terminal characteristic 5.   Probe Terminal
        Characteristics(63)  is   exactly  equivalent   to  16   Probe  Terminal
        Characteristics(tc) messages with values  of tc from 0 to  15 inclusive.
        For other values of tc, Probe Terminal Characteristics(tc) is ignored.

             The Data Bytes message has a variable length format  (see summary).
        N must be in  the range 0 <= n  <= 177 octal.  The message  contains the
        type, which is  200 octal +  n, the host port  number, and n  data bytes
        which are to be sent on the circuit.

             Note that the following control codes cannot be sent by a host:

                     black ball
                     gray ball
                     break character
                     terminal characteristics response(tc, val)
                     port status(d)

             The  following  control  codes  arriving  on  a  circuit   cause  a
        corresponding message to be sent to the host (subject to the rules above
        about zapping and willingness):

                     circuit zapper (v.s.)
                     character gobbler
                     green ball
                     red ball
                     yellow ball
                     orange ball
                     black ball
                     gray ball
                     enter deferred echo mode
                     leave deferred echo mode
                     break character
                     terminal characteristics response(tc, val)
                     port status(d)

             When data bytes arrive from a circuit, the host will receive a Data
        Bytes message.  The data bytes are not necessarily grouped into base-to-
        host messages in the same groups in which they were sent.  The format is
        the same as for the host-to-base Data Bytes message.

             The following  control codes  are discarded when  they arrive  at a
        base port:

                                           86                           TYMNET-I
        BASE-HOST INTERFACE                                    November 12, 1981


             enter transparency mode
             leave transparency mode
             enter alternate output device mode
             leave alternate output device mode
             set terminal characteristics(tc, val)
             probe terminal characteristics(tc)
             hang character















































                                           87                           TYMNET-I
        ACCOUNTING                                             November 12, 1981






                                    10 - ACCOUNTING


             The  entire  accounting  process  is  completely  described  in the
        document TYMNET ACCOUNTING.  This chapter is merely a summary,  and will
        eventually  disappear  from  this  manual!   The  new  manual  should be
        referenced for the answers to any questions.

             TYMNET accounting gathers raw accounting for use in  billing TYMCOM
        customers.   It does  not gather  statistical TYMNET  data or  serve any
        other function.

             When  a  login  is  done,  the  supervisor  generates  the  initial
        accounting  for  the circuit.   The  supervisor forms  a  unique  24 bit
        invoice number to identify this session and sends it, together  with the
        usual login stuff, to the TYMCOM.  A type 7 supervisory message is used.
        the  first 8  bits of  the second  word contain  a port  number  and the
        remaining 24 bits are  the invoice number.  The supervisor  then records
        the  terminal type,  originating node,  port on  that  node, destination
        node, and  port on that  node.  Every 15-20  minutes the  TYMCOM reports
        back  the input  and output  character counts.   It may  also send  in a
        character string, such as project code, immediately after login,  or any
        other  time.  When  the session  is terminated,  the TYMCOM  reports the
        final  input  and  output  character  counts  and  the  reason  for  the
        termination.






                            10.1  SUPERVISORY MESSAGE FORMAT


             TYMNET passes  messages relating to  the network accounting  to the
        supervisor, of the form:

               --.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--
         SR1:  |1|  7  |    node number        |
               |-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-|
         SR2:  |  type |      high value       |
               |-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-|
         SR3:  |       low value               |
               ---------------------------------

             Type 7 supervisory messages  will be used for all  accounting data.
        At the beginning of a session the supervisor will send a type 7 with the
        port number  in the left  8 bits of  SR2 and the  invoice number  in the


                                           88                           TYMNET-I
        ACCOUNTING                                             November 12, 1981


        remaining 24 bits, to the  destination node just before the  Sup-type 5,
        type  11.  The  supervisor MAY  also send  a Sup-type  7 message  to the
        origination  node, with  a second  copy of  the invoice  number  and the
        origination port number.

             The  TYMCOM  sends Sup-type  7,  types 7-15  to  the  supervisor as
        appropriate.  Input  and output  character counts  are sent  every 15-20
        minutes, and when a session terminates.  The type field for a Sup-type 7
        is the left 4 bits of the second word.













































                                           89                           TYMNET-I
        CIRCUIT BUILDING                                       November 12, 1981






                                 11 - CIRCUIT BUILDING


             The following sequence of supervisory messages is used  in TYMNET-I
        to build an auxiliary circuit.  Messages from Base to Sup are designated
        by "*".  Numbers are octal.

             1. Base requests to initiate a login:

                --------.-------.-------.-------.-------.--------
                |*|5| node #    |   0   |  Key  |   5   |   0   |
                -------------------------------------------------

             2. Sup tells base to proceed:

                --------.-------.-------.-------.-------.--------
                | |5| node #    |   0 **|  Key  |   5   |   0   |
                -------------------------------------------------

             3. Base sends the number of the host origination the request:

                --------.-------.-------.-------.-------.--------
                |*|5| node #    |   Host No.    |   4   |  Key  |
                -------------------------------------------------

             Next,  the  base   sends  the  login   stream,  with  one   or  two
        characters/message.  Only the low 7  bits of the character are  used for
        the username:

                --------.-------.-------.-------.-------.--------
                |*|1| node #    |    2*Key+1    |   0   | Char  |
                -------------------------------------------------
                                    -- or --
                --------.-------.-------.-------.-------.--------
                |*|4| node #    |    2*Key+1    | Char 1| Char 2|
                -------------------------------------------------

             SR2 contains the odd buffer number corresponding to the key.

             The username  string is terminated  by:  a) a  ";",  b)  a carriage
        return,  or c) the message:

                --------.-------.-------.-------.-------.--------
                |*|5| node #    |   0   |  Key  |   5   |   0   |
                -------------------------------------------------

             4.  If successful, the Sup responds with an acknowledgement:

                --------.-------.-------.-------.-------.--------

                                           90                           TYMNET-I
        CIRCUIT BUILDING                                       November 12, 1981


                | |5| node #    | Host# | Port# |   12  |  Key  |
                -------------------------------------------------

             5.   In  any  case,  the  supervisor  responds  with  a termination
        message:

                --------.-------.-------.-------.-------.--------
                | |5| node #    | 200   |  Key  |   5   | Err.  |
                -------------------------------------------------

             Err. =  0 indicates successful  logon;  otherwise it  indicates the
        reason for failure:

                1         Format error;
                2         Bad User Name;
                3         Bad Mud;
                4         System Unavailable;
                5         Down-line load or dial-out request failure;
                6         Timeout;
                7         Access not permitted;
                8         Out of origination ports;
                9         Sup will not honor request at this time...try later.

             Notes:  "Key"  is an 8-bit  number which  is NOT a  port.  It  IS a
        pseudo-port, in the sense that it is used to derive the "host  no." that
        is  originating the  circuit.   The ack.  message (type  5,  subtype 12)
        relates the key with the port number assigned by the supervisor  for the
        new circuit.  The standard convention is that, when a job in the host is
        requesting a circuit, the port  number of the requesting job is  used as
        the key.  This obviously cannot be used if the host is requesting an aux
        circuit which is  not connected to  a Tymnet port.   The key can  be any
        port number which may be legal for that host, even if the host  does not
        have that many real ports (e.g., host 2 on a 2-host superbase  has ports
        128d--255d available, even if it can accept only 64 ports...it  thus has
        real ports 128d--191d,  but can use keys  128d--255d).  A host  may have
        only one request outstanding per key, but can have multiple simultaneous
        requests, each with a different key.

             The Sup may respond  with the termination message (type  5, subtype
        5)  if the  logon request  is  not completed  within 20  seconds  of the
        proceed message.  Then  there is a further  timeout of 1 minute  for the
        supervisor to build the circuit successfully.

             In 2.,  the "**" indicates  the relative host  number, ONLY  if the
        base is a "dual base".  The field is undefined for other base types.









                                           91                           TYMNET-I
        CIRCUIT BUILDING                                       November 12, 1981


                      11.1  TIME-SEQUENCE OF SUPERVISORY MESSAGES


             The question  occasionally arises  as to  the order  the supervisor
        issues messages relating to  the building of circuits, and  the relation
        of these to accounting messages.  The following shows,  in time-sequence
        order, the  relationship of  the messages  from the  sup and  the nodes.
        "==>" indicates the direction of the message.

        ACCT    SUP     NODE            Usage
        FILE
        ==============================================================
                The sup has a new circuit, and has decided
           on the path:

            <===   7==> dest            generate invoice number
                   7==> ISIS origin     ONLY for ISIS nodes
            <===   1==> dest            TID, origin, destination, username
                   2==> all but origin  build permuter table changes
                        (unless aux
                         circuit, then
                         all)
                   <==2 all but origin  acknowledge permuter table change
                        (as above)

                If NOT an auxiliary circuit, when all
           changes are ack'ed, then:
                   2==> origin node     final connection of permuter table in
                                        originating node
                   <==2 origin node     node ack's permuter table change

                Finally:
                   5==> dest            sup tells dest of circuit existence

            <===   <==7 dest            invoice number when project code is
                                        completed
            <===   <==7 dest            project code chars

                At intervals of approximately 15-20 min.,
           the destination will send accounting updates:
            <===   <==7 dest            invoice #
            <===   <==7 dest            current input and output char counts

                When session finally terminates:
            <===   <==7 dest            invoice number
            <===   <==7 dest            final input and output counts, reason
                                        for termination
                   <==3 dest            dest reports to sup, circuit is gone
                   <==3 origin (aux.)   aux. circuit originator reports too





                                           92                           TYMNET-I
        Summary of TYMNET-I LEP Messages                       November 12, 1981






                     APPENDIX I.   Summary of TYMNET-I LEP Messages



             Supervisor messages consist of 3 16-bit records, and are of format:

                <------SR1------> <------SR2-----> <------SR3------>
                |dttt00nnnnnnnnnn|................|................|

                where:

                d       direction bit (0=down, 1=up)
                t       message type
                n       node number (dest. on down, source on up)
                "."     unused or indeterminate

             These are abbreviated thus:

                                        <------SR2------> <------SR3------>
        t   descr                       |................|................|

                where:

                t       message type (and subtype)
                "."     unused field


                             ---  Downstream Messages  ---

        0   Untaker (Broadcast)         |0010010010111111|....NNNNNNNNNNNN|
            Takeover                    |0101101101SSSSSS|...............N|
        1   Put Chars in Buffer         |BBBBBBBBBBBBBBBB|FFFFFFFFSSSSSSSS|
        2   Change P-table              |QLLLLL..CCCCCCCC|GG..BBBBBBBBBBBB|

        3   Change Memory               |0AAAAAAAAAAAAAAA|VVVVVVVVVVVVVVVV|
            MISC:
        3.0  Logon Char Response        |1XXXXXXXXX000000|IEQ..PPPPPPPPMMM|
        3.1  Permanent-hang Query       |1000000000000001|0000000000000000|
        3.2  Permanent-hang Disable     |1000000000000010|PPPPPPPPPPPPPPPP|
        3.3  Permanent-hang Enable      |1000000000000011|PPPPPPPPPPPPPPPP|
        3.4  Clear Buffer               |1.........000100|BBBBBBBBBBBBBBBB|
        3.5  Zap Circuit                |1.........000101|BBBBBBBBBBBBBBBB|
        3.10 Host Rejection             |1.........001000|HHHHHHHHHHHHHHHH|
        3.11 Lineout Report Acknowledge |1.........001001|...........LLLLL|
        3.12 Set Congestion Time        |1.........001010|TTTTTTTTTTTTTTTT|
        3.14 Go to Bootstrap            |1.........001100|...........LLLLL|
        3.16 Report Line Speeds         |1.........001110|................|
        3.17 Download Neighbor          |1.........001111|LLLLLLCCCCCCCCCC|


                                           93                           TYMNET-I
        Summary of TYMNET-I LEP Messages                       November 12, 1981


        4   Read Memory                 |0AAAAAAAAAAAAAAA|0BBBBBBBBBBBBBBB|
            Read Range                  |1AAAAAAAAAAAAAAA|0BBBBBBBBBBBBBBB|

        5   Logon Status:
        5.5  Internal Logon             |0.....AAKKKKKKKK|00000101........|
             I/L Terminated             |1.......KKKKKKKK|00000101EEEEEEEE|
        5.11 External Logon             |........PPPPPPPP|00001001.......Q|
        5.12 I/L Success                |H.....AAPPPPPPPP|00001010KKKKKKKK|

        6   Supervisor Time             |HHHHHHHHHHHHHHHH|LLLLLLLLLLLLLLLL|
        7   Invoice Number              |PPPPPPPPHHHHHHHH|LLLLLLLLLLLLLLLL|


                              ---  Upstream Messages  ---

        0   Takeover Response           |TTCHHHHHHHLLLLLL|VVVVVVVVVVVVVVVV|
        1   Single Logon Character      |BBBBBBBBBBBBBBBB|........CCCCCCCC|
        2   REJECT                      |******SR2*******|*******SR1******|

        3   Report Memory               |0AAAAAAAAAAAAAAA|VVVVVVVVVVVVVVVV|
           REPORTS:
        3.0  Circuit Zapped             |1.........000000|BBBBBBBBBBBBBBBB|
        3.1  Permuter Change Acknowledge|1.........000001|VVVVVVVVVVVVVVVV|
        3.2  Host Up/Down               |1PPPPPPPPP000010|U0AAHHHHHHHHHHHH|
        3.3  Buffer Zapped              |1SSSSSSSSS000011|BBBBBBBBBBBBBBBB|
        3.4  Line Reset                 |1.........000100|..........LLLLLL|
        3.5  Line Out                   |1PPPPPPPPP000101|..........LLLLLL|
        3.6a  Line Error                |1.........000110|EEEEEEEEEELLLLLL|
        3.6b  Line Speed                |1W.....SSS000110|0000000000LLLLLL|
        3.7a  Line Overload             |1.........000111|VVVVVVVVVVLLLLLL|
        3.7b  Supe. Congested           |1...LLLLLL000111|0000000000LLLLLL|
        3.10 Host Unhappy               |1HHHHHHHHH001000|SSSSSSSSSSSSSSSS|
        3.11 Bad Acknowledge            |1.........001001|CCCCCCCCCCLLLLLL|
        3.12 Temperature                |1.........001010|TTTTTTTTTTTTTTTT|
        3.14 Tymcom Trace               |1TTTTTTTTT001100|VVVVVVVVVVVVVVVV|
        3.20 Checksum Error             |1RCCCCCCCC010000|AAAAAAAAAAAAAAAA|
        3.21 Loopback                   |1.........010001|CCCCCCCCCCLLLLLL|
        3.23 Node Overloaded            |1.........010011|CCCCCCCCCCCCCCCC|
        3.24 Line Snipped               |1......EEE010100|..........LLLLLL|
        3.25 TYMCOM Sync Retransmission |1HHHHHHHHH010101|...CCCCCCCCCCLLL|
        3.26 Crash Report               |1.....EEEE010110|LLLLLLLLLLLLLLLL|
        3.27 TYMCOM Sync Errors         |1HHHHHHHHH010111|...CCCCCCCCCCLLL|
        3.30 TYMCOM Sync Out            |1HHHHHHHHH011000|S............LLL|
        3.31 Retransmission Received    |1.........011001|CCCCCCCCCCLLLLLL|
        3.32 Retransmissions            |1.........011010|CCCCCCCCCCLLLLLL|
        3.33 Back-talk                  |1.........011011|CCCCCCCCCCLLLLLL|
        3.34 Bad Bootstrap Checksum     |1.........011100|................|
        3.35 Download Acknowledge       |1.........011101|................|
        3.36 Sup Clock Report           |1.....XX..011110|AAAAAAAAAAAAAAAA|
        3.37/.77 Dead-end Autodetect    |1XXXXXXXXXX11111|LLLLLLCCCCCCCCCC|
        3.40 New Line-Error Report      |1PPPPPPPPP100000|OOOOOOOOOOOOLLLL|
        3.41 New Line-RTS Report        |1PPPPPPPPP100001|OOOOOOOOOOOOLLLL|
        3.42 New Line-RTR Report        |1PPPPPPPPP100010|OOOOOOOOOOOOLLLL|

                                           94                           TYMNET-I
        Summary of TYMNET-I LEP Messages                       November 12, 1981


        3.43 LEP 2 Channel in use       |1BBBBBBBBB100011|LLLLLLCCCCCCCCCC|
        3.7N Isis-slot N Diagnostic     |10XXXXXXXX111NNN|YYYYYYYYXXXXXXXX|

        4   Logon Char Pair             |BBBBBBBBBBBBBBBB|FFFFFFFFSSSSSSSS|

        5  MISC:
        5.1  Port Hung                  |00000000PPPPPPPP|0000000100000000|
        5.2  Permanent Port Hung        |00000000PPPPPPPP|0000001000000000|
        5.3  Permanent Hang Query Resp. |00000000PPPPPPPP|000000110000000X|
        5.4  Aux Orig. Host No.         |QPHHHHHHHHHHHHHH|00000100KKKKKKKK|
        5.5  Aux Circuit Req.           |........KKKKKKKK|00000101........|
        5.6  Host Status Change         |HHHHHHHHHHHHHHHH|00000110SSSSSSSS|

        6   Read P-table Range          |0SSSSSSSSSSSSSSS|0EEEEEEEEEEEEEEE|
           MISC:
        6.0  Report Key                 |1KKKKKKKKK000000|AAHHHHHHHHHHHHHH|
        6.1  Report Cost                |1CCCCCCCCC000001|AAHHHHHHHHHHHHHH|
        6.2  Set Out-of-ports           |1.........000010|AAHHHHHHHHHHHHHH|
        6.3  Clear Out-of-ports         |1.........000011|AAHHHHHHHHHHHHHH|
        6.4  Request GMT Time           |1.........000100|................|
        6.5  Declare H-IQ & Type        |1QTTTTTTTT000101|AAHHHHHHHHHHHHHH|
        6.6  Orig. Host No. (Norm.)     |1BBBBBBBBB000110|X0HHHHHHHHHHHHHH|

        7   Accounting                  |SSSSHHHHHHHHHHHH|LLLLLLLLLLLLLLLL|






























                                           95                           TYMNET-I
        Summary of TYMNET-I Virtual Terminal Codes             November 12, 1981






               APPENDIX II.   Summary of TYMNET-I Virtual Terminal Codes



             A set of one and two-character quantities are set aside  to provide
        out-of-band control functions.  These are abbreviated thus:

        t   descr                                        <________|
                            - or -
        t.* descr                                   <________|********>

                where:

                t       message type (and subtype)
                "_"     individual bits
                "|"     byte delimiter
                "<"     applies only in direction TO terminal
                ">"     applies only in direction FROM terminal


                        ---  Virtual Terminal Control Codes ---

        0.X  Escape code                            <00000000|XXXXXXXX>

        1.X  Prefix code:                           <00000001|XXXXXXXX>
        1.0   Echo Control (OBS)                    <00000001|0000xxxx|
        1.1   CR delay & Input baud rate (OBS)      <00000001|0001drrr|
        1.3   Input Baud Rate                       <00000001|0011rrrr>
        1.4   Parameter D **                        <00000001|0100dddd>
        1.5   Parameter C **                        <00000001|0101cccc>
        1.6   Parameter B                           <00000001|0110bbbb>
        1.7   Parameter A                           <00000001|0111aaaa>
        1.10  Output Baud Rate                      <00000001|1000rrrr>
        1.11  Query Field Parameter M ***           <00000001|1001MMMM|
        1.12.N  Query Bit Parameter N ****          <00000001|101NNNN_|
        1.14.N  Set Bit Parameter N ****            <00000001|110NNNNx>
        1.16  Not used
        1.17.0  Hang Character                      <00000001|11110000|
        1.17.1  Turnaround Hang Character           <00000001|11110001|
        1.17.2  Enter Transparency                  <00000001|11110010|
        1.17.3  Leave Transparency                  <00000001|11110011|
        1.17.4  Enter Alternate Output Device       <00000001|11110100|
        1.17.5  Leave Alternate Output Device       <00000001|11110101|
        1.17.6  SIIX                                <00000001|11110110>
        1.17.7  TIIX                                <00000001|11110111>
        1.17.12 Break End                           <00000001|11111010>
        1.17.13 Break Begin                         <00000001|11111011>
        1.17.14 Grey Ball                           <00000001|11111100>
        1.17.15 Black Ball                          <00000001|11111101>

                                           96                           TYMNET-I
        Summary of TYMNET-I Virtual Terminal Codes             November 12, 1981


        1.17.16 Orange Ball                         <00000001|11111110>
        1.17.17 Yellow Ball                         <00000001|11111111>

        2   Gobbler                                      <00000010>
        3   Zapper                                       <00000011>
        4   Leave-Defered-Echo-Mode                      |00000100>
        5   Green Ball                                   <00000101>
        6   Red Ball                                     <00000110>
        7   Enter-Defered-Echo-Mode                      |00000111>

                                         NOTES

             **      These codes use "C-MAP";  the 4-bit value passed  is mapped
                into the associated quantity:

         VALUE  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15
          MAP   0   1   2   3   4   5   7  10  14  19  26  36  50  69  95 131


             ***     The specific use of "M" is:

                  M     Parameter

                  3     Input baud-rate
                  4     Parameter D
                  5     Parameter C
                  6     Parameter B
                  7     Parameter A
               [10; 8]  Output baud-rate


             ****    Bit parameters have the following mapping:

        N       Use

        0       Echo Control
        1       Echo Control-I
        2       Echo CR with CR/LF
        3       Echo LF with LF/CR/Rubout
        4       Half-Duplex
        5       Parity
        6       Xon/Xoff Enable
        7       CR Delay
        10      Echo Control-H
        11      Reverse X-enable
        12      Katakana
        13      Terminate-Output-On-Break-Detected







                                           97                           TYMNET-I
                                        GLOSSARY               November 12, 1981


        BAUD                 -- A unit of signaling speed, meaningful  in analog
                                 transmission.  The speed in baud is  the number
                                 of code elements per second (as opposed  to the
                                 number  of  bits per  second).   E.g.  110 baud
                                 transmits 80 bits/second;   typical synchronous
                                 modems transmit  at 1200  baud, no  matter what
                                 the bit  rate--in this case, one  baud contains
                                 several bits.

        BORI                 -- Beginning of  record indicator.  This  is alter-
                                 nately referred to  as a sync pattern, indicat-
                                 ning the beginning of a data packet.   When the
                                 Supervisor discovers a topological  anomaly, it
                                 will remove the offending node from the network
                                 by causing the   neighbors to use  an incorrect
                                 BORI.   This is called a BORI zap.

        DESTINATION          -- The point to which a circuit is built.

        DOWNSTREAM           -- Downstream is the  direction away from  the Sup-
                                 ervisor.  A node is considered to be downstream
                                 of another  node if it  is a descendant  of the
                                 other node in the tree structure of Supervisory
                                 control. For a node to have a downstream switch
                                 of 0, means that there are no -- and have never
                                 been --  descendants of that  node in  the tree
                                 structure.

        FIELD                -- A  subdivision  of  an  information  unit, which
                                 carries  a  certain type  or  classification of
                                 information -- e.g. label field, etc.

        HOT-LINE             -- A variation  of dedicated-line service,  where a
                                 circuit  is  automatically  constructed   to  a
                                 particular destination on a demand basis.

        IIX                  -- Interface    Information    eXchange.     Allows
                                 interfaces  in   the  network   to  communicate
                                 information, such as dialects, at a level below
                                 that of the end-user.  Each end of  the circuit
                                 must know that the other end is capable  of IIX
                                 (pronounced eeks) before communication begins.

        INTERNAL CIRCUIT     -- An internal circuit termination starts and stops
                                 on the same node.









                                           98                           TYMNET-I
                                        GLOSSARY               November 12, 1981



        LINE                 -- A  line  is a  physical  connection  between two
                                 network nodes.  If one or both of the nodes are
                                 TYMNET-I, then the line must connect to  a sync
                                 port on each machine.  A line is initialized by
                                 a special packet  called a reset.   Resets must
                                 be successfully exchanged by the two nodes on a
                                 line before the line can come up and be used to
                                 carry network traffic.  If  a line is up  and a
                                 reset is detected,  the line will be  marked as
                                 out.

        LINK                 -- A link is a logical connection between  two net-
                                 work nodes.   If one  or both  of the  nodes is
                                 TYMNET-I, the link must consist of one and only
                                 one sync line.  Two nodes having a link between
                                 are said  to be  neighbor nodes.   For TYMNET-I
                                 nodes, the terms line and link  are synonymous.
                                 A link is assigned to a particular line number,
                                 and  the  Supervisor  assumes  the  link  is up
                                 unless the nodes report otherwise.

        MODEM                -- A  combination   of  the  words   MOdulator  and
                                 DEModulator.   The  MOdulator  converts signals
                                 (usually  d.c.  pulses) from  a  source  into a
                                 signal suitable  to the characteristics  of the
                                 (analog) transmission medium.   The DEModulator
                                 performs the reverse function.

        NAME                 -- That  attribute  of  an entity  by  which  it is
                                 referenced  or  described;   an  example  is an
                                 address.

        NODE TYPES           -- There are ten node types:  0 = small remote, 1 =
                                 small  base, 2  = small  dual base,  3  = super
                                 remote, 4 =  super base -  one host, 5  = super
                                 base - 2 hosts, 6 = super base - 3 or  4 hosts,
                                 7 = engine remote, 8 = enhanced  engine remote,
                                 and 9 = TYMNET-II node.

        ORIGINATION          -- The place where a circuit is initiated.

        OVERLOAD             -- Overload is a  condition which indicates  a link
                                 has  reached  the maximum  traffic  level which
                                 provides adequate throughput to  user circuits.
                                 When a node  reports a link as  overloaded, the
                                 Supervisor  increases  the  cost  of  the link.
                                 Where  alternate  paths  exist,  this  has  the
                                 effect of routing new circuits around a heavily
                                 loaded link.




                                           99                           TYMNET-I
                                        GLOSSARY               November 12, 1981



        PORT                 -- The name  of the  smallest discrete  entity used
                                 for communications  which is  common to  two or
                                 more  independent domains  and by  which  it is
                                 known  to  the  administration   managing  each
                                 domain--the name  by which the  two administra-
                                 tions  refer to  the entity  when communicating
                                 with one another.

        PVC                  -- Permanent-Virtual-Circuit  --  A  hot-line  with
                                 added  intelligence  --  capable  of  alternate
                                 routing, multiple alternate destinations, etc.

        TAKEOVER             -- A Supervisor takes over a network by discovering
                                 the current status of the network  and creating
                                 a  representation  of this  status  in  its own
                                 memory and winning the allegiance of  the nodes
                                 in the  network. A  takeover is  completed when
                                 the upstream pointers of all nodes point toward
                                 the node the Supervisor is running on.

        TIMEOUT              -- A timeout occurs  whenever the allotted  time to
                                 execute   a   command   has   expired   without
                                 successful execution.

        UPSTREAM             -- Upstream is the direction toward the Supervisor.
                                 A node is considered to be upstream  of another
                                 node if it is  an ancestor of that node  in the
                                 tree  structure   of  Supervisory   control.  A
                                 Supervisor  has an  upstream of  "0"  since the
                                 Supervisor is the root of the tree.

        ZAPPER               -- A circuit  zapper is  a message  that completely
                                 erases a circuit  from the network.   A circuit
                                 may be zapped by a host, by a link  going down,
                                 or when a user logs off and disconnects  from a
                                 terminal.

















                                          100                           TYMNET-I
                                         INDEX                 November 12, 1981




        201 LINE  11                          EDEM  60
                                              EMPTY  10
                                              ENTER ALTERNATE OUTPUT DEVICE
        AUXILIARY CIRCUIT  31, 47, 82            MODE  63
                                              ENTER TRANSPARENCY MODE  63
                                              ENTERING-DEFERED-ECHO-MODE  60
        BASE  see TYMCOM, 77
        BASE PORT LIMIT  77
        BAUD  98                              FIELD  98
        BEGINNING-OF-RECORD-INPUT  12         FLAGS  9
        BLACK BALL  4, 64                     FLAGS, BUFFER  9
        BORI  12, 98                          FREE PORT  84
        BR  18
        BREAK BEGIN  64
        BREAK END  63                         GCI/WCI BUFFER  8
        BUFFER DESCRIPTORS  5, 8              GLASS BALL  63
        BUFFER FLAGS  9                       GOBBLER  59
        BUFFER POOL  8                        GRAY BALL  64
        BUFFER RESTRICTIONS  18               GREEN BALL  60
        BUFFER ZAP  10                        GROUP  9
        BUFFER, GCI/WCI  8
        BUFFERLET  8
        BUSY PORT  84                         H-IQ  49
                                              HANG CHARACTER  63
                                              HOST ANSWERED  47
        C-MAP  59, 97                         HOST COMPUTERS  1
        CHANNEL  18                           HOST DOWN  36, 80
        CHANNELS  2                           HOST NUMBER  80
        CHARACTER GOBBLER  4, 29              HOST OPEN  80
        CIRCUIT  1, 4                         HOST SHUT  47, 80
        CIRCUIT DESTINATION  1, 81            HOST UP  36, 80
        CIRCUIT INITIATION  81                HOT-LINE  98
        CIRCUIT ORIGINATION  81
        CIRCUIT ORIGINATOR  1
        CIRCUIT SPEED  18                     IIX  98
        CIRCUIT TERMINATION  81               INITIATION, CIRCUIT  81
        CIRCUIT ZAPPER  4, 26, 29, 35         INPUT BAUD RATE  60
        CONTROL CODES  4                      INTERNAL CIRCUIT  98
        CPU LOAD CAPACITY  6                  INVOICE NUMBER  33
        CRASH  41, 50                         ISIS DIAGNOSTICS  45


        DATA BYTES  4                         LDEM  60
        DELAY  73                             LEAVE ALTERNATE OUTPUT DEVICE
        DESTINATION  98                          MODE  63
        DESTINATION, CIRCUIT  81              LEAVE TRANSPARENCY MODE  63
        DOWN, HOST  80                        LEAVING-DEFERED-ECHO-MODE  60
        DOWNLOADING  30, 43                   LEPRECHAUN  53
        DOWNSTREAM  53, 98                    LINE  99
        DOWNSTREAM LINES  24                  LINE ERRORS  37
        DOWNSTREAM SWITCH  25, 50             LINE OVERLOAD  20, 37

                                          101                           TYMNET-I
                                         INDEX                 November 12, 1981




        LINK  99                              QUERY FIELD PARAMETER  61
        LOAD CAPACITY  6                      QUERY HALF-DUPLEX  62
        LOAD REQUIREMENTS  7                  QUERY KATAKANA  62
        LOGICAL RECORD  12                    QUERY PARITY  62
        LOGIN STATE  67                       QUERY REVERSE X-ENABLE  62
                                              QUERY TERMINATE-OUTPUT-ON-BREAK-
                                                 DETECTED  62
        MARKING STATE  11                     QUERY XON/XOFF ENABLE  62
        MASTER USER DIRECTORY  3
        MODEM  99
        MUD  3                                RECEIVER, SYNC. LINE  15
        MULTIPLEXED-PACKET NETWORK  1         RED BALL  60
                                              REMOTE  see TYMSAT
                                              REPORTS  35
        NAME  99                              RESERVE TANK  10
        NODE STRUCTURE  5                     RESET  36, 40, 80
        NODE TYPES  99                        RMAKE  20
        NORMAL CIRCUIT  27                    RTD  18


        OPEN, HOST  80                        SECTORS, SYNC. LINE  13
        ORANGE BALL  64                       SET BIT PARAMETER  62
        ORIGINATION  99                       SET C/R DELAY  63
        ORIGINATION, CIRCUIT  81              SET ECHO C/R WITH L/F  62
        OUTPUT BAUD RATE  61                  SET ECHO CONTROL  62
        OVERLOAD  99                          SET ECHO CONTROL-H  63
                                              SET ECHO CONTROL-I  62
                                              SET ECHO L/F WITH C/R  62
        PACKET TEXT  12                       SET HALF-DUPLEX  62
        PARAMETER A  61                       SET KATAKANA  63
        PARAMETER B  61                       SET PARITY  63
        PARAMETER C  60                       SET REVERSE X-ENABLE  63
        PARAMETER D  60                       SET TERMINATE-OUTPUT-ON-BREAK-
        PARAMETER-C MAPPING  59                  DETECTED  63
        PASSWORD  68                          SET XON/XOFF ENABLE  63
        PERMUTER TABLE  26, 51                SHUT, HOST  80
        PERMUTER TABLES  18                   SIIX  63
        POOL OF BUFFERLETS  8                 SPEED  4
        PORT  4, 100                          SUPERVISOR  3
        PROCESS LOAD REQUIREMENTS  7          SUPERVISOR CONGESTION  29, 37
        PUT-CHARS-IN-BFR MESSAGE  26, 32      SUPERVISOR'S AREA  24, 50
        PVC  100                              SUPERVISORY MESSAGE  24
                                              SUPERVISORY MESSAGES  3
                                              SYNC LINE  11
        QUERY BIT PARAMETER  61               SYNC. LINE RECEIVER  15
        QUERY C/R DELAY  62                   SYNC. LINE SECTORS  13
        QUERY ECHO C/R WITH L/F  62           SYNC. LINE TRANSMITTER  17
        QUERY ECHO CONTROL  62                SYNCHRONOUS COMMUNICATIONS  2
        QUERY ECHO CONTROL-H  62
        QUERY ECHO CONTROL-I  62
        QUERY ECHO L/F WITH C/R  62           TAKE OVER  26

                                          102                           TYMNET-I
                                         INDEX                 November 12, 1981




        TAKEOVER  100
        TAKEOVER RESPONSE  26, 34
        TC'S  66
        TERMINAL CHARACTERISTICS  66
        TERMINAL ID  65
        TERMINAL IDENTIFICATION
           CHARACTER  65
        TERMINAL TYPE  65
        TERMINALS  1
        TERMINATION, CIRCUIT  81
        TIC  65
        TID  65
        TIIX  63
        TIMEOUT  100
        TRANSMITTER, SYNC. LINE  17
        TREE  24
        TURNAROUND HANG CHARACTER  63
        TYMCOM  2, 31, 51
        TYMCOM PORT  4
        TYMSAT  1, 51, 65
        TYMSAT PORT  4


        UNHAPPY BITS  38, 81
        UNTAKER  25
        UP, HOST  80
        UPSTREAM  53, 100
        UPSTREAM LINE  24
        USERNAME  3, 68


        YELLOW BALL  64


        ZAPPER  59, 100

















                                          103                           TYMNET-I
    8S8v