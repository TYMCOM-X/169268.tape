*       LSTMIN.FTF (PERSTATS:38)

*       THIS PROGRAM GATHERS OUTPUT FROM THE "LSTMIN" PROBE COMMAND

*       JO ANN JOELS AUG 88

*       STORAGE DECLARATIONS

        INTEGER PORT, MTRPOS, PROMPT, IDATE(2), TDATE, ERRD,
     +  STIME, SDATE, ERRT, ERRCKT, NUMCIR, MNTMOD, MTIME,
     +  CDATE, CTIME, XCOM, ITIME, TTIME,
     +  GNAME(4),GNAMES(4),GHOSTI(4),GHOSTS(4),XNAMES(4),XNAME(4),
     +  XPASS(3),XPASSS(3),GHOST,BTIME,EXIT(5)

        

*       COMMON DATA SHARED WITH SUBROUTINE

        COMMON /AUX/ PORT
        COMMON /OUTPOS/ MTRPOS
        COMMON /GATE/GNAME,GHOST
        COMMON /XRAY/XNAME,XPASS

*       PROMPT (58) IS THE COLON SIGNALING END OF PROBE OUTPUT

        DATA PROMPT /58/

        DATA EXIT/4,69,88,73,13/

*       CONVERT CURRENT DATE TO YYMMDD FORMAT

        CALL DATE (IDATE)
        CALL DATCON (IDATE, TDATE, ERRD)
        IF (ERRD .EQ. -1) GOTO 997
        CALL TIME(ITIME)
        CALL TIMCON(ITIME,TTIME,ERRT)

*       SET LAST DATE AND TIME COLLECTED TO CURRENT DATE AND TIME TO
*       INSURE THAT DATA WILL BE COLLECTED UPON STARTUP OF PROGRAM
        CDATE = TDATE
        CTIME = TTIME

*       OPEN LOG FILE FOR RECORDING CIRCUIT BUILDS, FAILURES, AND OTHER
*       ERROR CONDITIONS.

        OPEN (22, '(PERSTATS)LSTMIN.LOG', RANDOUT)

*       WRITE 2 BLANK LINES TO LOG FILE.

        MTRPOS = SIZE(22) + 1
        WRITE (22#MTRPOS, 5015),TDATE,TTIME
5015    FORMAT (1X/,'PROGRAM STARTUP: ',I6,1X,I4)

*       GET PROGRAM START TIME, STOP STIME, AND MINIMUM TIME BETWEEN
*       SNAPS FROM THE CONTROL FILE.

        OPEN (24, '(PERSTATS)LSTMIN.CTL',INPUT)
        READ (24, 5020) BTIME,STIME,MTIME
5020    FORMAT (3I)
        CLOSE(24)

*       MAKE SOME TESTS TO SEE IF TIME TO TAKE ANOTHER SNAP

*       GET CURRENT DATE AND TIME

60      CALL TIME (ITIME)
        CALL TIMCON (ITIME, TTIME, ERRT)
        CALL DATE (IDATE)
        CALL DATCON (IDATE, TDATE, ERRT)

*       IF CURRENT TIME OF DAY IS PAST THE STOP TIME FROM THE CONTROL
*       FILE, THEN STOP THE PROGRAM. DONE FOR THE DAY.

70      IF (TTIME.LT.BTIME .OR. TTIME.GE.STIME) GOTO 998


*	IF LESS THAN MINIMUM TIME SINCE LAST SNAP GET NEXT RECORD

80      LTIME=TTIME-CTIME
        IF (CDATE.LT.TDATE) LTIME=1440
	IF (LTIME .LT. MTIME) GOTO 60

*       BUILD CIRCUIT TO PROBE

100     ERRCKT = 0
        CALL PBCIR (ERRCKT)
        IF (ERRCKT .NE. 0) GOTO 300

*       CIRCUIT BUILT

*       MTRPOS=SIZE(22)+1
*       WRITE (22#MTRPOS, 5025) TTIME
*5025    FORMAT ('LOGGED IN TO PROBE. TIME =', I5)
*       MTRPOS=SIZE(22)+1

*       EXECUTE THE LSTMIN COMMAND.

110     CALL LM (TDATE,TTIME)
*       EXIT FROM PROBE
        CALL SEND (EXIT)

*       UPDATE COLLECTION DATE AND TIME
        CDATE = TDATE
        CTIME = TTIME
        GOTO 350


*       CIRCUIT BUILD FAILED.
*       DUMP MSG TO LOG FILE, TOO.

300     IF (ERRCKT.NE.0) MTRPOS=SIZE(22)+1
        IF (ERRCKT .GT. 0) WRITE (22#MTRPOS, 5035) TTIME,
     +  ERRCKT 
5035    FORMAT ('CIRCUIT BUILD FAILED.',
     +  'TIME: ',I5,' ERROR: ',I3)

        IF (ERRCKT.EQ.-1) WRITE (22#MTRPOS,5040) TTIME
5040    FORMAT ('BAD RESPONSE,  TIME: ',I4)

        IF (ERRCKT.EQ.-2) WRITE (22#MTRPOS,5042)TTIME
5042    FORMAT ('TROUBLE ESTABLISHING CONNECTION TO PRIVATE',
     +  'NETWORK.  TIME: ',I4)



*       GET NUMBER AUX CIRCUITS UP. THERE SHOULD BE NONE. IF MORE THAN ONE,
*       STOP PROGRAM. GARBAGE AUX CIRCUITS CAN PREVENT USERS FROM
*       LOGGING INTO THE SYSTEM DUE TO OUT OF PORTS.

350     CALL ZAP (PORT)
        CALL AUXCHK (NUMCIR)

*       IF MORE THAN ONE CIRCUIT IS UP, STOP PROGRAM

        IF (NUMCIR .LT. 2) GOTO 60

*       GOT GARBAGE CIRCUITS, RECORD ERROR IN LOG AND STOP PROGRAM

        WRITE (22#MTRPOS, 5045) TTIME
5045    FORMAT ('GARBAGE CIRCUITS, TIME = ',I)
        GOTO 999

*       DATE CONVERSION ERROR, STOP PROGRAM

997     MTRPOS=SIZE(22)+1
        WRITE (22#MTRPOS,5110) TDATE,TTIME
5110    FORMAT ('PROGRAM EXIT, DATE CONVERSION ERROR AT: ',I6,1X,I4)
        GOTO 999

*       CURRENT TIME IS PAST PROGRAM STOP TIME IN CONTROL FILE

998     MTRPOS=SIZE(22)+1
        WRITE (22#MTRPOS,5100) TDATE,TTIME
5100    FORMAT ('CONTROL FILE EXIT, BEFORE START TIME OR PAST ',
     +  'STOP TIME: ',I6,1X,I4)
        GO TO 999

*       NORMAL EXIT


*       PROGRAM END

999     CONTINUE
        END
C                     (MSREPORT) XRLIB.FTF
C    A LIBRARY FILE OF ROUTINES FOR EXTRACTING DATA FROM XRAY WITH AUX.
C    CKTS. AND WRITING THE XRAY OUTPUT TO A LOG FILE OR (IN THE CASE OF
C    A 'KS' COMMAND) TO A 1022 DATA BASE.
C
C    SUBROUTINES:
C        XRFOUT -- WRITES THE XRAY OUTPUT TO A FILE;
C        XRGLIN -- GETS ONE LINE OF XRAY OUTPUT, PASSES IT TO XRFOUT;
C
C  IN ORDER TO RUN THE MAIN PROGRAM IN DETACHED MODE, ALL TERMINAL-TYPE
C  OUTPUT IS WRITTEN TO A MONITOR LOG FILE (DEVICE NO. 22).  THIS FILE
C  MUST BE IN RANDOM-ACCESS OUTPUT MODE.


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                    C
C                       SUBROUTINE: XRFOUT                           C
C                                                                    C
C       WRITES THE OUTPUT FROM AN AUXILIARY CIRCUIT ONTO THE         C
C        SPECIFIED FILE.                                             C
C                                                                    C
C       FORMAT:     CALL XRFOUT(PROMPT,FILNUM,LOGPOS)                C
C       ARGUMENTS:                                                   C
C          PROMPT : VARIABLE CONTAINING PROMPT CHARACTER, FLAGGING   C
C                   END OF XRAY OUTPUT.                              C
C          FILNUM : THE VARIABLE CONTAINING THE DISC DEVICE NUMBER   C
C                   TO WHICH THE OUTPUT IS TO BE WRITTEN.            C
C          LOGPOS : VARIABLE CONTAINING THE NUMBER OF THE FIRST LINE C
C                   TO WRITE TO IN THE OUTPUT LOG FILE.              C
C                                                                    C
C       ACCESSES:  COMMON /AUX/ PORT, /OUTPOS/ MTRPOS                C
C                                                                    C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        SUBROUTINE XRFOUT(PROMPT, FILNUM, LOGPOS)

        INTEGER PROMPT, FILNUM, LOGPOS, PORT, MTRPOS, ARRAY(50,80),
     +    LARRAY(80), ERR, LINCNT, LINNO

C GET AUX. CKT'S. PORT NUMBER AND LINE ON MONITOR FILE TO WRITE ON.
C INITIALIZE 'ARRAY' TO BLANKS, 'LINCNT' TO 0, AND 'LINNO' TO THE
C NUMBER OF THE FIRST LINE ON THE OUTPUT FILE FOR WRITING ON:  IF THE
C OUTPUT FILE IS THE RANDOM-ACCESS UNIVERSAL FILE, 'LINNO' IS SET TO
C THE NUMBER OF THE LAST LINE OF THE FILE, PLUS 1; IF THE OUTPUT FILE
C IS A SEQUENTIAL FILE THAT IS LOADED INTO A 1022 DATA-BASE BY THIS
C PROGRAM, 'LINNO' IS SET TO 1.

        COMMON /AUX/ PORT
        COMMON /OUTPOS/ MTRPOS

        DATA ARRAY /4000*'     '/
        LINCNT = 0

        LINNO = LOGPOS
        IF (FILNUM .EQ. 23) LINNO = 1
C RESET 'LARRAY' TO BLANKS, READ EACH LINE OF OUTPUT FROM XRAY INTO 'LARRAY'.
C WRITE IT TO 'ARRAY' (FOR WRITING TO OUTPUT LOG FILE).
C*******************************************************

        DO 100 I = 1,50

C RE-INITIALIZE 'LARRAY' TO BLANKS.

        DO 30 J = 1,80
        LARRAY(J) = '     '
   30   CONTINUE

C GET ONE LINE OF XRAY OUTPUT.

        CALL XRGLIN (PROMPT, LARRAY, ERR)


C ERROR:  0 = NORMAL, LOAD INTO 'ARRAY';  1 = TRUNCATED LINE, PRINT
C WARNING ON MONITOR FILE AND LOAD INTO 'ARRAY';  2 = XRAY FINISHED,
C WRITE OUTPUT TO LOG FILE;  3 = CKT. ZAPPED OR 60 SEC. TIMEOUT,
C RETURN WITHOUT WRITING TO FILE.

        IF (ERR .EQ. 0) GOTO  50
        IF (ERR .EQ. 2) GOTO 200
        IF (ERR .EQ. 3) RETURN

        WRITE (22#MTRPOS, 5000) LINNO
 5000      FORMAT ('BAD LINE.  #', I5, ' TOO LONG!  TRUNCATED.  ', 
     +     'POSSIBLE DATA LOSS!')
        MTRPOS = SIZE (22) + 1

C INCREMENT LINE COUNTERS: NUMBER OF LINES TO WRITE TO LOG FILE, AND
C THE NUMBER OF THE LOG FILE LINE WHERE TRUNCATION OCCURRED.
C LOAD LINE INTO OUTPUT ARRAY.

   50   LINCNT = LINCNT + 1
        LINNO = LINNO + I

        DO 100 J = 1,80
        ARRAY (I,J) = LARRAY (J)
  100   CONTINUE

C END LOOP.
C*******************************************************

C TRUNCATED OUTPUT.  PRINT WARNING ON MONITOR FILE.

        WRITE (22#MTRPOS, 5005) LINNO
 5005      FORMAT ('BAD OUTPUT FROM XRAY.  .GE. 50 LINES, ',
     +     'AT LINE', I6, '.  POSSIBLE LINES LOST!')
        MTRPOS = SIZE (22) + 1

C WRITE OUTPUT TO LOG FILE.
C**********************

  200   DO 300 I = 1, LINCNT
        WRITE(FILNUM#LOGPOS,5010)(ARRAY(I,J),J=1,80)
 5010      FORMAT (80A1)
        LOGPOS = LOGPOS + 1
  300   CONTINUE


  900   RETURN
        END


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                    C
C                       SUBROUTINE: XRGLIN                           C
C                                                                    C
C   GETS ONE LINE (MAX 78 CHARS) OF OUTPUT FROM AN AUX CKT TO XRAY.  C
C                                                                    C
C       FORMAT:     CALL XRGLIN (PROMPT, LARRAY, ERR)                C
C       ARGUMENTS:                                                   C
C          PROMPT : VARIABLE WITH THE PROMPT CHARACTER FOR TESTING   C
C                   FOR END OF OUTPUT.                               C
C          LARRAY : ARRAY CONTAINING THE OUTPUT LINE FROM XRAY       C
C          ERR    : VARIABLE CONTAINING ERROR FLAG.                  C
C                   O = NO ERROR.                                    C
C                   1 = OVER-LONG LINE ( > 78 CHARACTERS).           C
C                   2 = END OF OUTPUT FROM XRAY.                     C
C                   3 = ERROR:  CKT ZAPPED OR 1 MIN. TIMEOUT.        C
C                                                                    C
C       ACCESSES:   COMMON/AUX/PORT                                  C
C                                                                    C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

        SUBROUTINE XRGLIN (PROMPT, LARRAY, ERR)

        INTEGER PROMPT, LARRAY (79), ERR, PORT, CHAR, WTCNT, CR, LF
        INTEGER WAIT

C GET THE AUX. CKT'S. PORT NUMBER FOR EXTRACTING DATA, AND INITIALIZE
C CONSTANTS FOR TESTING FOR END OF LINE, AND INITIALIZE ERROR CODE.

        COMMON /AUX/ PORT
        DATA CR /13/, LF /10/, WAIT /1.0/
        ERR = 0

C READ EACH CHAR. IN LINE OF XRAY OUTPUT, AND LOAD THEM INTO AN ARRAY
C FOR PASSING BACK TO THE CALLING SUBROUTINE (XRFOUT).
C*******************************************************

        DO 100 I = 1,80
   25   WAIT=60
        CALL GTCHAR (PORT, CHAR, WAIT)

C TEST FOR ERROR RETURNS: -1 = TIMEOUT; -2 = AUX. CKT. ZAPPED.

        IF (CHAR.EQ.-1) GOTO  50
        IF (CHAR.EQ.-2) GOTO 600

C MASK FOR ONLY THE LAST 7 BITS.

        CHAR=IAND(CHAR,"177)

C TEST FOR END OF LINE AND FOR END OF OUTPUT FROM HOST.  IGNORE
C CARRIAGE RETURN THEN END READING DATA AT LINE FEED, AND SEND LINE OF
C DATA (WITHOUT CR/LF PAIR) TO CALLING ROUTINE AND RETURN TO CALLER.
C DO NOT SEND THE PROMPT AT END OF OUTPUT, BUT SET END-OF-OUTPUT FLAG
C AND RETURN TO CALLER.

        IF (CHAR .EQ. CR) GOTO 25
        IF (CHAR .EQ. LF) RETURN
        IF (CHAR .EQ. PROMPT) GOTO 500

C MOVE THE CHAR TO THE LEFTMOST 8 BITS AND PAD THE WORD WITH BLANKS.
C LOAD THE CHARACTER INTO THE PROPER ARRAY ELEMENT.

        CHAR=LSH(CHAR,29)
        CHAR=IOR(CHAR,"1004020100)

        LARRAY(I)=CHAR
        GOTO 100

C TIMEOUT HAS OCCURRED.  IF 60 SEC. WITH NO CHAR., DO ERROR RETURN.

   50   WTCNT = WTCNT + 1
        IF (WTCNT .GE. 60) GOTO 600
  100   CONTINUE

C END OF LOOP.
C*******************************************************

C MORE THAN 80 CHARS. IN LINE.

        ERR = 1
        RETURN

C END OF OUTPUT FROM XRAY:  PROMPT WAS RECEIVED.

  500   ERR = 2
        RETURN

C CKT. ZAPPED OR 60 SEC. TIMOUT.

  600   ERR = 3
        RETURN

        END

    