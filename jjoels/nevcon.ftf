CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                     C
C       PROGRAM: NEVCON                                               C
C       AUTHOR:  BILL EUSKE                                           C
C       ADDITIONAL COMMENTS BY: JO ANN JOELS                          C
C       LAST UPDATE:                                                  C
C       UPDATED BY:                                                   C
C       VERSION: ??                                                   C
C       TABS: 9,12,15,18,21,60,71                                     C
C                                                                     C
C       THIS PROGRAM LOOKS AT THE NETWORK EVENTS COLLECTED BY THE     C
C       NETGET PROGRAM.  IT BUILDS THIS EVENTS INTO MORE MEANINGFUL   C
C       EVENT RECORDS (I.E. IT RECOGNIZES UNREPORTABLE CRASHES),      C
C       AND OUTPUTS THESE NEW EVENT RECORDS INTO THREE FILES. 1)      C
C       NEVLOY.MDD = LINE OUTAGE EVENTS. 2) NEVLSY.MDD = LINE STAT-   C
C       ISTICS EVENTS. 3) NEVCRY.MDD = CRASH EVENTS.                  C
C                                                                     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC


CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                     C
C       DECLARATIONS:                                                 C
C                                                                     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      INTEGER FILE(5),HEX(16),IDATE(4),IW(128),JDATE(4)

C*****
C     TYPE 8 MESSAGES OF INTEREST
C       TYPE 8 = TYMNET II NODE REPORT. 'T8LO' AND 'T8HI' DEFINE
C       A RANGE OF TYPE 8 MESSAGES THAT WILL BE
C       CONSIDERED.  THEN T8SEL SPECIFIES THE ACTUAL MESSAGE NUMBERS
C       WITHIN THAT RANGE THAT ARE USED BY THE PROGRAM.
C*****
      INTEGER T8LO,T8HI,T8SEL(16)
      DATA T8LO,T8HI,T8SEL/128,139,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0/

C*****
C     T-II LINE ERROR STATISTICS FOR CURRENT NODE OUTPUTING TO LOG
C       THE FOLLOWING VARIABLES ARE USED TO HOLD THE T-II LINE ERROR
C       STATISTICS FOR THE CURRENT NODE THAT IS OUTPUTING TO THE LOG
C       
C          T2LNOD = CURRENT NODE NUMBER
C          T2LNTM = CURRENT TIME
C          T2LNER = AN ARRAY CONTAINING LINE ERROR STATISTICS. 3
C                   DIFFERENT FIELDS BY 32 LINES ON THE NODE
C          T2LNEI = A POINTER TO THE 1ST OF THE FIELDS IN T2LNER. THE
C                   1ST FIELD IN T2LNER CONTAINS THE NEIGHBOR NUMBER
C                   FOR EACH LINE IN THE ARRAY.
C          T2LNRE = A POINTER TO THE 2ND FIELD IN T2LNER. THE 2ND
C                   FIELD IN T2LNER CONTAINS THE NUMBER OF RECEIVE 
C                   ERRORS ON EACH LINE IN THE ARRAY.
C          T2LNRP = A POINTER TO THE 3RD FIELD IN T2LNER. THIS FIELD
C                   IN T2LNER CONTAINS THE PACKET COUNT FOR EACH
C                   LINE IN THE ARRAY.
C          T2LINS = A 32 WORD ARRAY CONTAINING THE LINE NUMBERS FOR 
C                   CURRENT NODE.
C          T2LINX = INDEX INTO THE T2LINS ARRAY.
C*****
      INTEGER T2LNOD,T2LNTM,T2LNER,T2LNEI,T2LNRE,T2LNRP,T2LINS,T2LINX
      COMMON /T2LE/T2LNOD,T2LNTM,T2LNER(3,32),T2LNEI,T2LNRE,T2LNRP,
     1             T2LINS(32),T2LINX
      DATA T2LNOD,T2LNER,T2LINX/97*-1,0/
      DATA T2LNEI/1/
      DATA T2LNRE/2/
      DATA T2LNRP/3/

C*****
C       THE NEVCON PROGRAM CAN ONLY HANDLE 100 SUP MOVES PER DAY.
C       THE FOLLOWING VARAIBLES ARE USED TO KEEP TRACK OF THESE MOVES.
C
C          SUPMOV = 100 WORD ARRAY CONTAINING THE TIME OF EACH SUP MOVE
C          SUPMVP = INDEX INTO SUPMOV ARRAY
C*****
      INTEGER SUPMOV,SUPMVP
      COMMON /SMOVES/SUPMOV(100),SUPMVP

C*****
C       THE FOLLOWING VARIABLES ARE USED IN HANDLING CRASHES
C
C          CRCNT = 2047 WORD ARRAY CONTAINING THE NUMBER OF CRASHES FOR
C                   THE DAY ON EACH NODE
C          CCSUPT = 7 WORD ARRAY CONTAINING  THE TIME THE SUP WAS 
C                  LAST UPDATED.  THERE IS ROOM FOR 7 SUP'S IN
C                  THE ARRAY.  IF VALUE = 0 FOR A SUP THEN THE SUP WAS
C                  NOT USED.
C          CCBUF  = ARRAY THAT A BLOCK OF DATA (128 WORDS) IS READ 
C                  INTO.
C*****
      INTEGER CRCNT,CCSUPT,CCBUF
      COMMON /CCOUNT/CRCNT(2047),CCSUPT(7),CCBUF(128)

C*****
C     EVENT RECORD FIELDS
C       THE NEVCON PROGRAM TAKES THE NETWORK EVENTS COLLECTED BY
C       NEVGET AND COMPOSES ITS OWN EVENT RECORDS.  THE FOLLOWING
C       VARIABLES ARE USED TO HOLD INFORMATION ABOUT THESE NEVCON EVENT
C       RECORDS.
C
C          R     = A 10 FIELD BY 4343 EVENT RECORD ARRAY.  THUS
C                   THERE ARE 10 FIELDS OF INFORMATION FOR EACH OF 4343
C                   POSSIBLE EVENT RECORDS IN THIS ARRAY.
C          NODE = A 2047 WORD ARRAY CONTAINING AN INDEX INTO
C                   THE 'R' ARRAY FOR EACH NODE.  THERE MAY BE MORE
C                   THAN ONE EVENT FOR A NODE BUT THE NODE
C                   ARRAY POINTS TO THE FIRST EVENT FOR THE NODE. THEN
C                   THE FIRST FIELD IN 'R' ON THAT EVENT POINTS TO
C                   THE NEXT EVENT FOR THAT NODE, AND THE 2ND POINTS
C                   TO THE THIRD, THUS ALL OF THE EVENTS FOR A NODE ARE
C                   CHAINED TOGETHER.
C          RFREE = NUMBER OF FREE EVENT RECORDS
C          RSZ   = NUMBER OF FIELDS IN EACH EVENT RECORD
C          RCHAIN = POINTER TO FIRST FIELD IN 'R'.  THIS 1ST FIELD
C                   IS ITSELF A POINTER TO THE NEXT EVENT IN 'R' FOR
C                   THE NODE.
C          RSTIME = POINTER TO 2ND FIELD IN 'R'.  IF THE EVENT RECORD
C                   TYPE (RTY) = LINE OUTAGE, THEN THE 2ND FIELD IN 
C                   'R' CONTAINS THE RECORD START TIME.
C          ROVTIM = POINTER TO 2ND FIELD IN 'R'.  IF THE EVENT RECORD
C                   TYPE (RTY) = CRASH OR LINE STATISTICS, THEN THE
C                   2ND FIELD IN 'R' CONTAINS THE OVERLOAD TIME.
C          RETIME = POINTER TO 3RD FIELD IN 'R'. IF THE EVENT RECORD
C                   TYPE (RTY) = LINE OUTAGE, THEN THE 3RD FIELD IN
C                   'R' CONTAINS THE RECORD END TIME.
C          RLETIM = POINTER TO 3RD FIELD IN 'R'.  IF THE EVENT RECORD
C                   TYPE (RTY) = CRASH OR LINE STATISTICS, THEN THE 
C                   3RD FIELD IN 'R' CONTAINS THE ERROR SECONDS.
C          RLINE  = POINTER TO 4TH FIELD IN 'R'.  IF THE EVENT RECORD
C                   TYPE (RTY) = LINE OUTAGE OR LINE STATISTICS, THEN 
C                   THE 4TH FIELD IN 'R' CONTIANS THE LINE NUMBER
C          RCLOC  = POINTER TO 4TH FIELD IN 'R'.  IF THE EVENT RECORD
C                   TYPE (RTY) = CRASH, THE THE 4TH FIELD IN 'R'
C                   CONTAINS THE CRASH LOCATION.
C          RNEIGH = POINTER TO THE 5TH FIELD IN 'R'.  IF THE EVENT 
C                   RECORD TYPE (RTY) = LINE OUTAGE OR LINE STATISTIC,
C                   THEN THE 5TH FIELD IN 'R' CONTAINS THE NEIGHBOR 
C                   NUMBER.
C          RCCNT  = POINTER TO THE 5TH FIELD IN 'R'. IF THE EVENT RECORD
C                   TYPE (RTY) = CRASH, THE THE 5TH FIELD IN 'R'
C                   CONTAINS THE CRASH COUNT.
C          RMSG  = POINTER TO THE 6TH FIELD IN 'R'.  THE 6TH FIELD CONTAINS
C                   THE EVENT TYPE.  NOT THE NEVCON EVENT RECORD TYPE,
C                   BUT THE NEM EVENT TYPE. NEVCON MAY ALTER THE NEM
C                   EVENT TYPE BY ADDING THE SUB EVENT TYPE TO 
C                   THE EVENT TYPE, THUS THE NEVCON EVENT TYPE FOR A 
C                   NEM EVENT TYPE 19 - SUB EVENT TYPE 6- WOULD BE
C                   1906.
C          RPLI   = POINTER TO THE 7TH FIELD IN 'R'.  IF THE EVENT
C                   RECOD TYPE (RTY) = LINE OUTAGE, THEN THE 7TH FIELD
C                   FIELD IN 'R' CONTAINS THE NUMBER OF 'PLEASE LOG 
C                   INS'.
C          ROVCNT = POINTER TO THE 7TH FIELD IN 'R'.  IF THE EVENT
C                   RECORD TYPE (RTY) = LINE STATISCTICS , THEN THE
C                   7TH FIELD IN 'R' CONTAINS THE LINE OVERLOAD COUNT.
C          RPLID  = POINTER TO THE 8TH FIELD IN 'R'.  IF THE EVENT
C                   RECORD TYPE (RTY) = LINE OUTAGE, THEN THE 8TH
C                   FIELD IN 'R' CONTAINS THE PLI DISTRIBUTION.
C          RCCODE  = POINTER TO THE 8TH FIELD IN 'R'.  IF THE EVENT
C                   RECORD TYPE (RTY)  = CRASH, THEN THE 8TH FIELD
C                   IN 'R' CONTAINS THE REASON FOR THE CRASH (THE
C                   CRASH CODE).
C          RTY    = POINTER TO THE 10TH FIELD IN 'R'. THE 10TH
C                   FIELD IN 'R' CONTAINS THE EVENT RECORD TYPE.
C                   RTYLO = LINE OUTAGE = 1
C                   RTYCR = CRASH       = 2
C                   RTYLS = LINE STATISTICS = 3
C*****
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C*****
C       DEFINE SOME VARIABLES
C*****
      DATA RSZ/10/
      DATA RCHAIN/1/
      DATA RSTIME,ROVTIM/2,2/
      DATA RETIME,RLETIM/3,3/
      DATA RLINE,RCLOC/4,4/
      DATA RNEIGH,RCCNT/5,5/
      DATA RMSG/6/
      DATA RPLI,ROVCNT/7,7/
      DATA RUCNT,RCVER,RLNERR/8,8,8/
      DATA RPLID,RCCODE/9,9/
      DATA RTY,RTYLO,RTYCR,RTYLS/10,1,2,3/
      DATA HEX/1H0,1H1,1H2,1H3,1H4,1H5,1H6,1H7,1H8,1H9,
     1         1HA,1HB,1HC,1HD,1HE,1HF/

      DATA ISUP/-1/


C*****
C       DO SOME INITIALIZATION
C*****

C       C*****
C       C  ON INTERRUPTS, EXIT
C       C*****
      CALL ONINT($999)

C       C*****
C       C SET NUMBER OF FREE EVENT RECORDS TO 1.
C       C SET UP THE EVENT RECORD TABLE SO THAT ALL EVENTS ARE CHAINED
C       C TOGETHER.
C       C*****
C     INITIALIZE
      RFREE=1
      DO 120 I=1,4343-1
120   R(RCHAIN,I)=I+1
      R(RCHAIN,4343)=0

C*****
C OPEN THE TRACE OUTPUT FILE
C*****
      OPEN(26,'NEVCON.TRC',OUTPUT,SYMBOLIC)


C*****
C THE NEXT PORTION OF THE CODE GETS THE USER DEFINED START AND STOP
C DATES.  THE FOLLOWING VARIABLES ARE USED TO CONTAIN DATES.
C       JMB = BEGINNING MONTH
C       JDB = BEGINNING DAY
C       JYB = BEGINNING YEAR
C       JME = ENDING MONTH
C       JDE = ENDING DAY
C       JYE = ENDING YEAR
C       JTB = BEGINNING DATE IN JULIAN FORMAT, TIME = 0
C       JTE = ENDING DATE IN JULIAN FORMAT, TIME = 0
C       JTR = BEGINNING DATE IN JULIAN, TIME =3600. (OR 1 HOUR 
C             INTO THE DAY)
C*****
C     GET START AND STOP TIME
      TYPE 410
410   FORMAT(' ENTER START-DATE AND END-DATE (M D Y M D Y):',$)
      ACCEPT 420,JMB,JDB,JYB,JME,JDE,JYE
420   FORMAT(6I)
      IF(JMB.EQ.0)GOTO 425
      INCRDY=0
      IF(JYB.NE.0)GOTO 430
      JYB=DTE(I)
      JYB=MOD(JYB,100)
      GOTO 430

C     CONTINUE WITH NEXT DAY
C       GET NEXT DAY FROM FILE: NEVCON.DAY
425   INCRDY=1
      OPEN(22,'NEVCON.DAY',INPUT,SYMBOLIC)
      READ(22,427)JMB,JDB,JYB
427   FORMAT(3I)
      CLOSE(22)

430   IF(JME.NE.0)GOTO 435
      JME=JMB
      JDE=JDB
435   IF(JYB.LT.100)JYB=JYB+1900
      IF(JYE.EQ.0)JYE=JYB
      IF(JYE.LT.100)JYE=JYE+1900
      JTB=JULIAN(JMB,JDB,JYB,0,0,0)
      JTE=JULIAN(JME,JDE,JYE,0,0,0)
      JTR=JTB+3600


C     OPEN CONSOLIDATED OUTPUT FILES
C       NEVLOY.MDD     -LINE OUTAGE EVENTS      Y = LAST DIGIT OF YEAR
C       NEVCRY.MDD     -NODE CRASH EVENTS       M = MONTH, 1-C
C       NEVLSY.MDD     -LINE STATISTICS         DD= DAY, 01-31
      ENCODE(25,450,FILE)HEX(MOD(JYB,10)+1),HEX(JMB+1),HEX(JDB/10+1),
     1                   HEX(MOD(JDB,10)+1)
450   FORMAT('NEVLO',A1,'.',3A1,15X)
      OPEN(22,FILE,OUTPUT,SYMBOLIC)
      ENCODE(25,460,FILE)HEX(MOD(JYB,10)+1),HEX(JMB+1),HEX(JDB/10+1),
     1                   HEX(MOD(JDB,10)+1)
460   FORMAT('NEVCR',A1,'.',3A1,15X)
      OPEN(23,FILE,OUTPUT,SYMBOLIC)
      ENCODE(25,470,FILE)HEX(MOD(JYB,10)+1),HEX(JMB+1),HEX(JDB/10+1),
     1                   HEX(MOD(JDB,10)+1)
470   FORMAT('NEVLS',A1,'.',3A1,15X)
      OPEN(27,FILE,OUTPUT,SYMBOLIC)

C     INITIALIZE CRASH COUNT DATA BASE
      CALL CCINIT(JTB)


C*****
C OPEN THE FILE CONTAINING THE EVENT LOG OBTAINED BY NEVGET
C THEN INITIALIZE THE VARIABLES USED TO READ THE DATA FROM THIS FILE.
C
C       IW = 128 WORD ARRAY. ONE BLOCK OF DATA (128 WORDS) IS READ FROM
C           THE NETWORK EVENT LOG (NEL) AND PLACED INTO THIS ARRAY.
C           THE DATA IN THE N.E.L. FILE SHOULD BE THOUGHT OF AS A SET
C           OF 2 WORD PAIRS.  EACH PAIR CONTAINS THE INFORMATION ON
C           A NETWORK EVENT.
C       IWX = INDEX INTO THE IW ARRAY. IWX ALWAYS POINTS TO THE FIRST 
C             WORD OF THE NEXT PAIR OF WORDS TO BE CONSIDERED.
C       IWI = NEXT POSITION TO READ FROM IN THE N.E.L. FILE
C       IWS = SIZE (IN WORDS) OF THE N.E.L. FILE
C       IWP = NUMBER OF WORDS TO READ FROM THE N.E.L. FILE.  THIS IS
C             ALSWAYS SET TO 128 UNLESS THERE ARE LESS THAN 128 WORDS 
C             LEFT TO BE READ IN THE N.E.L. FILE.  IN THIS CASE IWP
C             IS SET TO THE NUMBER OF WORDS LEFT TO BE READ.
C*****
C     OPEN NETWORK EVENT INPUT LOG
C       FILE: NEVLGY.MDD        Y= LAST DIGIT OF YEAR
C                               M= MONTH, 1-C
C                               DD=DAY
500   CALL LOADNN(JTB/(24*3600)*(24*3600)+26*3600)
      ENCODE(25,530,FILE)HEX(MOD(JYB,10)+1),HEX(JMB+1),HEX(JDB/10+1),
     1                   HEX(MOD(JDB,10)+1)
530   FORMAT('NEVLG',A1,'.',3A1,15X)
      OPEN(21,FILE,RANDIN,BINARY,ERR=903)
      LTIME=JTB
      IWX=0
      IWP=0
      IWI=1
      IWS=SIZE(21)


C*****
C READ A PAIR OF WORDS FROM THE NETWORK EVENT LOG FILE
C*****

C       C*****
C       C SET INDEX INTO IW ARRAY TO NEXT PAIR OF WORDS
C       C*****
600   IWX=IWX+2
C       C*****
C       C CK IF FINISHED WITH THIS BLOCK OF WORDS
C       C*****
      IF(IWX.LT.IWP)GOTO 630
C       C*****
C       C FINISHED WITH BLOCK. INCREMENT POSITION TO READ FROM IN
C       C THE N.E.L. FILE BY NUMBER OF WORDS READ ON LAST READ.
C       C*****
      IWI=IWI+IWP
C       C*****
C       C CK IF THIS PUTS THE POSITION OF THE
C       C FILE PAST THE END-OF-FILE
C       C*****
      IF(IWI.GT.IWS)GOTO 900
C       C*****
C       C NOT PAST END OF FILE. THEREFORE, SET NUMBER OF WORDS TO
C       C BE READ TO THE NUMBER OF WORDS LEFT IN THE FILE.
C       C*****
      IWP=IWS-IWI+1
C       C*****
C       C NOW CK IF THIS IS GREATER THAN A BLOCK (128) , IF IT S
C       C THEN SET THE NUMBER OF WORDS TO BE READ TO 128.
C       C*****
      IF(IWP.GT.128)IWP=128
C       C*****
C       C READ A BLOCK OF DATA FROM THE NETWORK EVENT LOG FILE
C       C*****
      READ(21#IWI)(IW(I),I=1,IWP)
C       C*****
C       C SET THE INDEX INTO THE 'IW' ARRAY TO POINT TO THE FIRST
C       C PAIR OF WORDS IN THE ARRAY
C       C*****
      IWX=1


C     GET EVENT
C       IF EVENT 0,     IW1 = 0,        TIME
C                                       IW2 = 0, DONE
C                                       IW2 = TIME ELSE
C                       IW1 = 1,        SUP CHANGE
C                                       IW2 = SUP NUMBER
C*****
C GET THE EVENT TYPE FOR THIS NETWORK EVENT.  THE 1ST HEX DIGIT
C OF THE EVENT TYPE IS IN THE 1ST 4 BITS OF THE 1ST WORD OF  PAIR.
C THE 2ND HEX DIGIT OF THE EVENT TYPE IS IN THE 1ST 4 BITS OF THE
C 2ND WORD OF THE PAIR. MULTIPLY THE 1ST DIGIT BY 16 AND ADD THE SECOND
C DIGIT TO GET THE EVENT TYPE.
C*****
630   IEVENT=LSH(IW(IWX),-32)*16+LSH(IW(IWX+1),-32)
C*****
C GET THE LAST 32 BITS OF THE 1ST WORD.  THAT IS GET ALL OF THE WORD
C EXCEPT THE 1ST FOUR BITS THAT CONTAIN PART OF THE EVENT TYPE.
C THIS IS DONE BECAUSE THE LENGTH OF THE WORD ON THE ENGINE THAT NEM 
C RUNS ON IS 32 BITS. THEREFORE THE ACTUAL 32 BITS THAT NEM SENDS OUT IS
C WHAT WE WANT TO LOOK AT AND THIS HAS STORED IN BITS 4-35 OF 
C THE PDP-10 WORD.
C*****
      IW1=IAND(IW(IWX),"37777777777)
C*****
C GET THE LAST 32 BITS OF THE 2ND WORD. FOR THE SAME REASON AS ABOVE.
C*****
      IW2=IAND(IW(IWX+1),"37777777777)

C*****
C IF THIS EVENT IS NOT A TIME STAMP OR A SUP CHANGE, THEN GO 
C TO THE BRANCH ON EVENT TYPE.  NOTE IF EVENT TYPE = 0, THEN
C THE 2 WORD PAIR CONTAINS INFORMATION ON A SUP CHANGE OR A TIME
C STAMP AND NOT INFORMATION ON A NETWORK EVENT.
      IF(IEVENT.NE.0)GOTO 650

C       C*****
C       C THIS IS EITHER A TIME STAMP OR A SUP CHANGE RECORD
C       C IF THE 1ST WORD OF THE PAIR = 0, THEN THIS IS A TIME STAMP.
C       C IF THE 1ST WORD OF THE PAIR = 1, THEN THIS IS A SUP CHANGE.
C       C IF THIS IS A SUP CHANGE (IW1 = 1) THEN BRANCH TO SUP CHANGE
C       C CODE.
C       C*****
      IF(IW1.NE.0)GOTO 680

C       C*****
C       C THIS IS A TIME STAMP. IF THE 2ND WORD OF THE PAIR = 0, THEN
C       C WE'VE REACHED THE END OF THE NETWORK EVENT LOG. SO STOP.
C       C*****
      IF(IW2.EQ.0)GOTO 900

C       C*****
C       C IN A TIME STAMP IEVNET=0 AND IW1 = 1) THEN IF IW2 DOES NOT
C       C EQUAL ZERO IT CONTAINS THE TIME IN THE EVENT LOG. PLACE THIS
C       C TIME INTO THE VARIABLE: LTIME
C       C*****
      LTIME=IW2
C       C*****
C       C NOW CK TO SEE IF IT IS TIME TO STOP
C       C*****

      CALL TMSTOP(LTIME)

C       C*****
C       C ONCE AN HOUR WE'RE GOING TO OUTPUT A MESSAGE TO THE TERMINAL
C       C TO LET THE WOROLD KNOW THE PROGRESS OF THIS PROGRAM
C       C CK TO SEE IF AN HOUR OF THE LOG TIME HAS BEEN PROCESSED.
C       C IF AN HOUR HAS NOT BEEN PROCESSED, THEN CONTINUE
C       C*****
      IME.LT.JTR)GOTO 650
C       C*****
C       C AN HOUR'S WORTH OF LOG DATA HAS BEEN PROCESSED. INCCREMENT
C       C THE VARIABLE KEEPING TRACK OF THE TIME PROCESSED (IN 
C       C JULIAN FORMAT) BY ONE HOUR = 3600 SECONDS
C       C*****
      JTR=JTR+3600
C       C*****
C       C CONVERT THE JULIAN DATE TO THE FORMAT: MM/DD/YYYY  HR:MN:SC
C       C AND OUTPUT THE DATE ON THE LOGGER, THE NUMBER OF EVENTS 
C       C PROCSSED SO FAR, AND THE NUMBER OF FREE EVENT RECORDS.
C       C*****
      CALL DTFRMT(LTIME,IDATE)
      I=4343-RFREE
      TYPE 640,IDATE,IEC,I
640   FORMAT(' NOW AT ',4A5,', EVENTS:',I5,', FREE:',I4)

C*****
C BRANCH ON EVENT TYPE
C*****
C     FAN OUT FOR EVENTS 1-255
650   IF(IEVENT.EQ.6)GOTO 99600
      IF(IEVENT.EQ.8)GOTO 99800
      IF(IEVENT.EQ.12)GOTO 1200
      IF(IEVENT.EQ.18)GOTO 1800
      IF(IEVENT.EQ.19)GOTO 1900
      IF(IEVENT.EQ.26)GOTO 2600
      IF(IEVENT.EQ.28)GOTO 2800
      IF(IEVENT.EQ.33)GOTO 3300
      IF(IEVENT.EQ.36)GOTO 3600
      IF(IEVENT.EQ.44)GOTO 4400
      IF(IEVENT.EQ.48)GOTO 4800
      IF(IEVENT.EQ.54)GOTO 5400
      IF(IEVENT.EQ.57)GOTO 5700
      IF(IEVENT.EQ.65)GOTO 6500

C     NOT INTERESTED IN THE REST
      GOTO 600

C*****
C THIS IS A SUP CHANGE. HOWEVER YOU BRANCH TO HERE IF IW1 NE 0
C SO NOW MAKE SURE THAT IT IS A 1. IF IW1 IS NOT 1 , THEN IGNORE THIS
C RECORD FROM THE LOGGER, AND GO LOOK AT THE NEXT ONE.
C*****
C     SUP CHANGE
680   IF(IW1.NE.1)GOTO 600

C       C*****
C       C IF THE SUP INVOLVED IN THE SUP CHANGE IS THE SAME
C       C AS WAS INVOLVED IN THE LAST MOVE, IGNORE THIS
C       C LOG RECORD.
C       C*****
      IF(ISUP.EQ.IW2)GOTO 600

C       C*****
C       C IF THIS IS THE FIRST SUP CHANGE OF THE DAY DON'T
C       C DO THE NEXT STEP
C       C*****
      IF(SUPMVP.EQ.0)GOTO 684

C       C*****
C       C IF THE DIFFERENCE IN THE TIME BETWEEN THE CURRENT TIME
C       C IN THE LOGGER AND THE LAST TIME THE SUP IN QUESTIION WA
C       C MOVED IS LE 5 MINUTES, THEN GO SAVE THE
C       C CRASH COUNT TABLE OFR THE CURRENT SUP AND LOAD IT FOR THE
C       C NEW SUP.
C       C*****
      IF(IABS(LTIME-SUPMOV(SUPMVP)).LE.5*60)GOTO 688

C       C*****
C       CIT HAS BEEN OVER 5 MINUTES SINCE THE LAST SUP MOVE.  PLACE
C       C THIS MOVE AS A NEW ENTRY IN THE SUP MOVE TABLE
C       C*****
684   SUPMVP=SUPMVP+1
C       C*****
C       C CK IF EXCEEDING MAX. OF 100 SUP MOVES
C       C IF HAVE EXCEEDED THE MAX. STOP.
C       C*****
      IF(SUPMVP.GT.100)GOTO 690
C       C*****
C       C PLACE THE CURRENT LOGGER TIME (THE TIME OF THE SUP MOVE)
C       C INTO THE SUP MOVE ARRAY
C       C*****
      SUPMOV(SUPMVP)=LTIME

C       C*****
C       C NOW SAVE THE CRASH CCOUNT TABLE FOR THE CURRENT SUP AND 
C       C LOAD IT FOR THE NEW SUP.
C       C*****
688   CALL CCUPD(LTIME,ISUP,IW2)
C       C*****
C       C SET THE CURRENT SUP NUMBER TO THE NEW SUP NUMBER
C       C AND GO LOOK AT THE NEXT LOGGER RECORD
C       C*****
      ISUP=IW2
      GOTO 600

C       C*****
C       C WE BRACHED TO HERE WHEN THE MAX SIZE OF THE SUP MOVE ARRAY
C       C WAS EXCEEDED. OUPUT A MESSAGE AND EXIT FROM THE PROGRAM
C       C*****
690   TYPE 691
691   FORMAT(' MORE THAN 100 SUP MOVES')
      CALL NEXIT


C     PROCESS LINE OUT EVENTS
C     -----------------------
C     IF RECORD DOESN'T EXIST, START EVENT.  IF NO END TIME, UPDATE
C     THE PLI COUNT.  ELSE, WRITE PREVIOUS EVENT AND REPROCESS
C     THIS INPUT.
C*****
C WE BRANCH TO HERE ON THE FOLLOWING EVENT TYPES:
C 8 - NODE REPORT- TYPE 00A (PLIS)
C 18 - LINE OUT REPORT
C 19 - LINK STATUS - SUBTYPE 5 (LINK OUT)
C 36 - LINE RESET REPORT
C*****

700   CONTINUE
C*****
C TRACE A LINE EVENT BASED ON NODE NUMBER
C*****
      CALL LETRC(LTIME,IEVENT,IW1,IW2,IR,INODE,ILINE,INEIGH,IPLI)

C       FIND EVENT FOR NODE-LINE/NEIGHBOR
710   CALL EVTFND($750,RTYLO,INODE,ILINE,INEIGH,I)

C*****
C IF EVENT HAS AN END TIME, THEN GO WRITE THE EVENT TO DISK
C*****
      IF(R(RETIME,I).NE.0)GOTO 725

C*****
C THERE IS NO RECOGNIZED END TIME TO THE EVENT , THEREFROE THIS
C IS A PLI SITUATION. INCREMENT THE PLI ACCUMULATOR FOR THIS LINE
C EVENT
C*****
      R(RPLI,I)=R(RPLI,I)+IPLI
C*****
C IF THERE WERE SOME PLIS, THEN INCREMNET THE VARIABLE
C THAT COUNTS THE NUMBER OF TIMES THE LINE WVENT HAD PLIS
C*****
      IF(IPLI.NE.0)R(RPLID,I)=R(RPLID,I)+1

C*****
C GO LOOK AT NEXT LOG RECORD
C*****
      GOTO 600

C*****
C A END TIME TO THE EVENT HAS BEEN FOUND, WRITE THE LINE EVENT TO DISK
C DISCARDING DUPLICATES
C*****
725   CALL EVTLIN(I,INODE,0)
C*****
C  GO REPROCESS THIS INFORMATION
C*****
      GOTO 710

C       CREATE NEW EVENT
750   CALL LINEVT(RTYLO,INODE,ILINE,INEIGH,IR,IEC,I)

C*****
C SET START TIME FOR EVENT TO CURRENT LOGGER TIME
C*****
      R(RSTIME,I)=LTIME
C*****
C SET NUMBER OF PLIS
C IF THERE ARE SOME PLIS, SET NUMBER OF TIMES THERE ARE PLIS
C FOR THIS LINE EVENT TO 1
C*****
      R(RPLI,I)=IPLI
      IF(IPLI.NE.0)R(RPLID,I)=1

C*****
C GO LOOK AT NEXT LOG RECORD
C*****
      GOTO 600


C     PROCESS LINE OK EVENTS
C     ----------------------
C     IF RECORD DOESN'T EXIST, START/END ONE.  IF END TIMER
C     DOESN'T EXIST, SET AS NOW.  ELSE, WRITE OUT EXISTING 
C     RECORD AND REPROCESS THIS INPUT.
C*****
C WE BRANCH TO HERE ON EVENT TYPE 33 - LINE OK REPORT
C*****
800   CONTINUE

C*****
C TRACE A LINE EVENT BASED ON THE NODE NUMBER
C*****
      CALL LETRC(LTIME,IEVENT,IW1,IW2,IR,INODE,ILINE,INEIGH,-1)

C       FIND EVENT FOR NODE-LINE/NEIGHBOR
810   CALL EVTFND($850,RTYLO,INODE,ILINE,INEIGH,I)

C       ENTRY FOR NODE,LINE/NEIGHBOR ... IF NO END TIME, RECORD.
C       IF END TIME WAS MORE THAN 5 MINUTES AGO, CREATE SEPARATE EVENT.
C       ELSE, LINE WENT FROM UP TO DOWN, COUNT

C*****
C CK IF END TIME, IF THERE IS NONE, BRANCH TO SET IT
C*****
      IF(R(RETIME,I).EQ.0)GOTO 830

C       C*****
C       C THERE IS AN END TIME. OUTPUT THE
C       C LINE EVENT TO DISK AND REPROCESS THIS INPUT
C       C*****
      CALL EVTLIN(I,INODE,0)
      GOTO 810

C       C*****
C       C THERE IS NOTEND TIME FOR THIS LINE EVENT. SET IT
C       C TO CURRENT LOG TIME
C       C*****
830   R(RETIME,I)=LTIME
C       C*****
C       C ALSO CK IF THE LINE NUMBER, NEIGHBOR NUMBER, AND EVENT TYPE
C       C HAVE BEEN SET, IF THEY HAVEN'T SET THEM
C       C*****
      IF(R(RLINE,I).EQ.-1)R(RLINE,I)=ILINE
      IF(R(RNEIGH,I).EQ.0)R(RNEIGH,I)=INEIGH
      IF(R(RMSG,I).EQ.0)R(RMSG,I)=IR
C       C*****
C       C INCREMENT THE UP COUNT AND THEN GO LOOK AT NEXT LOG RECORD
C       C*****
      R(RUCNT,I)=R(RUCNT,I)+1
      GOTO 600

C       CREATE NEW EVENT
850   CALL LINEVT(RTYLO,INODE,ILINE,INEIGH,IR,IEC,I)

C       C*****
C       C SET EVENT STOP TIME TO CURRENT TIME IN LOGGER
C       C AND INCREMENT UP COUNT
C       C*****
      R(RETIME,I)=LTIME
      R(RUCNT,I)=1
C       C*****
C       C GO LOOK AT NEXT LOG RECORD
        C*****
      GOTO 600


C     DONE
C     ----
C     DONE WITH DAY
C       UPDATE ANY OUTSTANDING T-II LINE ERROR EVENTS
C       CLOSE FILE AND TRY NEXT DAY.

C*****
C MAKE T-II LINE ERROR EVENTS FROM DATA ACCUMULATED FROM LOG IN 
C ARRAY T2LNER.
C*****
900   CALL T2LEMK(844,IEC)
      T2LNOD=-1

C*****
C CLOSE THE NETWORK EVENT LOG FILE
C*****
      CLOSE(21)

C*****
C INCREMENT THE JULIAN START DATE BY ONE DAY
C*****
      JTB=JTB+24*3600

C*****
C CK IF THIS PUTS US PAST THE END DATE (I.E. HAVE WE PROCESSED
C ALL OF THE DAYS WE WERE SUPOSSED TO.
C*****
      IF(JTB.GT.JTE)GOTO 905
C*****
C HAVE NOT FINISHED ALL OF THE DAYS. CONVERT THE JULIAN DATE
C AND RETURN AS MONTH,DAY,YEAR,HOUR,MINUTE,SECOND
C*****
      CALL MDYHMS(JTB,JMB,JDB,JYB,I,I,I)

C*****
C GO BACK AND PROCESS THE NEXT DAYS LOG FILE
C*****
      GOTO 500

C     INPUT FILE NOT FOUND, STOP
903   TYPE 904,FILE
904   FORMAT(' INPUT FOR DAY NOT FOUND, FILE:',5A5)
      PAUSE
      CALL NEXIT

C*****
C FINISHED WITH ALL DAYS THAT WERE TO BE PROCESSED
C*****
C     WRITE ANY OPEN RECORDS
905   CONTINUE

C       C*****
C       C LOOP THROUGH THE NODE ARRAY OUTPUTING ANY OPEN
C       C OPEN RECORDS FOR EACH NODE
C       C*****
      DO 910 INODE=1,2047

C       C*****
C       C IF THERE ARE NO EVENTS FOR THE NODE GO LOOK AT NEXT NODE
C       C*****
      IF(NODE(INODE).EQ.0)GOTO 910
C       C*****
C       C OUTPUT ALL CLOSED LINE EVENTS THAT CONTAIN
C       C THIS NODE
C       C*****
      CALL LEDUMP(INODE)

C       C*****
C       C OUTPUT ALL CLOSED LINE STATISTICS THAT CONTAIN A 
C       C PARTICULAR NODE
C       C*****
      IF(NODE(INODE).EQ.0)GOTO 910
      CALL LSDUMP(INODE)
      IF(NODE(INODE).EQ.0)GOTO 910
      I=NODE(INODE)

C*****
C IF THE EVENT RECORD TYPE  IS 'LINE OUTAGE' WRTIE THE LINE
C EVENT TO DISK.
C*****
      IF(R(RTY,I).EQ.RTYLO)CALL EVTLIN(I,INODE,1)
C       C*****
C       C IF THE EVENT RECORD TYPE IS 'CRASH' WRITE THE
C       C CRASH EVENT TO DISK.
C       C*****
      IF(R(RTY,I).EQ.RTYCR)CALL EVTCRS(I,INODE)
C       C*****
C       C GO BACK AND START THROUGH THE LOOP AGIAN
C       C*****

      GOTO 905
910   CONTINUE

      TYPE 915,IEC
915   FORMAT(' TOTAL EVENTS FOUND:',I6)

C     CLOSE CRASH COUNT HISTORY
      CALL CCUPD(LTIME,ISUP,-1)
      CALL CCEND(LTIME)

C*****
C CLOSE THE LINE OUTAGE, THE CRASH AND THE LINE STATISTICS OUTPUT
C FILES.  ALSO CLOSE THE TRACE OUTPUT FILE
C*****
      CLOSE(22)
      CLOSE(23)
      CLOSE(26)
      CLOSE(27)

C     WRITE DAY COMPLETED
      IF(INCRDY.EQ.0)GOTO 930
      OPEN(22,'NEVCON.DAY',OUTPUT,SYMBOLIC)
      CALL MDYHMS(JTB,JMB,JDB,JYB,I,I,I)
      WRITE(22,920)JMB,JDB,JYB
920   FORMAT(3I5)
      CLOSE(22)
930   CALL NEXIT


C 6   LOST NODE
C -   ---------
C     THIS IS THE FIRST SIGN OF A CRASH, START CRASH EVENT.
C     IF A CRASH IS ALREADY OPEN, IGNORE THIS INPUT.  ELSE, DUMP
C     ALL CLOSED EVENTS SO THEY DON'T GET IN THE WAY OF PROCESSING
C     THIS CRASH.

C*****
C SET EVENT TYPE TO 6
C*****
99600 IR=6

C*****
C GET NODE NUMBER FROM THE LAST 12 BITS  OF WORD 2 OF THE LOG RECORD
C THEN CALL NODECK TO CK ON VALIDITY OF THE NODE NUMBER. IF THE
C NODE NUMBER IS INVALID, GO LOOK AT NEXT LOG RECORD
C*****
99601 INODE=NODECK(IAND(IW2,"7777),IEVENT,IW1,IW2,$600)

C*****
C FOR DEBUGGING PURPOSES, CK IF THIS NODE IS THE ONE TO STOP ON
C*****
C     CALL NDSTOP(INODE)

C*****
C FIND A CRASH EVENT FOR THIS NODE
C*****
      CALL EVTFND($99610,RTYCR,INODE,-1,0,I)
C       C*****
C       C IF THERE IS NO END TIME FOR THIS CRASH GO LOOK AT
C       C NEXT LOG RECORD
C       C*****
      IF(R(RETIME,I).EQ.0)GOTO 600
C       C*****
C       C THERE IS A END TIME TO THIS CRASH. THEREFORE OUTPUT ALL
C       C CLOSED LINE EVENTS THAT CONTAIN THIS NODE
C       C*****
      CALL LEDUMP(INODE)
C*****
C GET THE CRASH EVENT FOR THIS NODE BACK
C*****
      CALL EVTFND($99660,RTYCR,INODE,-1,0,I)
C       C*****
C       C WRITE THE CRASH EVENT TO DISK
C       C*****
      CALL EVTCRS(I,INODE)
      GOTO 99650

C*****
C WE BRANCHD TO HERE WHEN DIDN'T FIND A CRASH EVENT AT ALL 
C FOR THIS NODE. GO AHEAD AND OUTPUT ALL CLOSED LINE EVENTS THAT
C CONTAIN THIS NODE
C*****
99610 CALL LEDUMP(INODE)

C*****
C WE GET HERE IN TWO CASES 1) THERE IS NO CRASH EVENT FOR THE NODE
C 2) THERE WAS A CRASH EVENT AND IT HAS BEEN WRITTEN TO DISK. IN
C EITHER CASE GET THE EVENT BAK AGAIN
C*****
99650 CALL EVTFND($99660,RTYCR,INODE,-1,0,I)

C*****
C WHETHER OR NOT THERE WAS A PREVIOUS CRASH EVENT FOR THIS NODE DO
C THE FOLLOWING
C*****

C       C*****
C       C SAVE THE INDEX INTO ARRAY 'R' FOR THE LAST 
C       C CRASH EVENT FOR THIS NODE
C       C*****
99660 L=I
C       C*****
C       C GET AN EMPTY EVENT RECORD
C       C*****
      CALL GETEVR(I)
C       C*****
C       C SET THE EVENT RECORD TYPE FOR THE NEW EVENT RECORD TO
C       C INDICATE A CRASH
C       C*****
      R(RTY,I)=RTYCR

C       C*****
C       C IF THERE WAS NO PREVIOUS CRASH EVENT FOR THIS NODE STAY HERE
C       C*****
      IF(L.NE.0)GOTO 99670
C       C*****
C       C SET UP THE NODE ARRAY SO THAT IT CONTAINS THE INDEX INTO
C       C THE 'R' ARRAY FOR THE FIRST CRASH EVENT FOR THIS NODE
C       C*****
      NODE(INODE)=I
C       C*****
C       C GO INCREMENT THE EVENT COUNTER
C       C*****
      GOTO 99680
C       C*****
C       C WE GOT TO HERE WHEN THERE WAS A PREVIOUS
C       C CRASH EVENT FOR THIS NODE. SO SET UP THE LAST EVENT
C       C TO POINT TO THIS ONE.
C       C*****
99670 R(RCHAIN,L)=I

C       C*****
C       C INCREMENT THE EVENT COUNTER
C       C*****
99680 IEC=IEC+1
C       C*****
C       C FOR THE NEW CRASH EVENT FOR THIS NODE DO THE FOLLOWING.
C       C SET THE START TIME OF THE EVENT TO THE CURRENT LOG TIME
C       C SET THE EVENT TYPE TO 6
C       C SET THE CRASH CODE TO -1
C       C SET THE CRASH LOCATION TO -1
C       C*****
      R(RSTIME,I)=LTIME
      R(RMSG,I)=IR
      R(RCCODE,I)=-1
      R(RCLOC,I)=-1

C*****
C GO LOOK AT NEXT NETWORK EVENT LOG RECORD
C*****
      GOTO 600


C 8   NODE REPORT       TYPE 000A PLI'S
C -   -----------       TYPE 0019 CRASH REPORT
C                       TYPE 80LL PACKET COUNT
C                       TYPE 81LL BAD BORI
C                       TYPE 84LL BAD CHECKSUM
C                       TYPE 8ALL HDLC CHECKSUM ERROR
C                       TYPE 8BLL HDLC ABORT
99800 INODE=NODECK(LSH(IW1,-16),IEVENT,IW1,IW2,$600)
      IR=IAND(IW1,"177777)
      IF(IR.GT.256)GOTO 99850
      IR=IR+800
      IF(IR.EQ.825)GOTO 99825
      IF(IR.NE.810)GOTO 600

C------ TYPE 000A PLI'S
      INEIGH=IAND(LSH(IW2,-16),"77777)
      IPLI=IAND(IW2,"77777)
      ILINE=-1
      GOTO 700

C------ TYPE 0019 CRASH REPORT
99825 ICCODE=LSH(IW2,-24)
      GOTO 1202

C     HANDLE T-II LINK ERRORS
99850 IR=IR/256
      IF(IR.LT.T8LO.OR.IR.GT.T8HI)GOTO 600
      IF(T8SEL(IR-T8LO+1).EQ.0)GOTO 600
      IR=880+MOD(IR,16)
      ILINE=IAND(IW1,"377)
      INEIGH=IAND(LSH(IW2,-16),"7777)
      IF(IR.EQ.880)GOTO 99854
      IF(INEIGH.EQ.0.OR.INEIGH.GT.2047.OR.INEIGH.EQ.INODE)GOTO 600
99854 CONTINUE
C     WRITE(26,99855)LTIME,INODE,INEIGH,ILINE,IR,IW1,IW2
C9855 FORMAT(I10,' N',O4,' E',O4,' L',I2,' L ERR  M',I4,2(1X,O12))

      IF(INODE.EQ.T2LNOD)GOTO 99870
C     CHANGE IN NODE, COMPUTE ERRORS FOR PREVIOUS NODE
      CALL T2LEMK(844,IEC)
      T2LNOD=INODE
      T2LNTM=LTIME

C     FILE AWAY ERRORS FOR THIS NODE
99870 IF(ILINE.LT.32)GOTO 99873
      TYPE 99872,ILINE,INODE,LTIME,IW1,IW2
99872 FORMAT(5X,'ILLEGAL T-II LINE NO.:',I2,' NODE:',O4,' AT:',I10,
     1       ' IW1:',O12,' IW2:',O12)
      GOTO 600
99873 ILINE=ILINE+1
      IF(T2LNER(T2LNEI,ILINE)+T2LNER(T2LNRP,ILINE).NE.-2)GOTO 99874
      T2LINX=T2LINX+1
      T2LINS(T2LINX)=ILINE
99874 IF(IR.EQ.880)GOTO 99885
C       RECEIVE ERRORS ARE A COMBINATION OF:
C------ TYPE 81LL BAD BORI
C------ TYPE 84LL BAD CHECKSUM
C------ TYPE 8ALL HDLC CHECKSUM ERROR
C------ TYPE 8BLL HDLC ABORT
      IF(T2LNER(T2LNEI,ILINE).EQ.-1)GOTO 99884
      IF(T2LNER(T2LNEI,ILINE).EQ.INEIGH)GOTO 99883
      I=ILINE-1
      TYPE 99881,LTIME,INODE,I,T2LNER(T2LNEI,ILINE),INEIGH
99881 FORMAT(5X,'T-II LINE ERROR INCONSISTENT NEIGHBOR',/,
     1       6X,'AT:',I9,' NODE:',O4,' LINE:',I2,' NEIGHS:',O4,',',O4)
      GOTO 600
99883 T2LNER(T2LNRE,ILINE)=T2LNER(T2LNRE,ILINE)+IAND(IW2,"177777)
      GOTO 600
99884 T2LNER(T2LNEI,ILINE)=INEIGH
      T2LNER(T2LNRE,ILINE)=IAND(IW2,"77777)
      GOTO 600
C------ TYPE 80LL PACKET COUNT
99885 T2LNER(T2LNRP,ILINE)=IAND(LSH(IW2,-16),"77777)
      GOTO 600


C 12  NODE ERROR        TYPE 10EE26     CRASH
C --  ----------        TYPE 1PPP40     NEW STYLE LINE ERROR REPORT

1200  INODE=NODECK(IAND(IW1,"7777),IEVENT,IW1,IW2,$600)
      IR=IAND(LSH(IW2,-16),"100077)
      IF(IR.LT."100000)GOTO 600
      IR=IAND(IR,"77)
      IR=1200+IR/8*10+IAND(IR,"7)
      IF(IR.EQ.1240)GOTO 1230
      IF(IR.NE.1226)GOTO 600

C------ TYPE 10EE26     CRASH
C     RECORD THE CRASH REASON (EE) AND CRASH LOCATION.  IF LOCATION
C     ALREADY EXISTS (FROM CRASH COUNT CHANGE), SHOULD BE THE SAME.
      ICCODE=IAND(LSH(IW2,-16-6),"77)
C     CALL NDSTOP(INODE)
1202  CALL EVTFND($1205,RTYCR,INODE,-1,0,I)
      IF(R(RETIME,I).EQ.0)GOTO 1208
      IF(IABS(LTIME-R(RETIME,I)).LE.20)GOTO 1210
      CALL LEDUMP(INODE)
      CALL EVTFND($1205,RTYCR,INODE,-1,0,I)
      CALL EVTCRS(I,INODE)
      GOTO 1202

C     CREATE CRASH RECORD
1205  L=I
      CALL GETEVR(I)
      R(RTY,I)=RTYCR
      IF(L.NE.0)GOTO 1206
      NODE(INODE)=I
      GOTO 1207
1206  R(RCHAIN,L)=I
1207  IEC=IEC+1
      R(RMSG,I)=IR

C     CLOSING CRASH RECORD
1208  R(RETIME,I)=LTIME

C     GET CRASH PARAMTERS AND RECORD.  WE WILL EXAMINE THEM LATER
C     AND IF CRASH COUNT DID'T CHANGE AND WE CAN'T DEDUCE A CRASH
C     FROM LINE OUTAGES, WE WILL DROP THE RECORD AS A RETAKE.
1210  R(RCCODE,I)=ICCODE
      ILOC=IAND(IW2,"177777)
      IF(R(RCLOC,I).NE.-1.AND.R(RCLOC,I).NE.ILOC)
     1  TYPE 1215,INODE,R(RCLOC,I),ILOC,ICCODE,HEX(ICCODE/16+1),
     2            HEX(MOD(ICCODE,16)+1)
1215  FORMAT('     CRASH LOC DIFFERENCE NODE:',O4,1X,O6,1X,O6,
     1       ' CODE O',O3,' H',2A1)
      R(RCLOC,I)=ILOC
      GOTO 600

C------ TYPE 1PPP40     NEW STYLE LINE ERROR REPORT
1230  ILINE=IAND(IW2,"17)
      INEIGH=0

C     WRITE(26,1231)LTIME,INODE,INEIGH,ILINE,IR,IW1,IW2
C1231 FORMAT(I10,' N',O4,' E',O4,' L',I2,' L ERR  M',I4,2(1X,O12))

C       FIND EVENT FOR NODE-LINE/NEIGHBOR
      CALL EVTFND($1240,RTYLS,INODE,ILINE,INEIGH,I)
      R(RMSG,I)=IR
      GOTO 1245
C       CREATE NEW EVENT
1240  CALL LINEVT(RTYLS,INODE,ILINE,INEIGH,IR,IEC,I)
C       ACCUMALATE TOTAL PACKETS AND ERRORS
1245  IERRS=IAND(LSH(IW2,-4),"7777)*8
      IPAKS=IAND(LSH(IW2,-22),"777)*64+IERRS
      IF(IPAKS.NE.0)GOTO 1248
      IERRS=8
      IPAKS=64
C     ERROR RATE = ERRORS/PACKETS, 4 DIGITS OF ACCUMULATION (*10000)
1248  IRATE=IERRS*10000/IPAKS
      R(RLNERR,I)=R(RLNERR,I)+10000000+IRATE
C       COMPUTE ERROR SECONDS
      R(RLETIM,I)=R(RLETIM,I)+256
      GOTO 600



C 18  LINE OUT REPORT
C --  ---------------
1800  ILINE=LSH(IW1,-16)
      INEIGH=0
      INODE=NODECK(IAND(IW1,"177777),IEVENT,IW1,IW2,$600)
      IPLI=IAND(IW2,"177777)
      IR=18
      GOTO 700


C 19  LINK STATUS:      TYPE 0  LINK OVERLOADED
C --  -----------            1  LINK ERROR RATE
C                            2  LINE ATTACHED
C                            3  NEW LINK
C                            4  LINE DETACHED
C                            5  LINK OUT
C                            6  LINK OUT OF BANDWIDTH
1900  INODE=NODECK(LSH(IW1,-16),IEVENT,IW1,IW2,$600)
      ILINE=-1
      IR=IAND(IW1,"177777)+1900
      INEIGH=IAND(IW2,"177777)
      IF(IR.EQ.1900.OR.IR.EQ.1906)GOTO 2605
      IPLI=0
      IF(IR.EQ.1905)GOTO 700
      GOTO 600


C 26  LINE OVERLOADED REPORT
C --  ----------------------
2600  IR=26
      INEIGH=0
      ILINE=LSH(IW1,-16)
      INODE=NODECK(IAND(IW1,"177777),IEVENT,IW1,IW2,$600)
      IF(INODE.LE."1777)GOTO 2605
      INEIGH=ILINE
      ILINE=-1
2605  CONTINUE

C     WRITE(26,2606)LTIME,INODE,INEIGH,ILINE,IR,IW1,IW2
C2606 FORMAT(I10,' N',O4,' E',O4,' L',I2,' L OVLD M',I4,2(1X,O12))

C       FIND EVENT FOR NODE-LINE/NEIGHBOR
      CALL EVTFND($2650,RTYLS,INODE,ILINE,INEIGH,I)

C       IF PREVIOUS OVERLOAD FOR LINE BUT NO UNOVERLOAD, ASSUME 256 SECONDS
      IF(R(ROVTIM,I).NE.0)CALL LOVEND(I)
      R(ROVTIM,I)=LTIME
      R(RMSG,I)=IR
      GOTO 600
C       CREATE NEW EVENT
2650  CALL LINEVT(RTYLS,INODE,ILINE,INEIGH,IR,IEC,I)
      R(ROVTIM,I)=LTIME
      GOTO 600


C 28  LINE OUT OF CHANNELS REPORT
C --  ---------------------------
2800  IR=28
      INEIGH=0
      ILINE=LSH(IW1,-16)
      INODE=NODECK(IAND(IW1,"177777),IEVENT,IW1,IW2,$600)
      IF(INODE.LE."1777)GOTO 2805
      INEIGH=ILINE
      ILINE=-1
2805  CONTINUE

C     WRITE(26,2806)LTIME,INODE,INEIGH,ILINE,IR,IW1,IW2
C2806 FORMAT(I10,' N',O4,' E',O4,' L',I2,' OUT CH M',I4,2(1X,O12))
      GOTO 600



C 33  LINE OK REPORT
C --  --------------
3300  IR=33
      ILINE=LSH(IW1,-16)
      INODE=NODECK(IAND(IW1,"177777),IEVENT,IW1,IW2,$600)
      INEIGH=0
      IF(INODE.LT."2000)GOTO 800
      INEIGH=ILINE
      ILINE=-1
      GOTO 800


C 36  LINE RESET REPORT
C --  -----------------
3600  ILINE=LSH(IW1,-16)
      INEIGH=0
      INODE=NODECK(IAND(IW1,"177777),IEVENT,IW1,IW2,$600)
      IPLI=IAND(IW2,"177777)
      IR=36
      GOTO 700


C 44  CHANGE IN CRASH COUNT
C --  ---------------------
C     CRASH COUNT CHANGED.  THIS CAN BE ERRONEOUS BECAUSE SUPS DO NOT
C     UPDATE EACH OTHER WITH CURRENT COUNT.  BUT SINCE WE KNOW COUNT,
C     WE CAN FIGURE OUT EXCEPT IF SUP CHANGE AND CC = 1, WHICH IS RELOAD.

4400  INODE=NODECK(IAND(IW1,"7777),IEVENT,IW1,IW2,$600)
C     CALL NDSTOP(INODE)
4402  CALL EVTFND($4405,RTYCR,INODE,-1,0,I)
      IF(R(RETIME,I).EQ.0)GOTO 4408
      IF(IABS(LTIME-R(RETIME,I)).LE.20)GOTO 4410
      CALL LEDUMP(INODE)
      CALL EVTFND($4405,RTYCR,INODE,-1,0,I)
      CALL EVTCRS(I,INODE)
      GOTO 4402

C     CREATE CRASH RECORD
4405  L=I
      CALL GETEVR(I)
      R(RTY,I)=RTYCR
      IF(L.NE.0)GOTO 4406
      NODE(INODE)=I
      GOTO 4407
4406  R(RCHAIN,L)=I
4407  IEC=IEC+1
      R(RCCODE,I)=-1
      R(RCLOC,I)=-1
      R(RMSG,I)=44

C     CLOSING CRASH RECORD
4408  R(RETIME,I)=LTIME

C     GET CRASH PARAMTERS AND RECORD.  WE WILL EXAMINE THEM LATER
C     AND IF CRASH COUNT DID'T CHANGE AND WE CAN'T DEDUCE A CRASH
C     FROM LINE OUTAGES, WE WILL DROP THE RECORD AS A RETAKE.
4410  IVER=LSH(IW1,-16)
      INCC=IAND(IW2,"177777)
      ILOC=LSH(IW2,-16)
      ICCC=LSH(CRCNT(INODE),-18)

      IF(ICCC.NE.INCC)GOTO 4470
      IF(ICCC.EQ.IAND(CRCNT(INODE),"777777))TYPE 4409,ISUP,ICCC,INODE
4409  FORMAT(' SUP:',I3,' FORGOT CC:',I4,' NODE:',O4)

4470  CRCNT(INODE)=IOR(INCC,LSH(INCC,18))
      R(RCCNT,I)=LSH(ICCC,18)+INCC
      R(RCLOC,I)=ILOC
      R(RCVER,I)=IVER
      GOTO 600


C 48  LINE UNOVERLOADED REPORT
C --  ------------------------
4800  IR=48
      INEIGH=0
      ILINE=LSH(IW1,-16)
      INODE=NODECK(IAND(IW1,"177777),IEVENT,IW1,IW2,$600)
      IF(INODE.LE."1777)GOTO 4805
      INEIGH=ILINE
      ILINE=-1
4805  CONTINUE

C     WRITE(26,4806)LTIME,INODE,INEIGH,ILINE,IR,IW1,IW2
C4806 FORMAT(I10,' N',O4,' E',O4,' L',I2,' L UNOV M',I4,2(1X,O12))

C       FIND EVENT FOR NODE-LINE/NEIGHBOR
      CALL EVTFND($4850,RTYLS,INODE,ILINE,INEIGH,I)

C       IF NO PREVIOUS OVERLOAD FOR LINE , ASSUME 256 SECONDS
      IF(R(ROVTIM,I).EQ.0)R(ROVTIM,I)=LTIME-256
      R(RMSG,I)=IR
4810  R(ROVCNT,I)=R(ROVCNT,I)+1000000+LTIME-R(ROVTIM,I)
      R(ROVTIM,I)=0
      GOTO 600

C       CREATE NEW EVENT
4850  CALL LINEVT(RTYLS,INODE,ILINE,INEIGH,IR,IEC,I)
      R(ROVTIM,I)=LTIME-256
      GOTO 4810


C 54  END OF TAKEOVER
C -   ---------------
C     THE NODE HAS COME BACK, RECORD EVENT END TIME.

5400  IR=54
      INODE=NODECK(IAND(IW1,"7777),IEVENT,IW1,IW2,$600)
C     CALL NDSTOP(INODE)
5405  CALL EVTFND($5410,RTYCR,INODE,-1,0,I)
      IF(R(RETIME,I).EQ.0)GOTO 5440
      IF(IABS(LTIME-R(RETIME,I)).LE.20)GOTO 600
      CALL LEDUMP(INODE)
      CALL EVTFND($5410,RTYCR,INODE,-1,0,I)
      CALL EVTCRS(I,INODE)
      GOTO 5405

5410  L=I
      CALL GETEVR(I)
      R(RTY,I)=RTYCR
      IF(L.NE.0)GOTO 5420
      NODE(INODE)=I
      GOTO 5430
5420  R(RCHAIN,L)=I
5430  IEC=IEC+1
      R(RCCODE,I)=-1
      R(RCLOC,I)=-1
      R(RMSG,I)=54
5440  R(RETIME,I)=LTIME
      IF(R(RCCNT,I).EQ.0)R(RCCNT,I)=
     1  IOR(IAND(CRCNT(INODE),"777777000000),
     2      LSH(CRCNT(INODE),-18))
      GOTO 600


C 57  ZAPPER RECEIVED ON COMMAND CIRCUIT
C -   ----------------------------------
C     THIS IS THE FIRST SIGN OF A CRASH, START CRASH EVENT.

5700  IR=57
      GOTO 99601


C 65  T-I SIDE OF T-I/T-II LINK OUT OF CHANNELS
C --  -----------------------------------------
6500  IR=65
      ILINE=-1
      INEIGH=LSH(IW2,-16)
      INODE=NODECK(IAND(IW2,"177777),IEVENT,IW1,IW2,$600)

      WRITE(26,6506)LTIME,INODE,INEIGH,ILINE,IR,IW1,IW2
6506  FORMAT(I10,' N',O4,' E',O4,' L',I4,' OUT CHANS',I4,2(1X,O12))
      GOTO 600

999   CONTINUE
      END



CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                     C
C       THE FOLLOWING IS A LIST OF SUBOUTINES CALLED BY THIS PROGRAM  C
C                                                                     C
C       SUBROUTINES IN THIS FILE (NEVCON.FTF)                         C
C       -------------------------------------                         C
C                                                                     C
C       GETEVR - GET EMPTY EVENT RECORD                               C
C       PUTEVR - RETURN EVENT RECORD TO FREE LIST                     C
C       EVTDCH - DECHAIN AN EVENT                                     C
C       EVTFND - FIND AN EXISTING EVENT                               C
C       LETRC - TRACE A LINE EVENT BASES ON NODE NUMBER               C
C       HEXFMT - CONVERT INTERGER TO HEX A5 ARRAY                     C
C       LNEVNG - FIND ALL LINE EVENTS FROM THE NEIGHBOR POINT OF      C
C                FIEW FOR A PARTICULAR NODE                           C
C       LINECR - DEDUCE IF A CRASH HAS OCCURED FOR A PARTICULAR NODE  C
C       EVTLIN - WRITE LINE EVENT TO DISK - DISCARDING DUKPLICATES    C
C       LINCON - WRITE LINE EVENT TO DISK -CONSOLIDATING DUPLICATES   C
C       LEDUMP - OUTPUT ALL CLOSED LINE EVENTS THAT CONTAIN A         C
C                PARTICULAR NODE.                                     C
C       EVTCRS - WRITE A CRASH EVENT TO DISK                          C
C       CRANAL - ANALYZE CRASH EVENT DATA TO SEE IF IT IS REAL        C
C       NDSTOP - CK IF THIS IS THE NODE TO STOP ON - DEBUGGING        C
C       TMSTOP - CK IF THIS IS THE TIME TO STOP ON - DEBUGGING        C
C       IRUSE  - FUNCTION - COUNT NUMBER OF EVENT RECORDS IN USE      C
C       LSDUMP - OUTPUT ALL CLOSED LINE STATISTICS THAT CONTAIN A     C
C                PARTICULAR NODE                                      C
C       LOVEND - END A LINE OVERLOAD WHEN NO OVERLOAD IS AVAILABLE    C
C       LINEVT - ESTABLISH A NEW LINE EVENT                           C
C       T2LEMK - MAKE T-II LINE ERROR EVENTS FROM DATA ACCULLULATED   C
C                FROM LOG IN ARRAY T2LNER                             C
C       NODECK - CHECKS TH NODE NUMBER VALUE SPECIFIED                C
C                                                                     C
C       SUBROUTINES IN FILE T2NEIGH.FTF                               C
C       -------------------------------                               C
C                                                                     C
C       PT2N   - RECORD A NEIGHBOR FOR A T-II NODE                    C
C       GT2N   - GET A NEIGHBOR FOR A T-II NODE

C       SUBROUTINES IN FILE CCDB.FTF                                  C
C       ----------------------------                                  C
C                                                                     C
C       CCINIT - INIT THE CRASH COUNT TABLE                           C
C       CCUPD - SAVE CRASH COUNT TABLE FOR CURRENT SUP AND LOAD FOR   C
C                NEW SUP                                              C
C       CCEND  - UPDATE MASTER CRASH COUNT DATA BASE                  C
C                                                                     C
C       SUBROUTINES IN FILE GTDBLK.FTF                                C
C       ------------------------------                                C
C                                                                     C
C       GTDBLK - GET NEXT DISK BLOCK FROM SPECIFIED FILE              C
C                                                                     C
C       C                                                               C
C       SUBROUTINES IN FILE JULIAN.FTF                                C
C       ------------------------------                                C
C                                                                     C
C       JULIAN - COMPUTE JULIAN SECOND USING BASE YEAR OF 1974        C
C       MDYHMS - CONVERT JULIAN SECONDS BASED ON 1974 TO MONTH,       C
C                DAY, YEAR, HOUR, MINUTE,SECOND                       C
C       DTFRMT - CONVERT JULIAN DATE INTO 4A5 ARRAY                   C
C                FORMAT: MM/DD/YYYY HR:MN:SC                          C
C                                                                     C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

      SUBROUTINE GETEVR(I)
C     --------------------
C     SUBROUTINE TO GET AN EMPTY EVENT RECORD FROM THE FREE LIST.  IF
C     NONE, GIVE ERROR AND EXIT.

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C     IEUSKE=IEUSKE+1
C     IF(MOD(IEUSKE,10).NE.0)GOTO 30001
C     IF(IRUSE(I).NE.4343)GOTO 30040
30001 IF(RFREE.EQ.0)GOTO 30010
      I=RFREE
      RFREE=R(RCHAIN,I)
      DO 30005 J=1,RSZ
30005 R(J,I)=0
      R(RLINE,I)=-1
      RETURN

30010 I=IRUSE(I)
      TYPE 30030,I
30030 FORMAT(' ERROR, 4343 (ALL) EVENT RECORDS GONE, IN USE:',I4)
      PAUSE
      CALL NEXIT

30040 I=IRUSE(I)
      TYPE 30045,I
30045 FORMAT(' MISSING EVENT RECORDS, S/B 4343, IS:',I4)
      PAUSE
      CALL NEXIT
      END



      SUBROUTINE PUTEVR(I)
C     --------------------
C     SUBROUTINE TO RETURN AN EVENT RECORD TO THE FREE LIST.

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      R(RCHAIN,I)=RFREE
      RFREE=I
      RETURN
      END



      SUBROUTINE EVTDCH(I,INODE)
C     --------------------------
C     SUBROUTINE TO DECHAIN AN EVENT.
C       I = EVENT RECORD ADDRESS IN R()
C       INODE = NODE NUMBER
C
C     NOTE - USER MUST RETURN EVENT RECORD.

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

      J=NODE(INODE)
      IF(J.EQ.I)GOTO 32025
32010 IF(R(RCHAIN,J).EQ.I)GOTO 32030
      J=R(RCHAIN,J)
      IF(J.NE.0)GOTO 32010
      TYPE 32015,I,INODE
32015 FORMAT(' SUBROUTINE EVTDCH, NO RECORD:',I5,' FOR NODE:',O4)
      CALL NEXIT

32025 NODE(INODE)=R(RCHAIN,I)
      RETURN

32030 R(RCHAIN,J)=R(RCHAIN,I)
      RETURN
      END



      SUBROUTINE EVTFND($,ITYPE,INODE,ILINE,INEIGH,I)
C     -----------------------------------------------
C     SUBROUTINE TO FIND AN EXISTING EVENT.
C
C     INPUT:    ITYPE  -TYPE OF EVENT TO LOOK FOR.
C               INODE  -NODE FOR EVENT WANTED.
C               ILINE  -LINE FOR NODE, -1 IF NOT KNOWN OR DON'T CARE.
C               INEIGH -NEIGHBOR FOR NODE, 0 IF NOT KNOWN OR DON'T CARE.
C
C     OUTPUT:   I      -INDEX OF EVENT IF FOUND
C                      -INDEX OF LAST IN CHAIN FOR NODE IF NOT FOUND
C
C     RETURNS:  NORMAL         -EVENT FOUND
C               RETURN 1       -EVENT NOT FOUND

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

      I=NODE(INODE)
      IF(I.EQ.0)RETURN 1
33010 IF(R(RTY,I).NE.ITYPE)GOTO 33030
      IF(ILINE.NE.-1)GOTO 33020
      IF(INEIGH.EQ.0)RETURN
      IF(R(RNEIGH,I).EQ.INEIGH)RETURN
      GOTO 33030
33020 IF(R(RLINE,I).EQ.ILINE)RETURN
33030 L=I
      I=R(RCHAIN,L)
      IF(I.NE.0)GOTO 33010
      I=L
      RETURN 1
      END



      SUBROUTINE LETRC(LTIME,IEVENT,IW1,IW2,IR,INODE,ILINE,INEIGH,IPLI)
C     -----------------------------------------------------------------
C     SUBROUTINE TO TRACE A LINE EVENT BASED ON NODE NUMBER.
C
C     SELECTION CRITERIA IS PATCHED IN EACH TIME.

      INTEGER LDATE(4),HEXW1(2),HEXW2(2)

      RETURN
      IF((INODE.NE."1316.OR.ILINE.NE.2).AND.
     1   (INODE.NE."1650.OR.ILINE.NE.13))RETURN
      CALL HEXFMT(IW1,8,HEXW1)
      CALL HEXFMT(IW2,8,HEXW2)
      CALL DTFRMT(LTIME,LDATE)
      WRITE(26,40010)LDATE,LTIME,IEVENT,IW1,IW2,IR,INODE,ILINE,
     1           INEIGH,IPLI,HEXW1,HEXW2
40010 FORMAT(1X,4A5,' (',I9,') EVENT:',I3,7X,'DATA:',O11,1X,O11,/,
     1       2X,' IR:',I5,' NODE:',O4,' LINE:',I2,' NEIGH:',O4,' PLI:',
     2       I3,'   HEX:',3X,A5,A3,4X,A5,A3)
      RETURN
      END



      SUBROUTINE HEXFMT(IN,ID,HEX)
C     ----------------------------
C     SUBROUTINE TO CONVERT INTEGER TO HEX A5 ARRAY.
C
C     INPUT:    IN     -INPUT INTEGER.
C               ID     -DIGIT COUNT TO CONVERT, LAST DIGITS OF WORD USED.
C
C     OUTPUT:   HEX    -OUTPUT A5 ARRAY.

      INTEGER HEX(1)
      I=IN
      DO 41050 J=ID,1,-1
      K=IAND(I,"17)
      IF(K.GT.9)K=K+7
      CALL PUTC(J,HEX,K+48)
41050 I=LSH(I,-4)
      I=MOD(ID,5)
      IF(I.EQ.0)RETURN
      DO 41080 J=ID+1,ID+5-I
41080 CALL PUTC(J,HEX,32)
      RETURN
      END



      SUBROUTINE LNEVNG(INODE,IEVC,IEVENT,IENODE)
C     -------------------------------------------
C     SUBROUTINE TO FIND ALL THE LINE EVENTS FROM THE NEIGHBORS POINT
C     OF VIEW FOR A PARTICULAR NODE.
C
C     INPUT:    INODE  -NODE NUMBER TO FIND EVENTS FOR.
C
C     OUTPUT:   IEVC   -NUMBER OF EVENTS FOUND, 0-32.
C               IEVENT -32 ELEMENT ARRAY CONTAINING RECORD INDEXES
C                       FOR EVENTS FOUND.
C               IENODE -NODES FOR RECORDS SELECTED, 32 ELEMENT ARRAY.

      INTEGER IEVENT(1),IENODE(1)
C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

      IEVC=0
      IF(INODE.GT."1777)GOTO 37130

      DO 37120 I=0,15
      ILINE=-1
      CALL NNDAT($37125,INODE,I,NEIGH)
      IF(NEIGH.LE."1777)CALL NNDAT($37120,NEIGH,ILINE,INODE)
      CALL EVTFND($37120,RTYLO,NEIGH,ILINE,INODE,J)
      IF(IEVC.EQ.0)GOTO 37115
      DO 37110 K=1,IEVC
      IF(IEVENT(K).EQ.J)GOTO 37120
37110 CONTINUE
37115 IEVC=IEVC+1
      IF(IEVC.GT.32)GOTO 37190
      IEVENT(IEVC)=J
      IENODE(IEVC)=NEIGH
37120 CONTINUE
37125 RETURN

37130 I=INODE
37135 CALL GT2N($37150,I,NEIGH)
      ILINE=-1
      IF(NEIGH.LE."1777)CALL NNDAT($37135,NEIGH,ILINE,INODE)
      CALL EVTFND($37135,RTYLO,NEIGH,ILINE,INODE,J)
      IF(IEVC.EQ.0)GOTO 37145
      DO 37140 K=1,IEVC
      IF(IEVENT(K).EQ.J)GOTO 37135
37140 CONTINUE
37145 IEVC=IEVC+1
      IF(IEVC.GT.32)GOTO 37190
      IEVENT(IEVC)=J
      IENODE(IEVC)=NEIGH
      GOTO 37135
37150 RETURN

37190 TYPE 37195,INODE,(R(RLINE,IEVENT(I)),R(RNEIGH,IEVENT(I)),I=1,32)
37195 FORMAT(' SUBROUTINE LNEVNG, TOO MANY NEIGHBOR LINE EVENTS FOR',
     1       ' NODE:',O4,32(/,' LINE:',I2,' NEIGHBOR:',O4))
      PAUSE
      CALL NEXIT
      END



      SUBROUTINE LINECR(INODE,ITIME,ICTIME,MATCH,IEVC)
C     ------------------------------------------------
C     SUBROUTINE TO DEDUCE IF A CRASH HAS OCCURED FOR A PARTICULAR
C     NODE BY LOOKING AT THE LINE EVENTS FOR THAT NODE FROM THE
C     NEIGHBORS POINT OF VIEW.
C
C     A CRASH HAS OCCURED IF THE MAJORITY OF THE LINE EVENTS THAT
C     HAVE A CLOSE END TIME TO THAT SPECIFIED OR NO END TIME HAVE A
C     COMMON START TIME GREATER THAN THE EXPECTED END TIME.
C
C     INPUT:    INODE  -NODE OF INTEREST.
C               ITIME  -END TIME OF EXPECTED CRASH
C               ICTIME -COMMON START TIME TO FIND, 0 IF ANY.
C
C     OUTPUT:   ICTIME -IF CRASH DEDUCED, START TIME OF CRASH,
C                       0 IF UNKNOWN.
C                      -IF NO CRASH, -1.
C               MATCH  -NUMBER OF EVENTS THAT MATCHED CRITERIA.
C               IEVC   -NUMBER OF EVENTS EXAMINED.

      INTEGER IEVENT(32),IENODE(32)
C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      INTEGER IDATE(4),JDATE(4)

      CALL LNEVNG(INODE,IEVC,IEVENT,IENODE)
      IF(IEVC.LT.2)GOTO 37240

      DO 37230 I=1,IEVC/2+1
      IF(I.EQ.IEVC)GOTO 37230
      ICT=R(RSTIME,IEVENT(I))
      IF(ICT.GT.ITIME)GOTO 37230
      IF(ICTIME.EQ.0)GOTO 37205
      IF(IABS(ICT-ICTIME).GT.36)GOTO 37230
      ICT=ICTIME
37205 ICTS=ICT
      MATCH=1
      DO 37220 J=I+1,IEVC
      IF(R(RETIME,IEVENT(J)).EQ.0)GOTO 37210
      IF(IABS(ITIME-R(RETIME,IEVENT(J))).GT.20)GOTO 37220
37210 IF(IABS(ICT-R(RSTIME,IEVENT(J))).GT.36)
     1  GOTO 37220
      MATCH=MATCH+1
      IF(R(RSTIME,IEVENT(J)).LT.ICTS)ICTS=R(RSTIME,IEVENT(J))
37220 CONTINUE

      IF(IEVC.EQ.2.AND.MATCH.NE.2)GOTO 37230
      IF(MATCH.LT.(IEVC+1)/2)GOTO 37230
      ICTIME=ICTS
      RETURN
      CALL DTFRMT(ICTS,IDATE)
      CALL DTFRMT(ITIME,JDATE)
      TYPE 37225,INODE,MATCH,IEVC,ICTS,ITIME,IDATE,JDATE
37225 FORMAT(' THINK I HAVE A CRASH FOR NODE:',O4,' PROB',I3,'/',I2,
     1       2I10,/,'       FROM:',4A5,' TO:',4A5)
      RETURN
37230 CONTINUE
37240 ICTIME=-1
      RETURN
      END



      SUBROUTINE EVTLIN(I,INODE,IOPT)
C     -------------------------------
C     SUBROUTINE TO WRITE A LINE EVENT TO DISK DISCARDING THOSE CAUSED
C     BY CRASHES AND DUPLICATE EVENTS REPORTED BY THE LINES NEIGHBOR.
C       I = EVENT RECORD ADDRESS IN R()
C       INODE = NODE NUMBER
C       IOPT  = OPTIONS, 0 = APPEND RECORD IF CRASH OPEN
C                        1 = WRITE RECORD IF CRASH OPEN

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C     IF WE HAVE CRASHED RECENTLY, SEE IF OUR LINE CAME UP RIGHT
C     AFTER THE CRASH.
C     CALL NDSTOP(INODE)
      IF(R(RPLI,I).NE.0)GOTO 31090
      CALL EVTFND($31090,RTYCR,INODE,-1,0,N)
      CALL CRANAL($31090,$31090,INODE,N)
      IF(R(RSTIME,I).EQ.0)GOTO 31010
      IF(IABS(R(RSTIME,I)-R(RETIME,N)).GT.36)GOTO 31090
31010 IF(IABS(R(RETIME,I)-R(RETIME,N)).GT.140)GOTO 31090

C     SEE IF NEIGHBOR HAS AN EVENT TO CORRESPOND TO OURS
      NEIGH=R(RNEIGH,I)
      ILINE=R(RLINE,I)
      IF(NEIGH.EQ.0)CALL NNDAT($31090,INODE,ILINE,NEIGH)
C     CALL NDSTOP(NEIGH)
      JLINE=-1
      IF(NEIGH.LT."2000)CALL NNDAT($31090,NEIGH,JLINE,INODE)
      CALL EVTFND($31090,RTYLO,NEIGH,JLINE,INODE,J)
      IF(IABS(R(RETIME,I)-R(RETIME,J)).GT.36)GOTO 31090
      CALL LINCON(J,NEIGH,IOPT)

C     SEE IF NEIGHBOR CAUSED OUR LINE EVENT TO BE CONSOLIDATED.
C     IF SO, WE'RE DONE, ELSE OUTPUT OURS.
      CALL EVTFND($31095,RTYLO,INODE,ILINE,NEIGH,I)
31090 CALL LINCON(I,INODE,IOPT)
31095 RETURN
      END



      SUBROUTINE LINCON(I,INODE,IOPT)
C     -------------------------------
C     SUBROUTINE TO WRITE A LINE EVENT TO DISK DISCARDING THOSE CAUSED
C     BY CRASHES AND CONSOLIDATING DUPLICATE EVENTS REPORTED BY
C     THE LINE'S NEIGHBOR.
C       I = EVENT RECORD ADDRESS IN R()
C       INODE = NODE NUMBER
C       IOPT  = OPTIONS, 0 = APPEND RECORD IF CRASH OPEN
C                        1 = WRITE RECORD IF CRASH OPEN

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      IRN=1

C     DETERMINE IF NEIGHBOR HAS A CRASH RECORD PRESENT
      JLINE=-1
      NEIGH=R(RNEIGH,I)
      IF(NEIGH.EQ.0)CALL NNDAT($31170,INODE,R(RLINE,I),NEIGH)
C8765 GOTO 31170
      CALL EVTFND($31130,RTYCR,NEIGH,-1,0,N)
      CALL CRANAL($31130,$31125,NEIGH,N)

C     DETERMINE IF LINE EVENT FITS WITHIN NEIGHBOR'S CRASH BASED ON
C     LINE START TIME.
      IF(R(RSTIME,I).EQ.0)GOTO 31130
      IF(R(RSTIME,N).EQ.0)GOTO 31102
      IF(R(RSTIME,I).LT.R(RSTIME,N)-20)GOTO 31130
      IF(R(RSTIME,I).GT.R(RSTIME,N)+16+20)GOTO 31110

C     DETERMINE IF LINE EVENT FITS WITHING NEIGHBOR'S CRASH BASED ON
C     LINE END TIME.
31102 IF(R(RETIME,I).EQ.0)GOTO 31115
      J=20
      IF(INODE.LE."1777)J=120
      IF(R(RETIME,I).GT.R(RETIME,N)+20+J)GOTO 31120

C     LINE EVENT FITS WITHIN NEIGHBOR'S CRASH.  MAKE SURE NEIGHBOR
C     DOES NOT HAVE A SIMILAR EVENT.  IF SO, SOMETHINGS WRONG WITH
C     OUR LOGIC.
      JLINE=-1
      IF(NEIGH.LE."2000)CALL NNDAT($31105,NEIGH,JLINE,INODE)
      CALL EVTFND($31105,RTYLO,NEIGH,JLINE,NEIGH,J)
      IF(R(RSTIME,N).EQ.0)GOTO 31105
      IF(R(RSTIME,J).GT.R(RSTIME,N)+16+20.AND.
     1   R(RSTIME,J).LT.R(RETIME,N)-20)GOTO 31192
      IF(R(RETIME,J).GT.R(RSTIME,N)+16+20.AND.
     1   R(RETIME,J).LT.R(RETIME,N)-20)GOTO 31192

C     SINCE LINE EVENT WAS CAUSED BY CRASH, COUNT ANY PLI'S AGAINST
C     CRASH AND DISCARD LINE EVENT.  IF NEIGHBOR HAS EVENT WITH SAME
C     END TIME AND UNKNOW START TIME OR START TIME GT THIS START
C     TIME AND NO PLI'S, IT IS SAME EVENT, DISCARD TOO.
31105 R(RPLI,N)=R(RPLI,N)+R(RPLI,I)
      IF(R(RSTIME,N).EQ.0)R(RSTIME,N)=R(RSTIME,I)
C     TYPE 31106,INODE,R(RLINE,I),NEIGH,R(RSTIME,I),R(RETIME,I)
31106 FORMAT(' DISCARD NODE:',O4,' LINE:',I2,' NEIGH:',O4,' TIME:',
     1       I9,'-',I9)

C     CALL NDSTOP(NEIGH)
      JLINE=-1
      IF(NEIGH.LT."2000)CALL NNDAT($31190,NEIGH,JLINE,INODE)
      CALL EVTFND($31190,RTYLO,NEIGH,JLINE,INODE,J)
      IF(IABS(R(RETIME,I)-R(RETIME,J)).GT.20)GOTO 31190
      IF(R(RSTIME,J).EQ.0)GOTO 31108
      IF(R(RSTIME,J).LT.R(RSTIME,I))GOTO 31190
31108 IF(R(RPLI,J).NE.0)GOTO 31190
      CALL EVTDCH(J,NEIGH)
      CALL PUTEVR(J)
      GOTO 31190

C     DETERMINE IF LINE EVENT STARTED INSIDE THE CRASH EVENT.
C     IF SO, THERE CAN'T BE ANY PLI'S IF LOGIC WORKS.  IN ANY
C     CASE, THE EVENT WAS'T CAUSED BY CRASH, OUTPUT NORMALLY.
31110 J=20
      IF(INODE.LE."1777)J=120
      IF(R(RSTIME,I).GT.R(RETIME,N)+20+J)GOTO 31130
      IF(R(RPLI,I).EQ.0)GOTO 31130

      TYPE 31112,INODE,R(RLINE,I),R(RPLI,I),R(RSTIME,I),R(RETIME,I),
     1           NEIGH,R(RPLI,N),R(RSTIME,N),R(RETIME,N)
31112 FORMAT(' SUBROUTINE EVTLIN, LINE EVENT WITHIN NEIGHBOR CRASH',/,
     1       '  NODE:',O4,' LINE:',I2,' PLI:',I3,I10,'-',I9,/,
     2       '  NEIGH:',O4,' PLI:',I3,I10,'-',I9)
      GOTO 31130

C     LINE EVENT HAS NO END TIME, BUT LINE EVENT START TIME IS WITHIN
C     CRASH EVENT.  COUNT LINES'S PLI'S AGAINST CRASH, BUT RESTART
C     LINE EVENT AT CRASH END SINCE LINE DID NOT COME BACK UP WITH NODE.
31115 CONTINUE

C     LINE EVENT END TIME IS OUTSIDE OF CRASH EVENT, BUT LINE EVENT
C     START TIME IS WITHIN CRASH EVENT.  COUNT LINE'S PLI'S AGAINST
C     CRASH, BUT RESTART LINE EVENT AT CRASH END SINCE LINE DID
C     NOT COME BACK UP WITH NODE.
31120 R(RPLI,N)=R(RPLI,N)+R(RPLI,I)
      R(RSTIME,I)=R(RETIME,N)

C     LINE EVENT FITS WITHIN NEIGHBOR'S CRASH.  MAKE SURE NEIGHBOR
C     DOES NOT HAVE A SIMILAR EVENT.  IF SO, SOMETHINGS WRONG WITH
C     OUR LOGIC.
      JLINE=-1
      IF(NEIGH.LE."2000)CALL NNDAT($31105,NEIGH,JLINE,INODE)
      CALL EVTFND($31105,RTYLO,NEIGH,JLINE,NEIGH,J)
      IF(R(RSTIME,J).GT.R(RSTIME,N)+16+20.AND.
     1   R(RSTIME,J).LT.R(RETIME,N)-20)GOTO 31194
      IF(R(RETIME,J).GT.R(RSTIME,N)+16+20.AND.
     1   R(RETIME,J).LT.R(RETIME,N)-20)GOTO 31194
      GOTO 31130

C     NEIGHBOR HAS A CRASH RECORD OPEN, BUT NOT COMPLETE.  IF LINE
C     EVENT IS COMPLETE, APPEND ANY NEW DATA TO IT BY REMOVING LINE
C     EVENT END TIME.
31125 IF(R(RETIME,N).NE.0.OR.IOPT.NE.0)GOTO 31130
      R(RETIME,I)=0
      RETURN

C     LINE EVENT NOT ASSOCIATED WITH CRASH, SEE IF NEIGHBOR HAS EVENT
C     FROM OTHER SIDE.
31130 JLINE=-1
      IF(NEIGH.LT."2000)CALL NNDAT($31170,NEIGH,JLINE,INODE)
      CALL EVTFND($31170,RTYLO,NEIGH,JLINE,INODE,J)

C     NEIGHBOR HAS AN EVENT FOR LINE, IF END TIMES CLOSE, ASSUME
C     SAME EVENT
      IF(IABS(R(RETIME,I)-R(RETIME,J)).LE.20)GOTO 31135

C     END TIMES NOT CLOSE.  SINCE WE DON'T ALWAYS GET LINK OK FOR
C     BOTH SIDES, IF ONE END TIME IS UNKNOW AND BOTH START TIMES
C     ARE CLOSE, ASSUME SAME EVENT.
      IF(IABS(R(RSTIME,I)-R(RSTIME,J)).GT.20+16)GOTO 31170
      IF(R(RETIME,I).EQ.0.OR.R(RETIME,J).EQ.0)GOTO 31135

C     STARTTIMES CLOSE, IF T-I/T-II LINK, ALLOW MORE TIME ON END TIMES
      IF(IAND(INODE,"6000).EQ.IAND(NEIGH,"6000))GOTO 31170
      IF(IAND(INODE,"6000)*IAND(NEIGH,"6000).NE.0)GOTO 31170
      IF(IABS(R(RETIME,I)-R(RETIME,J)).GT.120+20)GOTO 31170

C     ASSUMED SAME EVENT, FIND MAXIMUM PARAMETERS.
31135 IF(R(RSTIME,I).EQ.0.OR.(R(RSTIME,I).GT.R(RSTIME,J)
     1   .AND.R(RSTIME,J).NE.0))R(RSTIME,I)=R(RSTIME,J)
      IF(R(RETIME,J).GT.R(RETIME,I))R(RETIME,I)=R(RETIME,J)
      R(RNEIGH,I)=NEIGH
C     IF(IABS(R(RPLI,I)-R(RPLI,J)).GT.0)
C    1  TYPE 31140,INODE,NEIGH,R(RSTIME,I),R(RETIME,I),
C    2             R(RPLI,I),R(RPLI,J)
31140 FORMAT(' NPLI DISCREPENCY: ',O4,'/',O4,I10,'-',I9,2I5)
      IF(R(RPLI,I).LT.R(RPLI,J))R(RPLI,I)=R(RPLI,J)
C     IF(IABS(R(RUCNT,I)-R(RUCNT,J)).GT.0)
C    1  TYPE 31142,INODE,NEIGH,R(RSTIME,I),R(RETIME,I),
C    2             R(RUCNT,I),R(RUCNT,J)
31142 FORMAT(' FREQ DISCREPENCY: ',O4,'/',O4,I10,'-',I9,2I5)
      IF(R(RUCNT,I).LT.R(RUCNT,J))R(RUCNT,I)=R(RUCNT,J)
      IF(R(RPLID,I).LT.R(RPLID,J))R(RPLID,I)=R(RPLID,J)
      CALL EVTDCH(J,NEIGH)
      CALL PUTEVR(J)
C2342 IEUSKE=IEUSKE+2
C2340 TYPE 12341,INODE,NEIGH,IEUSKE
C2341 FORMAT(' FOUND LIKE EVENT FOR NODES:',O4,'/',O4,I6)
      IRN=0
      GOTO 31170

31144 GOTO 31170
      TYPE 31146,INODE,R(RLINE,I)
31146 FORMAT(' CAN',1H','T FIND NEIGHBOR FOR NODE:',O4,' LINE:',I3)
      GOTO 31170

31148 GOTO 31170
      TYPE 31150,NEIGH,INODE
31150 FORMAT(' CAN',1H','T FIND LINE FOR NODE:',O4,' NEIGHBOR:',O4)
      GOTO 31170

31152 GOTO 31170
      TYPE 31154,NEIGH,JLINE,INODE,R(RLINE,I),R(RSTIME,I),R(RETIME,I)
31154 FORMAT(' CAN',1H','T FIND NODE:',O4,' LINE:',I3,
     1       ' TO MATCH NODE:',O4,' LINE:',I3,I10,'-',I9)
      IF(INODE.GE."2000)GOTO 31170
      DO 31162 NN=1,2047
      II=NODE(NN)
31156 IF(II.EQ.0)GOTO 31162
      IF(I.EQ.II)GOTO 31160
      IF(IABS(R(RSTIME,I)-R(RSTIME,II)).GT.60)GOTO 31160
      IF(IABS(R(RETIME,I)-R(RETIME,II)).GT.60)GOTO 31160
      IF(IABS(R(RPLI,I)-R(RPLI,II)).GE.3)GOTO 31160
      IF(R(RNEIGH,II).NE.0)GOTO 31160
      TYPE 31158,NN,R(RLINE,II),R(RPLI,II),R(RSTIME,II),R(RETIME,II)
31158 FORMAT('  BUT FOUND NODE:',O4,' LINE:',I3,' NPLI:',I4,I10,'-',I9)
31160 II=R(RCHAIN,II)
      GOTO 31156
31162 CONTINUE
      GOTO 31170

31164 GOTO 31170
      TYPE 31166,INODE,R(RLINE,I),R(RSTIME,I),R(RETIME,I),
     1           NEIGH,JLINE,R(RSTIME,J),R(RETIME,J)
31166 FORMAT(' CLOSE EVENTS NODE:',O4,' LINE:',I3,I10,'-',I9,/,
     1       '              NODE:',O4,' LINE:',I3,I10,'-',I9)


C     CREATE EVENT
C       NODE            OOOO
C       LINE            NN, -1 IF NOT KNOWN
C       NEIGHBOR        OOOO, 0 IF NOT KNOWN
C       LINE            NN, -1 IF NOT KNOWN
C       DOWN TIME       SSSSSSSSSS (SECONDS SINCE 1/1/1974)
C       UP TIME         SSSSSSSSSS (SECONDS SINCE 1/1/1974)
C       TYPE            NNNNN
C       PLI CNT         NNNNN
C       UP COUNT        NNNN
C       PLI FREQ        NNNN
C       REPORTING NODE  N (0=BOTH, 1=1ST, 2=2ND)

31170 IF(NEIGH.GT.INODE)GOTO 31180
      IRN=IRN*2
      WRITE(22,31185)NEIGH,JLINE,INODE,R(RLINE,I),R(RSTIME,I),
     1               R(RETIME,I),R(RMSG,I),R(RPLI,I),R(RUCNT,I),
     2               R(RPLID,I),IRN
      GOTO 31190
31180 WRITE(22,31185)INODE,R(RLINE,I),NEIGH,JLINE,R(RSTIME,I),
     1               R(RETIME,I),R(RMSG,I),R(RPLI,I),R(RUCNT,I),
     2               R(RPLID,I),IRN
31185 FORMAT(O4,I2,O4,I2,2I10,I5,I5,I4,I4,I1)

C     RELEASE EVENT RECORD
31190 CALL EVTDCH(I,INODE)
      CALL PUTEVR(I)
      RETURN


31192 TYPE 31193
31193 FORMAT(' SUBROUTINE EVTLIN, NEIGHBOR HAS EVENT TO BE ATTRIBUTED',
     1       ' TO A CRASH')
      GOTO 31105
      PAUSE
      CALL NEXIT

31194 TYPE 31193
      GOTO 31130
      PAUSE
      CALL NEXIT
      END



      SUBROUTINE LEDUMP(INODE)
C     ------------------------
C     SUBROUTINE TO OUTPUT ALL CLOSED LINE EVENTS THAT CONTAIN
C     A PARTICULAR NODE.
C
C     INPUT     INODE  -NODE NUMBER.

      INTEGER IEVENT(32),IENODE(32)

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C     CALL NDSTOP(INODE)
31210 CALL LNEVNG(INODE,IEVC,IEVENT,IENODE)
      IF(IEVC.EQ.0)GOTO 31230
      DO 31220 I=1,IEVC
      IF(R(RETIME,IEVENT(I)).EQ.0)GOTO 31220
      CALL EVTLIN(IEVENT(I),IENODE(I),0)
31220 CONTINUE

31230 I=NODE(INODE)
31235 IF(I.EQ.0)GOTO 31250
      IF(R(RTY,I).NE.RTYLO)GOTO 31240
      IF(R(RETIME,I).EQ.0)GOTO 31240
      CALL EVTLIN(I,INODE,0)
      GOTO 31230
31240 I=R(RCHAIN,I)
      GOTO 31235

31250 RETURN
      END



      SUBROUTINE EVTCRS(I,INODE)
C     --------------------------
C     SUBROUTINE TO WRITE A CRASH EVENT TO DISK.
C       I = EVENT RECORD ADDRESS IN R()
C       INODE = NODE NUMBER

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C     DETERMINE IF CRASH REAL
      CALL CRANAL($31395,$31330,INODE,I)
      GOTO 31350

C     CRASH EVENT NOT CLOSED, ANALYZE FOR CRASH FROM NEIGHBOR LINE EVENT
31330 J=R(RSTIME,I)
      CALL LINECR(INODE,R(RETIME,I),J,MATCH,IEVC)
      IF(J.LT.0)GOTO 31350
      R(RSTIME,I)=J
      R(RCCODE,I)="1000000+MATCH*"100+IEVC


C     CREATE EVENT
C       NODE            OOOO
C       DOWN TIME       SSSSSSSSSS (SECONDS SINCE 1/1/1974)
C       UP TIME         SSSSSSSSSS (SECONDS SINCE 1/1/1974)
C       TYPE            NNNNN
C       CR VER          OOOOOO
C       OLD CR CNT      NNNNN
C       NEW CR CNT      NNNNN
C       PLI CNT         NNNNN
C       CR CODE TYPE    N       0 = REPORTED
C                               1 = DEDUCED FOR LINE OUTAGE
C                               2 = NOT PRESENT (CHANGE IN CC WITHOUT
C                                   DEDUCTION OR NODE LOST AND DID NOT
C                                   COME BACK).
C       CR CODE         OOOOOO
C       CR LOC          OOOOOO

31350 J1=LSH(R(RCCODE,I),-18)
C     CALL NDSTOP(INODE)
      IF(R(RCCODE,I).EQ.-1)J1=2
      J2=IAND(R(RCCODE,I),"777777)
      J3=IAND(R(RCLOC,I),"777777)
      J4=LSH(R(RCCNT,I),-18)
      J5=IAND(R(RCCNT,I),"777777)
      WRITE(23,31370)INODE,R(RSTIME,I),R(RETIME,I),R(RMSG,I),
     1               R(RCVER,I),J4,J5,R(RPLI,I),J1,J2,J3
31370 FORMAT(O4,I10,I10,I5,O6,I5,I5,I5,I1,O6,O6)

C     RELEASE EVENT RECORD
      CALL EVTDCH(I,INODE)
      CALL PUTEVR(I)
31395 RETURN
      END



      SUBROUTINE CRANAL($,$,INODE,I)
C     ------------------------------
C     SUBROUTINE TO ANALYZE CRASH EVENT DATA TO SEE IF IT'S REAL.
C
C     IF A CRASH CODE EXISTS, SOMETHING THOUGH IT WAS REAL, SO LEAVE
C     ALONE.  IF CRASH COUNT HAS CHANGED, BOTH SUP AND WE SAW IT,
C     SO LEAVE ALONE (EXCEPT FILL IN CRASH CODE BY NEIGHBOR LINE
C     ANALYSIS BELOW).  ELSE:
C      -LOOK AT NODE'S LINES FROM NEIGHBOR'S POINT OF VIEW TRYING
C       TO DEDUCE CRASH (SEE SUBROUTINE LINECR FOR TECHNIQUE).
C       IF NEIGHBORS SAW THE NODE DISAPPEAR, PRODUCE DEDUCED CRASH
C       CODE:   100MMLL         LL=NUMBER OF NEIGHBOR OUR LINES FOUND
C                               MM=NUMBER OF LL'S THAT SUPPORT THE
C                                  SAME EVENT.
C      -IF LAST KNOWN CRASH COUNT WAS 1, NODE COULD HAVE BEEN RELOADED
C       WITHOUT SUP SEEING CC CHANGE.  WE DETECT THIS IF THE NODE LOST
C       TIME IS KNOWN BY LOOKING AT THE DURATION GONE.  IF > 1 MINUTE,
C       WE DEDUCE CRASH WITH CODE:
C               1007700
C      -IF LAST KNOWN CRASH COUNT WAS 1, BUT WE DON'T HAVE CRASH START
C       TIME (WHEN NODE WAS LOST),  IT COULD HAVE HAPPENED YESTERDAY OR
C       COULD BE SUP CHANGE.  IF A SUP CHANGE HAS NOT OCCURED WITHIN
C       5 MINUTES OF THE END TIME (END OF TAKEOVER), DEDUCE CRASH
C       CODE:   1007701
C     IF NONE OF THE ABOVE IS FOUND, WE DISCARD THE CRASH DEDUCING IT
C     WAS A SIMPLE RETAKE OF THE NODE.
C
C     INPUT:    INODE  -NODE NUMBER.
C               I      -CRASH RECORD NUMBER
C
C     OUTPUT:   R(RCCODE,I)    -WILL BE SET IF NO PREVIOUS CRASH CODE
C                               AND THERE LOOKS LIKE THERE WAS A CRASH
C                               FROM LINE EVIDENCE.
C
C     RETURNS:  NORMAL -CRASH PRESENT.
C               +1     -CRASH NOT PRESENT.
C               +2     -CRASH OPEN
C
C     NOTE:    -IF CRASH NOT PRESENT, RECORD WILL BE DISCARDED.

      INTEGER IDATE(4),JDATE(4)

      INTEGER SUPMOV,SUPMVP
      COMMON /SMOVES/SUPMOV(100),SUPMVP

      INTEGER CRCNT,CCSUPT,CCBUF
      COMMON /CCOUNT/CRCNT(2047),CCSUPT(7),CCBUF(128)

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C     RETURN 2 IF CRASH NOT CLOSED.
C     CALL NDSTOP(INODE)
      IF(R(RETIME,I).EQ.0)RETURN 2

C     IF CRASH CODE PRESENT, RETURN
      IF(R(RCCODE,I).NE.-1)RETURN

C     NO CRASH CODE, TRY LINE ANALYSIS
      J=R(RSTIME,I)
      CALL LINECR(INODE,R(RETIME,I),J,MATCH,IEVC)
      IF(J.LT.0)GOTO 31950
      R(RSTIME,I)=J
      R(RCCODE,I)="1000000+MATCH*"100+IEVC
      RETURN

C     LINES CAN'T SUPPORT CRASH, IF CRASH CODE CHANGED, BOTH
C     WE AND SUP SAW IT, LEAVE AS CRASH.  IF NO CHANGE AND IS ONE,
C     COULD BE A RELOAD (NOTE THAT CRASH CODE IS SET BY END OF
C     TAKEOVER TO WHAT WE KNOW IT IS.  THIS IS CHANGED IF WE GET
C     A CHANGE IN CRASH CODE FROM SUP).  ELSE DISCARD.
31950 IF(IAND(R(RCCNT,I),"777777).NE.LSH(R(RCCNT,I),-18))RETURN
      IF(IAND(R(RCCNT,I),"777777).NE.1)GOTO 31990

C     IF STARTIME EXISTS, AND LOST TIME WAS > 1 MINUTE, DEDUCE
C     RELOAD CRASH.
      IF(R(RSTIME,I).EQ.0)GOTO 31960
      IF(IABS(R(RSTIME,I)-R(RETIME,I)).LE.60)GOTO 31990
      R(RCCODE,I)="1007700
      RETURN

C     NO START TIME, IS EITHER NEW SUP RETAKE OR NODE WAS LOST
C     YESTERDAY.  NEW SUP RETAKE IF WITHIN 5 MINUTES OF SUP
C     MOVE.  IF NO NEW SUP, THEN DEDUCE CRASH.
31960 IF(SUPMVP.EQ.0)GOTO 31980
      DO 31970 J=1,SUPMVP
      IF(R(RETIME,I).LT.SUPMOV(J))GOTO 31980
      IF(R(RETIME,I).LT.SUPMOV(J)+5*60)GOTO 31990
31970 CONTINUE
31980 R(RCCODE,I)="1007701
      RETURN

C     CAN'T DEDUCE CRASH, SO MUST HAVE ONLY BEEN A RETAKE.
C     DISCARD CRASH RECORD.
31990 CALL EVTDCH(I,INODE)
      CALL PUTEVR(I)
      RETURN 1
      END



      SUBROUTINE NDSTOP(INODE)
C     ------------------------
C     GIVE DEBUGGING AN OPORTUNITY TO STOP ON SPECIFIED NODE.

      IF(INODE.NE."2056)RETURN
99999 RETURN
      END



      SUBROUTINE TMSTOP(ITIME)
C     ------------------------
C     GIVE DEBUGGING AN OPORTUNITY TO STOP ON SPECIFIED TIME.

      IF(ITIME.NE.251214760)RETURN
99999 RETURN
      END



      FUNCTION IRUSE(I)
C     -----------------
C     COUNT THE NUMBER OF EVENT RECORDS IN USE

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

      I=0
      IF(RFREE.EQ.0)GOTO 30115
      J=RFREE
30112 I=I+1
      J=R(RCHAIN,J)
      IF(J.NE.0)GOTO 30112

30115 DO 30125 N=1,"3777
      IF(NODE(N).EQ.0)GOTO 30125
      I=I+1
      J=NODE(N)
30120 IF(R(RCHAIN,J).EQ.0)GOTO 30125
      I=I+1
      J=R(RCHAIN,J)
      GOTO 30120
30125 CONTINUE
      IRUSE=I
      RETURN
      END



      SUBROUTINE LSDUMP(INODE)
C     ------------------------
C     SUBROUTINE TO OUTPUT ALL CLOSED LINE STATISTICS THAT CONTAIN
C     A PARTICULAR NODE.
C
C     INPUT     INODE  -NODE NUMBER.

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C     CALL NDSTOP(INODE)
      CALL EVTFND($34900,RTYLS,INODE,-1,0,I)
      IF(R(ROVTIM,I).NE.0)CALL LOVEND(I)
      IOT=MOD(R(ROVCNT,I),1000000)
      IOC=R(ROVCNT,I)/1000000
      IE=R(RLNERR,I)/10000000
      IR=0
      IF(IE.GT.0)IR=MOD(R(RLNERR,I),10000000)/IE
      IF(IR.GT.9999)IR=9999
      ITIM=MOD(R(RLETIM,I),100000)

C     GET NEIGHBOR'S STATISTICS FOR LINE IF ANY
      JLINE=-1
      NEIGH=R(RNEIGH,I)
      NTIM=0
      NOT=0
      NOC=0
      NE=0
      NR=0
      IF(NEIGH.EQ.0)CALL NNDAT($34200,INODE,R(RLINE,I),NEIGH)
      IF(NEIGH.LT."2000)CALL NNDAT($34200,NEIGH,JLINE,INODE)
      CALL EVTFND($34200,RTYLS,NEIGH,JLINE,INODE,N)
      IF(R(ROVTIM,N).NE.0)CALL LOVEND(N)
      NOT=MOD(R(ROVCNT,N),1000000)
      NOC=R(ROVCNT,N)/1000000
      NTIM=MOD(R(RLETIM,N),100000)
      NE=R(RLNERR,N)/10000000
      IF(NE.GT.0)NR=MOD(R(RLNERR,N),10000000)/NE
      IF(NR.GT.9999)NR=9999
      CALL EVTDCH(N,NEIGH)
      CALL PUTEVR(N)

C     CREATE EVENT
C       NODE                    OOOO
C       LINE                    NN      -1 IF NOT KNOWN
C       NEIGHBOR                OOOO     0 IF NOT KNOWN
C       LINE                    NN      -1 IF NOT KNOWN
C       NODE OVERLOAD TIME      SSSSS   SECONDS
C       NODE OVERLOAD CNT       NNNN
C       NODE RCV ERROR TIME     SSSSS   SECONDS
C       NODE RCV ERROR CNT      CCC
C       NODE RCV ERROR RATE     RRRR    AVERAGE ERROR RATE, %*100
C       NEIGH OVERLOAD TIME     SSSSS   SECONDS
C       NEIGH OVERLOAD CNT      NNNN
C       NEIGH RCV ERROR TIME    SSSSS   SECONDS
C       NEIGH RCV ERROR CNT     CCC
C       NEIGH RCV ERROR RATE    RRRR    AVERAGE ERROR RATE, %*100

34200 IF(NEIGH.GT.INODE)GOTO 34500
      WRITE(27,34510)NEIGH,JLINE,INODE,R(RLINE,I),
     1               NOT,NOC,NTIM,NE,NR,IOT,IOC,ITIM,IE,IR
      GOTO 34600
34500 WRITE(27,34510)INODE,R(RLINE,I),NEIGH,JLINE,
     1               IOT,IOC,ITIM,IE,IR,NOT,NOC,NTIM,NE,NR
34510 FORMAT(2(O4,I2),2(I5,I4,I5,I3,I4))

C     RELEASE EVENT RECORD
34600 CALL EVTDCH(I,INODE)
      CALL PUTEVR(I)

34900 RETURN
      END



      SUBROUTINE LOVEND(I)
C     --------------------
C     END A LINE OVERLOAD WHEN NO UNOVERLOAD IS AVAILABLE.  THIS IS DONE
C     BY ASSUMING 256 OVERLOAD SECONDS.

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

      R(ROVCNT,I)=R(ROVCNT,I)+1000256
      RETURN
      END



      SUBROUTINE LINEVT(ITYPE,INODE,ILINE,INEIGH,IR,IEC,I)
C     ----------------------------------------------------
C     SUBROUTINE TO ESTABLISH A NEW LINE EVENT RECORD.
C
C     INPUT:    ITYPE  -TYPE OF LINE EVENT.
C               INODE  -NODE FOR EVENT.
C               ILINE  -LINE FOR NODE, -1 IF NOT KNOWN OR DON'T CARE.
C               INEIGH -NEIGHBOR FOR NODE, 0 IF NOT KNOWN OR DON'T CARE.
C               IR     -LOG RECORD NUMBER CREATING EVENT.
C               IEC    -EVENT COUNTER
C
C     OUTPUT:   I      -INDEX OF EVENT ESTABLISHED.
C               IEC    -INCREMENTED BY 1.
C               R(X,I) -EVENT RECORD INITIALIZED AS:
C                       R(RLINE,I)= ILINE
C                       R(RNEIGH,I)=INEIGH
C                       R(RMSG,I)=  IR

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

C       CREATE NEW EVENT STARTING NEW CHAIN OR CONTINUING CHAIN
      CALL PT2N(INODE,INEIGH)
      L=INEIGH
      IF(L.EQ.0.AND.INODE.LE."1777)CALL NNDAT($35010,INODE,ILINE,L)
      CALL PT2N(L,INODE)
35010 L=I
      CALL GETEVR(I)
      R(RTY,I)=ITYPE
      IF(L.NE.0)GOTO 35020
      NODE(INODE)=I
      GOTO 35030
C       CONTINUE EVENT CHAIN FOR NODE
35020 R(RCHAIN,L)=I
C       COUNT EVENT & INITIALIZE FOR LINE
35030 IEC=IEC+1
      R(RLINE,I)=ILINE
      R(RNEIGH,I)=INEIGH
      R(RMSG,I)=IR
      RETURN
      END



      SUBROUTINE T2LEMK(IR,IEC)
C     -------------------------
C     THIS SUBROUTINE MAKES T-II LINE ERROR EVENTS FROM DATA ACCUMULATED
C     FROM LOG IN ARRAY T2LNER.  T-II LINE ERROR EVENTS ARE NOT INSTANTANEOUS
C     SINCE THEY COME IN MULTIPLE LOG MESSSAGES.
C
C     INPUT:    IR     -LOG RECORD NUMBER
C               IEC    -EVENT COUNTER
C               /T2LE/ -NAMED COMMON WITH T-II LINE ERROR DATA FOR
C                       NODE T2LNOD.
C
C     OUTPUT:   IEC    -INCREMENTED FOR EACH NEW EVENT CREATED.
C               /T2LE/ -INITIALIZED FOR NEXT NODE.

C     T-II LINE ERROR STATISTICS FOR CURRENT NODE OUTPUTING TO LOG
      INTEGER T2LNOD,T2LNTM,T2LNER,T2LNEI,T2LNRE,T2LNRP,T2LINS,T2LINX
      COMMON /T2LE/T2LNOD,T2LNTM,T2LNER(3,32),T2LNEI,T2LNRE,T2LNRP,
     1             T2LINS(32),T2LINX

C     EVENT RECORD FIELDS
      INTEGER                     R,     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM
      COMMON  NODE(2047),R(10,4343),     RFREE,       RSZ,    RCHAIN,
     1            RSTIME,    ROVTIM,    RETIME,     RLINE,     RCLOC,
     2            RNEIGH,     RCCNT,      RMSG,      RPLI,    ROVCNT,
     3             RUCNT,     RCVER,     RPLID,    RCCODE,       RTY,
     4             RTYLO,     RTYCR,     RTYLS,    RLNERR,    RLETIM

      IF(T2LNOD.EQ.-1)RETURN
      IF(T2LINX.EQ.0)RETURN
      DO 36190 LL=1,T2LINX
      L=T2LINS(LL)
      T2LINS(LL)=0
      IF(T2LNER(T2LNEI,L).EQ.-1)GOTO 36190
      IF(T2LNER(T2LNRP,L).NE.-1)GOTO 36120
C       NO RECEIVE PACKET COUNT FOR ERROR
      I=L-1
C     TYPE 36100,T2LNTM,T2LNOD,I,T2LNER(T2LNEI,L),T2LNER(T2LNRE,L)
36100 FORMAT(5X,'NO RCV PACKET CNT FOR T-II LINE ERROR',/,
     1       6X,'AT',I10,' NODE:',O4,' LINE:',I2,' NEIGH:',O4,
     2       ' ERRS:',I5)
      GOTO 36150
C       FIND EVENT FOR NODE-LINE/NEIGHBOR
36120 CALL EVTFND($36130,RTYLS,T2LNOD,-1,T2LNER(T2LNEI,L),I)
      R(RMSG,I)=IR
      GOTO 36140
C       CREATE NEW EVENT
36130 CALL LINEVT(RTYLS,T2LNOD,-1,T2LNER(T2LNEI,L),IR,IEC,I)
C       ACCUMALATE TOTAL PACKETS AND ERRORS
36140 IERRS=T2LNER(T2LNRE,L)
      IPAKS=T2LNER(T2LNRP,L)+IERRS
C     ERROR RATE = ERRORS/PACKETS, 4 DIGITS OF ACCUMULATION (*10000)
      IRATE=IERRS*10000/IPAKS
      R(RLNERR,I)=R(RLNERR,I)+10000000+IRATE
C2340 TYPE 12341,T2LNOD,T2LNER(T2LNEI,L),R(RLNERR,I)
C       COMPUTE ERROR SECONDS
      IT=MOD(R(RLETIM,I),100000)
      NT=MOD(T2LNTM,3600*24)+1
      LT=R(RLETIM,I)/100000
      IF(LT.EQ.0)GOTO 36145
      ITD=IABS(NT-LT)
      IF((ITD.LE.300).OR.(IABS(ITD-1100).LT.100))IT=IT+ITD-256
36145 R(RLETIM,I)=NT*100000+IT+256
C2341 FORMAT(' LINE ',O4,'-',O4,' RCV ERROR CNT:',I10)
36150 T2LNER(T2LNEI,L)=-1
36190 T2LNER(T2LNRP,L)=-1
      T2LINX=0
      RETURN
      END



      FUNCTION NODECK(NODE,IEVENT,IW1,IW2,$)
C     --------------------------------------
C     THIS FUNCTION CHECKS THE NODE NUMBER VALUE SPECIFIED.  RETURN 5
C     MADE IF NODE ILLEGAL (.LT.1.OR.GT."3777)

      NODECK=NODE
      IF(NODE.GT.0.AND.NODE.LE."3777)RETURN
      TYPE 38010,NODE,IEVENT,IW1,IW2
38010 FORMAT(5X,'ILLEGAL NODE NUMBER:',O6,' EVENT:',I4,
     1       ' IW:',O12,1X,O12)
      RETURN 5
      END
    O@)V