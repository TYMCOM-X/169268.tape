                              ::ROM/IO BOARD CERTIFICATION CODE
                              ::
                              ::
                              ::START TEST BY PRESSING SYSTEM CLEAR ON CPU BOARD OR INI BUTTON ON CONSOLE
                              ::
000  1002 4 00 0 0 8 00 800 0 :TEST1  TEST2,CATN
001  0000 1 00 0 0 8 00 800 0 :       TEST1,TRUE         COUNTER (PAGE 1) AND CATN FLIP-FLOP (PAGE 1) AND
                              ::                         BRANCH SELECTOR (PAGE 8) AND ADDRESS MUXES (PAGE 1)
                              ::                         ARE FUNCTIONAL
                              ::
                              ::PROM ADDRESS MONITOR SHOULD INDICATE 000 AND 001
                              ::
                              ::PRESS "SGL" BUTTON ON CONSOLE
                              ::
002  1002 4 00 0 0 8 30 800 0 :TEST2  TEST2,CATN,,,,,RSCATN   LOOPS HERE IF CONSOLE ATTENTION WILL NOT CLEAR
003  01FE 1 00 0 0 8 00 800 0 :       HITEST,TRUE            BRANCH TO HIGH PROM ADDRESSES
                              ::
                              ::IF PROM ADDRESS MONITOR INDICATES 1FE PRESS "SGL" BUTTON ON CONSOLE
                              ::
004  FF00 0 40 0 4 C 30 800 0 :TEST3  0FF00,,,,CNST,CNCNTL,RSCATN   INITILIZE CONSOLE CONTROL REGISTER
005  0000 0 00 0 4 B 00 800 0 :       000,,,,CNST,CONSOL   ZEROES TO CONSOLE DATA REGISTER
006  FE00 0 00 0 4 C 00 800 0 :       LA,,,,CNST,CNCNTL    SEND LA0 TO CONSOLE
007  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL   TERMINATE LA0
                              ::
                              ::IF RIGHT TWO HEX DIGITS ON CONSOLE ARE ZEROES THEN PRESS "SGL" BUTTON ON CONSOLE
                              ::
008  000A 4 00 0 0 8 00 800 0 :ZEROES ONES,CATN      LOOP UNTILL "SGL" BUTTON IS PRESSED
009  1008 1 00 0 0 8 00 800 0 :       ZEROES,TRUE
00A  00FF 0 00 0 4 B 30 800 0 :ONES   0FF,,,,CNST,CONSOL,RSCATN   FF TO CONSOLE DATA REGISTER
00B  FE00 0 00 0 4 C 00 800 0 :       LA,,,,CNST,CNCNTL    SEND LA0 TO CONSOLE
00C  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL   TERMINATE LA0
00D  100E 1 00 0 0 8 00 800 0 :       LBTST,TRUE    BRANCH AROUND INTERRUPT "20"
                              ::
                              ::IF RIGHT TWO HEX DIGITS ON CONSOLE ARE "FF" THEN PRESS "SGL" BUTTON ON CONSOLE
                              ::
00E  1010 4 00 0 0 8 00 800 0 :LBTST  LBT1,CATN               LOOP UNTILL "SGL"BUTTON IS PRESSED
00F  100E 1 00 0 0 8 00 800 0 :       LBTST,TRUE
010  00A1 0 40 0 4 B 30 800 0 :LBT1     0A1,,,,CNST,CONSOL,RSCATN    THIS SECTION MAKES CONSOLE READ "DEA1"
011  FE00 0 00 0 4 C 00 800 0 :       LA,,,,CNST,CNCNTL
012  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
013  00DE 0 00 0 4 B 00 800 0 :       0DE,,,,CNST,CONSOL
014  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL
015  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
016  00FF 0 00 0 4 B 00 800 0 :       0FF,,,,CNST,CONSOL
017  1019 4 00 0 0 8 00 800 0 :LBT2    SWREG,CATN
018  0017 1 00 0 0 8 00 800 0 :       LBT2,TRUE
                              ::
                              ::
                              ::
                              ::IF RIGHT PORTION OF CONSOLE INDICATES "DEA1" ENTER "FF00" INTO CONSOLE SWITCH
                              ::REGISTER AND PRESS "SGL" BUTTON ON CONSOLE
                              ::
019  F700 0 00 0 4 C 30 800 0 :SWREG  SHR,,,,CNST,CNCNTL,RSCATN   THIS SECTION TRANSFERES "FF00" FROM THE
01A  1000 0 00 0 0 8 00 800 0 :       ,                           SWITCH REGISTER TO THE RIGHT PORTION OF
01B  1000 0 00 0 3 B 00 800 0 :       ,,,,CONSOL,CONSOL           THE CONSOLE DISPLAY
01C  FE00 0 00 0 4 C 00 800 0 :       LA,,,,CNST,CNCNTL
01D  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
01E  00FF 0 00 0 4 B 00 800 0 :       0FF,,,,CNST,CONSOL
01F  EF00 0 00 0 4 C 00 800 0 :       SHL,,,,CNST,CNCNTL
020  1000 0 00 0 0 8 00 800 0 :       ,      WAIT FOR CONSOLE DATA
021  1000 0 00 0 3 B 00 800 0 :       ,,,,CONSOL,CONSOL
022  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL
023  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
024  00FF 0 00 0 4 B 00 800 0 :       0FF,,,,CNST,CONSOL
025  0027 4 00 0 0 8 00 800 0 :SWREG1 SRGTST,CATN
026  1025 1 00 0 0 8 00 800 0 :       SWREG1,TRUE
                              ::
                              ::IF RIGHT PORTION OF DISPLAY IS "FF00" THEN PRESS "WRT" BUTTON ON CONSOLE
                              ::
027  BF00 0 00 0 4 C 30 800 0 :SRGTST SRG,,,,CNST,CNCNTL,RSCATN   THIS SECTION DISPLAYS "85" IN RIGHT MOST
028  1000 0 00 0 3 B 00 800 0 :       ,,,,CONSOL,CONSOL           PORTION OF CONSOLE
029  1000 0 00 0 0 8 00 800 0 :       ,      WAIT FOR CONSOLE DATA
02A  FE00 0 00 0 4 C 00 800 0 :       LA,,,,CNST,CNCNTL
02B  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
02C  00FF 0 00 0 4 B 00 800 0 :       0FF,,,,CNST,CONSOL
02D  102F 4 00 0 0 8 00 800 0 :SRGT1   PCTST,CATN
02E  002D 1 00 0 0 8 00 800 0 :       SRGT1,TRUE
                              ::
                              ::IF CONSOLE INDICATES "FF85" PRESS "SGL" BUTTON ON CONSOLE
                              ::
02F  1000 0 25 0 8 8 30 800 0 :PCTST  ,,B,,ALU,,RSCATN  THIS TESTS BMUX "0", ALU CONTROL "B" AND LOADPC
030  1000 0 25 0 8 8 00 800 0 :       ,,B,,ALU   WAIT FOR LCATN
031  0033 4 25 0 8 8 00 800 0 :PCT1    PCT2,CATN,B,,ALU
032  0031 1 25 0 8 8 00 800 4 :       PCT1,TRUE,B,,ALU,,,,LOADPC
                              ::
                              ::IF B-BUS MONITOR INDICATES "0000" PRESS "SGL" BUTTON ON CONSOLE
                              ::
033  1000 0 2F 0 8 8 30 888 0 :PCT2    ,,A,,ALU,,RSCATN,PC   THIS TESTS AMUX "3" AND ALU CONTROL "A"
034  1000 0 2F 0 8 8 00 800 0 :       ,,A,,ALU   WAIT FOR LCATN
035  1037 4 2F 0 8 8 00 888 0 :PCT3    PCT4,CATN,A,,ALU,,,PC
036  0035 1 2F 0 8 8 00 888 0 :       PCT3,TRUE,A,,ALU,,,PC
                              ::
                              ::IF B-BUS MONITOR INDICATES "0000" PRESS "SGL" BUTTON ON CONSOLE
                              ::
037  BABD 0 25 0 4 8 30 866 0 :PCT4    0BABD,,B,,CNST,,RSCATN,BUS2+BUS3  THIS TESTS B-BUS THROUGH BMUX "6" TO
038  0000 0 00 0 0 8 00 800 4 :       ,,,,,,,,LOADPC                    PC, INCPC AND B-BUS TO PSW
039  1000 0 2F 0 8 A 00 888 8 :       ,,A,,ALU,PSW,,PC,INCPC
03A  003C 4 2F 0 8 8 00 888 0 :PCT5    PSWTST,CATN,A,,ALU,,,PC
03B  003A 1 2F 0 8 8 00 888 0 :       PCT5,TRUE,A,,ALU,,,PC
                              ::
                              ::IF B-BUS MONITOR INDICATES "BABE" AND LIGHT BAR ON CONSOLE IS ILLUMINATED,
                              ::PRESS "SGL" BUTTON ON CONSOLE
                              ::
03C  0000 0 00 0 2 8 30 800 0 :PSWTST ,,,,PSW,,RSCATN   THIS TESTS PSW TO B SIGNAL
03D  0000 0 00 0 2 8 00 800 0 :       ,,,,PSW     WAIT FOR LCATN
03E  0040 4 00 0 2 8 00 800 0 :PSWT1   PSWT2,CATN,,,PSW
03F  003E 1 00 0 2 8 00 800 0 :       PSWT1,TRUE,,,PSW
                              ::
                              ::IF B-BUS MONITOR INDICATES "BABE" PRESS "SGL" BUTTON ON CONSOLE
                              ::
040  0000 0 40 0 4 A 30 800 0 :PSWT2  00000,,,,CNST,PSW,RSCATN  THIS CHECKS WAIT BIT OF PSW
041  1000 0 00 0 0 8 00 800 0 :       ,   WAIT FOR LCATN
042  0044 4 00 0 0 8 00 800 0 :PSWT3   PSWT4,CATN
043  0042 1 00 0 0 8 00 800 0 :       PSWT3,TRUE
                              ::
                              ::IF LIGHT BAR ON CONSOLE IS EXTINGUISHED PRESS "SGL" BUTTON ON CONSOLE
                              ::
044  8000 0 00 0 4 A 30 800 0 :PSWT4  08000,,,,CNST,PSW,RSCATN    TEST WAIT BIT OF PSW
045  1000 0 00 0 0 8 00 800 0 :        ,   WAIT FOR LCATN
046  0048 4 00 0 0 8 00 800 0 :PSWT5   MCTST,CATN
047  1046 1 00 0 0 8 00 800 0 :       PSWT5,TRUE
                              ::
                              ::IF LIGHT BAR ON CONSOLE IS ILLUMINATED PRESS "SGL" BUTTON ON CONSOLE
                              ::
048  00FE 0 25 0 4 8 30 866 0 :MCTST  0FE,,B,,CNST,,RSCATN,BUS2+BUS3  THIS TESTS LOADMC,INCMC AND MC11 BRANCH
049  0000 0 00 0 0 8 00 800 1 :       ,,,,,,,,LOADMC
04A  004D C 00 0 0 8 00 800 2 :       MCRLY,MC11,,,,,,,INCMC
04B  104E C 00 0 0 8 00 800 0 :       REGWR,MC11     CONTINUE TEST IF MC11 OCCURRED PROPERLY
04C  104C 1 00 0 0 8 00 800 0 :MCLAT  MCLAT,TRUE
04D  004D 1 00 0 0 8 00 800 0 :MCRLY  MCRLY,TRUE
                              ::
                              ::IF TEST IS LOOPING AT PROM ADDRESS MCRLY THEN MC11 OCCURRED EARLY
                              ::IF TEST IS LOOPING AT PROM ADDRESS MCLAT THEN MC11 OCCURRED LATE
                              ::
04E  4210 0 65 2 4 8 00 866 0 :REGWR 04210,,B,WR,CNST,,,BUS2+BUS3    THIS TESTS LOAD WR, AND BMUX "BUS2, BUS3"
04F  1051 4 25 0 8 8 00 833 0 :RWR1   RWR2,CATN,B,,ALU,,,WR2+WR3
050  104F 1 25 0 8 8 00 833 0 :       RWR1,TRUE,B,,ALU,,,WR2+WR3
                              ::
                              ::IF B-BUS MONITOR INDICATES "4210" PRESS "SGL" BUTTON ON CONSOLE
                              ::
051  8421 0 25 2 4 8 30 866 0 :RWR2   08421,,B,WR,CNST,,RSCATN,BUS2+BUS3  THIS TESTS REGWRT AND BMUX "L22, L33"
052  0000 0 00 0 0 8 04 800 0 :       ,,,,,,REGWRT
053  1067 4 25 0 8 8 00 811 0 :RWR3   RWR4,CATN,B,,ALU,,,L22+L33
054  0053 1 25 0 8 8 00 811 0 :       RWR3,TRUE,B,,ALU,,,L22+L33
                              ::
                              ::
                              ::      DISPLAY ROUTINE ASSUMES FAILING ADDRESS IS IN WR
                              ::      CAUSES DISPLAY OF "0XYY D1ED" WITH LIGHT BAR ON
055  8000 0 40 0 4 A 04 800 0 :DISPLA 08000,,,,CNST,PSW,REGWRT  WAIT BIT ON, ERROR ADDRESS TO REGISTER
056  00ED 0 00 0 4 B 00 800 0 :       0ED,,,,CNST,CONSOL
057  FE00 0 00 0 4 C 00 800 0 :       LA,,,,CNST,CNCNTL
058  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
059  00D1 0 00 0 4 B 00 800 0 :       0D1,,,,CNST,CONSOL
05A  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL
05B  FF00 0 00 0 0 C 00 800 0 :       0FF00,,,,,CNCNTL
05C  0000 0 25 0 8 B 00 801 0 :       ,,B,,ALU,CONSOL,,L33
05D  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL
05E  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
05F  0000 0 25 0 8 B 00 804 0 :       ,,B,,ALU,CONSOL,,L32
060  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL
061  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
062  0000 0 00 0 4 B 00 800 0 :       000,,,,CNST,CONSOL    BAR CODE
063  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL
064  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL
065  00FF 0 00 0 4 B 00 800 0 :       0FF,,,,CNST,CONSOL
066  0066 1 00 0 0 8 00 800 0 :DSPLP  DSPLP,TRUE   LOOPS HERE AFTER DISPLAYING ERROR ADDRESS
                              ::
                              ::IF B-BUS MONITOR INDICATES "8421" PRESS "SGL" BUTTON ON CONSOLE
                              ::
067  1248 0 65 F 4 8 30 D00 0 :RWR4   01248,,B,LLWR,CNST,,RSCATN,BUS0  THIS TESTS LOAD LEFT WR AND BMUX
068  0000 0 00 0 0 8 04 800 0 :       ,,,,,,REGWRT                     "BUS0, L20, L31"
069  006B 4 25 0 8 8 00 845 0 :RWR5   RWR6,CATN,B,,ALU,,,L20+L31
06A  1069 1 25 0 8 8 00 845 0 :       RWR5,TRUE,B,,ALU,,,L20+L31
                              ::
                              ::IF B-BUS MONITOR INDICATES "1248" PRESS "SGL" BUTTON ON CONSOLE
                              ::
06B  1000 0 00 0 0 8 30 800 0 :RWR6   ,,,,,,RSCATN          THIS TESTS BMUX "L23, L32"
06C  1000 0 00 0 0 8 00 800 0 :        ,   WAIT FOR LCATN
06D  106F 4 25 0 8 8 00 854 0 :RWR7   RWR8,CATN,B,,ALU,,,L23+L32
06E  006D 1 25 0 8 8 00 854 0 :       RWR7,TRUE,B,,ALU,,,L23+L32
                              ::
                              ::IF B-BUS MONITOR INDICATES "2184" PRESS "SGL" BUTTON ON CONSOLE
                              ::
06F  D1A1 0 65 1 4 8 30 D00 0 :RWR8   0D1A1,,B,XWR,CNST,,RSCATN,BUS0   THIS CHECKS BMUX "XWR0"
070  0000 0 25 2 0 8 00 A00 0 :       ,,B,WR,,,,XWR0      XWR TO WR
071  0000 0 00 0 0 8 04 800 0 :       ,,,,,,REGWRT
072  1074 4 25 0 8 8 00 845 0 :RWR9   SPEED,CATN,B,,ALU,,,L20+L31    LATCH BYTES DISPLAYED
073  1072 1 25 0 8 8 00 845 0 :       RWR9,TRUE,B,,ALU,,,L20+L31
                              ::
                              ::IF B-BUS MONITOR INDICATES "D1A1" PRESS "SGL" BUTTON ON CONSOLE
                              ::ERROR CODES WILL BE DISPLAYED ON CONSOLE (E.G. 95 D1ED)
                              ::
                              ::      BEGIN FULL SPEED TESTING
                              ::
074  0000 0 40 0 4 A 30 800 0 :SPEED  00000,,,,CNST,PSW,RSCATN    TURN OFF WAIT BIT
075  0075 0 65 2 4 8 00 866 0 :BRANCH BRANCH,,B,WR,CNST,,,BUS2+BUS3  THIS TESTS BRANCH CONDITIONS: WR0,WR31,
076  1000 0 00 0 0 8 00 800 0 :       ,                              XWR31,G,PSW3,PSW4,PSW6,PSW7 AND LOAD XWR
077  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0     BRANCH TO ERROR IF WR0 SEEMS ON
078  0078 0 25 2 4 8 00 866 0 :BR1    BR1,,B,WR,CNST,,,BUS2+BUS3
079  007D 8 00 0 0 8 00 800 0 :       BR2,G     CONTINUE TEST IF G FLAG IS ON
07A  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR IF G FLAG IS OFF
07B  007D 0 25 2 4 8 00 866 0 :WR31B  BR2,,B,WR,CNST,,,BUS2+BUS3  LOAD FAILURE ADDRESS INTO WR
07C  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE
07D  0000 0 25 2 4 8 00 866 0 :BR2    00000,,B,WR,CNST,,,BUS2+BUS3   ZEROES TO WR
07E  1000 0 00 0 0 8 00 800 0 :       ,   BRANCH CONDITION DELAY
07F  107B 3 00 0 0 8 00 800 0 :       WR31B,WR31     BRANCH TO ERROR IF WR31 SEEMS ON
080  FFFF 0 25 2 4 8 00 D66 0 :BR3    0FFFF,,B,WR,CNST,,,BUS0+BUS2+BUS3   ALL ONES (32) TO WR
081  1000 0 00 0 0 8 00 800 0 :       ,   BRANCH CONDITION DELAY
082  0085 3 00 0 0 8 00 800 0 :       BR4,WR31    CONTINUE TEST IF WR31 SEEMS ON
083  0080 0 65 2 4 8 00 866 0 :       BR3,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
084  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE
085  008A 9 00 0 0 8 00 800 0 :BR4    GOFF,WR0   CONTINUE TEST IF WR0 SEEMS ON
086  0085 0 65 2 4 8 00 866 0 :       BR4,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
087  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE
088  008A 0 65 2 4 8 00 866 0 :GBAD   GOFF,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
089  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE
08A  0088 8 00 0 0 8 00 800 0 :GOFF   GBAD,G     BRANCH TO ERROR IF G FLAG SEEMS ON
08B  008C 0 65 2 4 8 00 866 0 :       BR5,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
08C  0000 0 25 1 4 8 00 806 0 :BR5    000,,B,XWR,CNST,,,BUS3  ZEROES TO XWR
08D  1000 0 00 0 0 8 00 800 0 :       ,   BRANCH CONDITION DELAY
08E  0055 2 00 0 0 8 00 800 0 :       DISPLA,XWR31  BRANCH TO ERROR IF XWR31 SEEMS ON
08F  0092 0 65 2 4 8 00 866 0 :       BR6,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
090  0001 0 65 1 4 8 00 806 0 :       01,,B,XWR,CNST,,,BUS3   0001 TO XWR
091  1000 0 00 0 0 8 00 800 0 :       ,   BRANCH CONDITION DELAY
092  1094 2 00 0 0 8 00 800 0 :BR6    BR7,XWR31    CONTINUE TEST IF XWR31 SEEMS 0N
093  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR IF XWR31 SEEMS OFF
094  0095 0 25 2 4 8 00 866 0 :BR7    BR8,,B,WR,CNST,,,BUS2+BUS3    FAILING ADDRESS TO WR
095  0055 E 00 0 0 8 00 800 0 :BR8    DISPLA,PSW3    BRANCH TO ERROR IF PSW3 SEEMS ON
096  0097 0 65 2 4 8 00 866 0 :       BR9,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
097  1055 F 00 0 0 8 00 800 0 :BR9    DISPLA,PSW4     BRANCH TO ERROR IF PSW4 SEEMS ON
098  0099 0 25 2 4 8 00 866 0 :       BR10,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
099  0055 D 00 0 0 8 00 800 0 :BR10   DISPLA,PSW6   BRANCH TO ERROR IF PSW6 SEEMS ON
09A  009B 0 65 2 4 8 00 866 0 :       BR11,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
09B  0055 7 00 0 0 8 00 800 0 :BR11   DISPLA,PSW7    BRANCH TO ERROR IF PSW7 SEEMS ON
09C  1B00 0 25 0 4 A 00 866 0 :       01B00,,B,,CNST,PSW,,BUS2+BUS3   SET PSW BITS 3,4,6 AND 7
09D  009E 0 65 2 4 8 00 866 0 :       BR12,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
09E  00A0 E 00 0 0 8 00 800 0 :BR12   BR13,PSW3    CONTINUE IF PSW3 SEEMS ON
09F  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE    BRANCH TO ERROR IF PSW3 SEEMS OFF
0A0  10A3 F 00 0 0 8 00 800 0 :BR13   BR14,PSW4    CONTINUE IF PSW4 SEEMS ON
0A1  00A0 0 25 2 4 8 00 866 0 :       BR13,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
0A2  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE     BRANCH TO ERROR IF PSW4 SEEMS OFF
0A3  00A6 D 00 0 0 8 00 800 0 :BR14   BR15,PSW6   CONTINUE IF PSW6 SEEMS ON
0A4  00A3 0 25 2 4 8 00 866 0 :       BR14,,B,WR,CNST,,,BUS2+BUS3    FAILING ADDRESS TO WR
0A5  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE    BRANCH TO ERROR IF PSW6 SEEMS OFF
0A6  00A9 7 00 0 0 8 00 800 0 :BR15   ALUTST,PSW7   CONTINUE IF PSW7 SEEMS ON
0A7  00A6 0 25 2 4 8 00 866 0 :       BR15,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
0A8  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR IF PSW7 SEEMS OFF
                              ::
                              ::      THIS TESTS ALU FUNCTIONS APLUS1,AMIN1,AEXRB AND BRANCH CONDITION CARRY
                              ::
0A9  FFFF 0 25 2 4 8 00 D66 0 :ALUTST 0FFFF,,B,WR,CNST,,,BUS0+BUS2+BUS3     FFFFFFFF TO WR
0AA  0000 0 00 0 0 8 00 880 0 :       ,,APLUS1,,,,,WR     SHOULD CAUSE CARRY
0AB  0000 0 1F 2 0 8 00 880 0 :       ,,AMIN1,WR,,,,WR    FFFFFFFE TO WR
0AC  10AF A 00 0 0 8 00 800 0 :       ALUT1,CARRY   CONTINUE TEST IF APLUS1 OK
0AD  00A9 0 25 2 4 8 00 866 0 :       ALUTST,,B,WR,CNST,,,BUS2+BUS3   FAILURE ADDRESS TO WR
0AE  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR
0AF  10B1 3 00 0 0 8 00 800 0 :ALUT1  ALUT1B,WR31   BRANCH TO ERROR IF WR31 IS ON
0B0  00B3 9 00 0 0 8 00 800 0 :       ALUT2,WR0   CONTINUE TEST IF WR0 IS ON
0B1  00AF 0 25 2 4 8 00 866 0 :ALUT1B ALUT1,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
0B2  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR
0B3  0000 0 00 0 0 8 00 880 0 :ALUT2  ,,APLUS1,,,,,WR    SHOULD NOT CAUSE CARRY
0B4  00B3 0 65 2 4 8 00 866 0 :       ALUT2,,B,WR,CNST,,,BUS2+BUS3   FAILURE ADDRESS TO WR
0B5  1055 A 00 0 0 8 00 800 0 :       DISPLA,CARRY   BRANCH TO ERROR IF CARRY IS ON
0B6  00B3 0 26 2 4 8 00 8E6 0 :EXRTST ALUT2,,AEXRB,WR,,,WR+BUS2+BUS3   SHOULD MAKE WR = 0
0B7  00B6 0 65 1 4 8 00 866 0 :       EXRTST,,B,XWR,CNST,,,BUS2+BUS3   FAILURE ADDRESS TO XWR
0B8  1055 9 25 2 0 8 00 822 0 :       DISPLA,WR0,B,WR,,,,XWR2+XWR3  BRANCH TO ERROR IF WR0 ON--XWR TO WR
0B9  1055 3 00 0 0 8 00 800 0 :       DISPLA,WR31    BRANCH TO ERROR ID WR31 ON
                              ::
                              ::      THIS TESTS BRANCH CONDITION YDCARY, MISCELLANEOUS FUNCTIONS INCYD,
                              ::      DECYD AND B-BUS DESTINATION YD
                              ::
0BA  00BA 0 25 2 4 F 00 866 0 :YDCRY YDCRY,,B,WR,CNST,YD,,BUS2+BUS3   FAILING ADDRESS TO WR
0BB  000F 0 00 0 4 8 00 800 0 :       0F,,,,CNST   MAKE YD REGISTER ALL ONES (F)
0BC  1000 0 00 0 0 8 60 800 0 :       ,,,,,,INCYD     INCREMENT YD REGISTER
0BD  1055 6 00 0 0 8 00 800 0 :       DISPLA,YDCARY   BRANCH TO ERROR IF YDCARY SEEMS OFF
0BE  10C0 6 00 0 0 8 00 800 0 :       YD1,YDCARY    CONTINUE TEST IF YDCARY IS OFF
0BF  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE    INCYD FAILED
0C0  00E0 0 25 0 4 8 00 806 0 :YD1    0E0,,B,,CNST,,,BUS3     LOAD CHECK VALUE INTO MC
0C1  00C2 0 25 2 4 8 00 866 1 :       YD2,,B,WR,CNST,,,BUS2+BUS3,LOADMC  FAILING ADDRESS TO WR
0C2  1055 C 00 0 0 8 60 800 0 :YD2    DISPLA,MC11,,,,,INCYD    BRANCH TO ERROR IF YDCARY IS LATE
0C3  10C2 6 00 0 0 8 00 800 2 :       YD2,YDCARY,,,,,,,INCMC  CONTINUE TEST IF YDCARY IS OFF
0C4  00C7 C 00 0 0 8 00 800 0 :       REGCON,MC11     GO TO NEXT TEST---YD REGISTER IS GOOD
0C5  00C5 0 25 2 4 8 00 866 0 :YD3    YD3,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
0C6  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE    BRANCH TO ERROR--YDCARY OCCURRED EARLY
                              ::
                              ::      THIS TESTS THE WRCNTL SIGNALS
                              ::
0C7  C000 0 25 2 4 8 00 D00 0 :REGCON 0C000,,B,WR,CNST,,,BUS0   SET MOST SIG. BIT OF WR
0C8  1000 0 00 5 0 8 00 800 0 :       ,,,SLWR     SHIFT WR0 TO CARRY
0C9  1000 0 00 0 0 8 00 800 0 :       ,    BRANCH CONDITION DELAY
0CA  00CD A 00 0 0 8 00 800 0 :       REG1,CARRY    CONTINUE TEST IF CARRY IS SET
0CB  00C7 0 65 2 4 8 00 866 0 :       REGCON,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
0CC  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE    BRANCH TO ERROR-- WR DID NOT SHIFT PROPERLY
0CD  0000 0 00 8 0 8 00 800 0 :REG1   ,,,ASRWR     SHIFT WR RIGHT ARITHMETICALLY
0CE  1000 0 00 0 0 8 00 800 0 :       ,    BRANCH CONDITION DELAY
0CF  10D2 9 00 0 0 8 00 800 0 :       MUXCON,WR0    CONTINUE TESTING IF ARITHMETIC SHIFT WORKED
0D0  00CD 0 65 2 4 8 00 866 0 :       REG1,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
0D1  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR--ARITHMETIC SHIFT DID NOT OCCUR
                              ::
                              ::      THIS TESTS REMAINING AMUX AND BMUX CONTROLS AND ALU CONTROL AEXRB
                              ::
0D2  9000 0 25 1 4 8 00 D00 0 :MUXCON 09000,,B,XWR,CNST,,,BUS0   TEST VALUE TO XWR
0D3  0000 0 25 1 0 8 00 A00 0 :       ,,B,XWR,,,,XWR0    XWR THROUGH BMUX TO XWR
0D4  1000 0 00 9 0 8 00 800 0 :       ,,,RLLONG    ROTATE XWR0 TO WR31  (1)
0D5  1000 0 00 0 0 8 00 800 0 :       ,    BRANCH CONDITION DELAY
0D6  00D9 3 00 0 0 8 00 800 0 :MUX1   MUX2,WR31   CONTINUE IF WR31 IS ON
0D7  00D6 0 65 2 4 8 00 866 0 :       MUX1,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
0D8  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE     BRANCH TO ERROR
0D9  1000 0 00 9 0 8 00 800 0 :MUX2   ,,,RLLONG    ROTATE XWR0 TO WR31  (0)
0DA  1000 0 00 0 0 8 00 800 0 :       ,    BRANCH CONDITION DELAY
0DB  10E2 3 00 0 0 8 00 800 0 :       MUXB1,WR31   BRANCH TO ERROR IF WR31 IS ON
0DC  1000 0 00 9 0 8 00 800 0 :       ,,,RLLONG    ROTATE XWR0 TO WR31  (0)
0DD  1000 0 00 0 0 8 00 800 0 :       ,    BRANCH CONDITION DELAY
0DE  10E2 3 00 0 0 8 00 800 0 :       MUXB1,WR31   BRANCH TO ERROR IF WR31 IS ON
0DF  1000 0 00 9 0 8 00 800 0 :       ,,,RLLONG    ROTATE XWR0 TO WR31  (1)
0E0  1000 0 00 0 0 8 00 800 0 :       ,    BRANCH CONDITION DELAY
0E1  10E4 3 00 0 0 8 00 800 0 :       AMUX,WR31    CONTINUE TEST IF WR31 IS ON
0E2  00D9 0 65 2 4 8 00 866 0 :MUXB1  MUX2,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
0E3  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR--XWR DID NOT LOAD OR ROTATE PROPERLY
0E4  1234 0 65 2 4 8 00 866 0 :AMUX   01234,,B,WR,CNST,,,BUS2+BUS3   TEST VALUE TO WR
0E5  0000 0 00 0 0 8 04 800 0 :       ,,,,,,REGWRT   TEST VALUE TO REGISTER STACK
0E6  1000 0 00 0 0 8 00 800 0 :       ,   WAIT FOR LATCH TO LOAD
0E7  0000 0 26 2 0 8 00 B3B 0 :       ,,AEXRB,WR,,,,LATCH+WR0+WR2+WR3   EXCLUSIVE OR AND PUT RESULT IN WR
0E8  1000 0 00 0 0 8 00 800 0 :       ,    BRANCH CONDITION DELAY
0E9  00EC 9 00 0 0 8 00 800 0 :       MUXB2,WR0    BRANCH TO ERROR IF LESS THAN ZERO
0EA  10EC 8 00 0 0 8 00 800 0 :       MUXB2,G      BRANCH TO ERROR IF GREATER THAN ZERO
0EB  00EE 1 00 0 0 8 00 800 0 :       MACTST,TRUE    GO TO NEXT TEST
0EC  00E4 0 25 2 4 8 00 866 0 :MUXB2  AMUX,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
0ED  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR--AMUX TEST FAILED
                              ::
                              ::      MAC LOGIC TEST
                              ::
0EE  02FE 0 65 0 4 8 00 866 0 :MACTST 002FE,,B,,CNST,,,BUS2+BUS3    ADDRESS TO MC
0EF  CA11 0 00 0 4 9 00 800 1 :       0CA11,,,,CNST,MDR,,,LOADMC    WRITE DATA TO MDR
0F0  0004 0 00 0 4 0 00 800 0 :       04,,,,CNST,LDMAC    SET WRITE CONDITION
0F1  CA11 0 25 2 4 8 00 D66 0 :       0CA11,,B,WR,CNST,,,BUS0+BUS2+BUS3   CA11CA11 TO WR AS CHECK VALUE
0F2  0000 0 00 0 0 8 80 800 0 :       ,,,,,,MACREQ    WRITE REQUEST
0F3  8000 0 00 0 4 0 00 800 0 :       8000,,,,CNST,LDMAC     HANGS HERE IF REQUEST INCOMPLETE
0F4  35EE 0 40 0 4 9 00 800 0 :       035EE,,,,CNST,MDR   WRONG VALUE TO MDR AS CHECK
0F5  1000 0 00 0 1 8 80 800 0 :       ,,,,MDR,,MACREQ    READ REQUEST
0F6  8000 0 26 2 1 8 00 DE6 0 :       8000,,AEXRB,WR,MDR,,,WR+BUS0+BUS2+BUS3    SHOULD MAKE WR = 0
0F7  1000 0 00 0 0 8 00 800 0 :       ,     BRANCH CONDITION DELAY
0F8  10FB 8 00 0 0 8 00 800 0 :       MAC1,G
0F9  00FB 9 00 0 0 8 00 800 0 :       MAC1,WR0
0FA  10FD 1 00 0 0 8 00 800 0 :       MACSET,TRUE    CONTINUE TEST--MAC WRITE/READ GOOD
0FB  00EE 0 25 2 4 8 00 866 0 :MAC1   MACTST,,B,WR,CNST,,,BUS2+BUS3     FAILING ADDRESS TO WR
0FC  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE
                              ::
                              ::      THIS TESTS THE TEST AND SET CONTROL
                              ::
0FD  0002 0 00 0 4 0 00 800 0 :MACSET 002,,,,CNST,LDMAC   TEST AND SET CONTROL CODE
0FE  CA11 0 25 2 4 8 00 D66 0 :       0CA11,,B,WR,CNST,,,BUS0+BUS2+BUS3  CA11CA11 TO WR AS CHECK VALUE
0FF  1000 0 00 0 1 8 80 800 0 :       ,,,,MDR,,MACREQ    TEST AND SET REQUEST
100  8000 0 26 2 1 8 00 DE6 0 :       8000,,AEXRB,WR,MDR,,,WR+BUS0+BUS2+BUS3    SHOULD MAKE WR = 0
101  00FD 0 65 1 4 8 00 866 0 :       MACSET,,B,XWR,CNST,,,BUS2+BUS3   POSSIBLE FAILURE ADDRESS TO XWR
102  0055 8 25 2 0 8 00 822 0 :       DISPLA,G,B,WR,,,,XWR2+XWR3   TEST RESULT--FAILING ADDRESS TO WR
103  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0
104  1000 0 00 0 1 8 80 800 0 :SET1   ,,,,MDR,,MACREQ   READ  (ANOTHER TEST AND SET)
105  9000 0 25 2 1 8 00 D66 0 :       8000,,B,WR,MDR,,,BUS0+BUS2+BUS3     FFFFFFFF TO WR IF TEST AND SET GOOD
106  0000 0 00 0 0 8 00 880 0 :       ,,APLUS1,,,,,WR      SHOULD CAUSE CARRY
107  0104 0 25 2 4 8 00 866 0 :       SET1,,B,WR,CNST,,,BUS2+BUS3 FAILING ADDRESS TO WR
108  010A A 00 0 0 8 00 800 0 :       MACREL,CARRY   CONTINUE IF TEST AND SET GOOD
109  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE    BRANCH TO ERROR--DID NOT GET FFFF
                              ::
                              ::      THIS TESTS RELOCATION CONTROL (PSW5 AND PSW5 OVERRIDE)
                              ::
10A  0004 0 40 0 4 0 00 800 2 :MACREL 04,,,,CNST,LDMAC,,,INCMC  SET WRITE CONDITION--INCMC TO 300
10B  0FF0 0 40 0 4 9 00 800 0 :       00FF0,,,,CNST,MDR     LIMIT DATA TO MDR
10C  0000 0 00 0 0 8 80 800 0 :       ,,,,,,MACREQ     WRITE REQUEST  (ADDRESS 300)
10D  8000 0 00 0 0 8 00 800 0 :       8000   WAIT FOR READ DONE
10E  1010 0 00 0 4 9 00 800 2 :       01010,,,,CNST,MDR,,,INCMC   RELOCATION DATA TO MDR--INCMC TO 302
10F  0000 0 00 0 0 8 80 800 0 :       ,,,,,,MACREQ    WRITE REQUEST  (ADDRESS 302)
110  8000 0 00 0 0 8 00 800 0 :       8000    WAIT FOR READ DONE
111  12FE 0 25 0 4 8 00 866 0 :       012FE,,B,,CNST,,,BUS2+BUS3    TEST ADDRESS TO MC
112  0001 0 40 0 4 9 00 800 1 :       00001,,,,CNST,MDR,,,LOADMC   0001 TO MDR
113  0000 0 00 0 0 8 80 800 0 :       ,,,,,,MACREQ     WRITE TO ADDRESS 12FE
114  8000 0 00 0 0 8 00 800 0 :       8000   WAIT FOR READ DONE
115  02FE 0 65 0 4 8 00 866 0 :       002FE,,B,,CNST,,,BUS2+BUS3   TEST ADDRESS TO MC
116  0000 0 00 0 4 0 00 800 1 :       000,,,,CNST,LDMAC,,,LOADMC   SET READ CONTITION AND OVERRIDE PSW5
117  0400 0 00 0 4 A 00 800 0 :       00400,,,,CNST,PSW    SET MAC ENABLE BIT IN PSW
118  1000 0 00 0 0 8 00 800 0 :       ,   PSW5 TIME WASTE
119  1000 0 00 0 1 8 80 800 0 :       ,,,,MDR,,MACREQ    READ REQUEST--SHOULD NOT RELOCATE, SHOULD GET FFFF
11A  9000 0 25 2 1 8 00 D66 0 :       8000,,B,WR,MDR,,,BUS0+BUS2+BUS3    MAKE WR = FFFFFFFF
11B  0010 0 00 0 4 0 00 800 0 :       010,,,,CNST,LDMAC    DO NOT OVERRIDE PSW5
11C  1000 0 00 0 0 8 00 800 0 :       ,   PSW5 OVERRIDE TIME WASTE
11D  1000 0 00 0 1 8 80 800 0 :       ,,,,MDR,,MACREQ  READ WITH RELOCATION   (ADDRESS 12FE)
11E  9000 0 26 2 1 8 00 866 0 :       8000,,AEXRB,WR,MDR,,,BUS2+BUS3    SHOULD MAKE WR NON ZERO
11F  010A 0 65 1 4 8 00 866 0 :       MACREL,,B,XWR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO XWR
120  0123 8 25 2 9 8 00 822 0 :       TMDRA,G,B,WR,MDRA,,,XWR2+XWR3 CONTINUE TESTING IF WR NOT "0"-XWR TO WR
121  1123 9 00 0 9 8 00 800 0 :       TMDRA,WR0,,,MDRA   CONTINUE TESTING IF WR NOT ZERO
122  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE    BRANCH TO ERROR
                              ::
                              ::      THIS TESTS THE MDRA REGISTER LOGIC
                              ::
123  1000 0 25 2 9 8 00 D00 0 :TMDRA  ,,B,WR,MDRA,,,BUS0      MDRA TO WR
124  0001 0 26 2 4 8 00 D80 0 :       01,,AEXRB,WR,CNST,,,WR+BUS0    SHOULD MAKE WR = 0
125  0123 0 25 1 4 8 00 866 0 :       TMDRA,,B,XWR,CNST,,,BUS2+BUS3    FAILING ADDRESS TO XWR
126  0055 8 25 2 0 8 00 822 0 :       DISPLA,G,B,WR,,,,XWR2+XWR3  BRANCH TO ERROR IF WR NOT ZERO--XWR TO WR
127  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0    BRANCH TO ERROR IF WR NOT ZERO
128  0004 0 00 0 4 0 00 800 0 :TMDRA1 004,,,,CNST,LDMAC   SET WRITE CONDITION
129  4000 0 00 0 4 9 00 800 0 :       04000,,,,CNST,MDR  LOAD WRITE DATA
12A  0000 0 00 0 9 8 80 800 0 :       ,,,,MDRA,,MACREQ    WRITE REQUEST
12B  8000 0 25 2 9 8 00 D00 0 :       8000,,B,WR,MDRA,,,BUS0  MDRA TO WR MOST SIGNIFICANT BITS
12C  1000 0 00 3 0 8 00 800 0 :       ,,,RLWR    ROTATE WR LEFT
12D  0128 0 65 1 4 8 00 866 0 :       TMDRA1,,B,XWR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO XWR
12E  0130 9 00 0 0 8 00 800 0 :       TMDRA2,WR0    CONTINUE TEST IF WR0 IS ON
12F  0055 1 25 2 0 8 00 822 0 :       DISPLA,TRUE,B,WR,,,,XWR2+XWR3   BRANCH TO ERROR IF WR0 IS OFF-XWR TO WR
130  1132 3 00 0 0 8 00 800 0 :TMDRA2 MREGT,WR31   CONTINUE TEST IF WR31 IS ON
131  0055 1 25 2 0 8 00 822 0 :       DISPLA,TRUE,B,WR,,,,XWR2+XWR3  BRANCH TO ERROR IF WR31 IS OFF-XWR TO WR
                              ::
                              ::      THIS TESTS THE GENERAL REGISTER CONTROLS MREG AND SX
                              ::
132  B00B 0 25 2 4 8 00 D66 0 :MREGT  0B00B,,B,WR,CNST,,,BUS0+BUS2+BUS3   B00BB00B TO WR
133  0000 0 40 0 4 A 00 800 0 :       00000,,,,CNST,PSW   SPECIFY REGISTER SET 0
134  0000 0 40 0 4 8 07 800 0 :       000,,,,CNST,,MREG+REGWRT  WRITE WR TO REGISTER 0 OF SET 0
135  4FF4 0 25 2 4 8 00 D66 0 :       04FF4,,B,WR,CNST,,,BUS0+BUS2+BUS3  4FF44FF4 TO WR
136  00F0 0 40 0 4 A 00 800 0 :       000F0,,,,CNST,PSW   SPECIFY REGISTER SET F
137  000F 0 40 0 4 8 07 800 0 :       0F,,,,CNST,,MREG+REGWRT   WRITE WR TO REGISTER F OF SET F
138  000F 0 00 0 4 8 03 800 0 :       0F,,,,CNST,,MREG    READ REGISTER F OF SET F
139  0000 0 2F 2 4 A 00 808 0 :       00000,,A,WR,CNST,PSW,,LATCH  SPECIFY REGISTER SET 0--LATCH TO WR
13A  0000 0 00 0 4 8 03 800 0 :       000,,,,CNST,,MREG   READ REGISTER 0 OF SET 0
13B  1000 0 26 2 0 8 00 991 0 :       ,,AEXRB,WR,,,,WR+L00+L22+L33    MAKES WR = FFFFFFFF
13C  0000 0 00 0 0 8 00 880 0 :       ,,APLUS1,,,,,WR   SHOULD CAUSE CARRY
13D  0132 0 25 2 4 8 00 866 0 :       MREGT,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
13E  1140 A 00 0 0 8 00 800 0 :       REGT1,CARRY    CONTINUE IF GOOD
13F  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR IF CARRY IS OFF
140  0000 0 00 0 0 8 02 800 0 :REGT1  ,,,,,,SX  SPECIFY REGISTER 0 OF SET 0
141  0000 0 2F 2 0 8 00 808 0 :       ,,A,WR,,,,LATCH  SHOULD MAKE WR = B00BB00B
142  00F0 0 40 0 4 A 00 800 0 :       000F0,,,,CNST,PSW  SPECIFY REGISTER SET F
143  0F00 0 40 0 4 9 00 800 0 :       00F00,,,,CNST,MDR  LOAD MEMORY DATA REGISTER
144  0000 0 00 0 0 8 80 800 0 :       ,,,,,,MACREQ   WRITE REQUEST
145  9000 0 00 0 0 8 02 800 0 :       8000,,,,,,SX   SPECIFY REGISTER F
146  1000 0 26 2 0 8 00 991 0 :       ,,AEXRB,WR,,,,WR+L00+L22+L33   SHOULD MAKE WR = FFFFFFFF
147  0000 0 00 0 0 8 00 880 0 :       ,,APLUS1,,,,,WR   SHOULD CAUSE CARRY
148  0140 0 25 2 4 8 00 866 0 :       REGT1,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
149  014B A 00 0 0 8 00 800 0 :       REGSEL,CARRY    CONTINUE IF CARRY
14A  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE
                              ::
                              ::      THIS TESTS REGSEL0 (INDEX)
                              ::
14B  0000 0 40 0 4 A 00 800 0 :REGSEL 00000,,,,CNST,PSW   SPECIFY REGISTER SET 0
14C  0000 0 00 0 0 8 03 000 0 :       000,,,,,,MREG,INDEX   READ B00BB00B FROM REGISTER 0 OF SET 0
14D  0000 0 25 2 0 8 00 911 0 :       ,,B,WR,,,,L00+L22+L33  SHOULD PUT ZEROES IN WR
14E  014B 0 65 1 4 8 00 866 0 :       REGSEL,,B,XWR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO XWR
14F  0055 8 25 2 0 8 00 822 0 :       DISPLA,G,B,WR,,,,XWR2+XWR3  BRANCH TO ERROR IF WR IS NOT ZERO-XWR TO WR
150  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0     BRANCH TO ERROR IF WR IS NOT ZERO
                              ::
                              ::      THIS TESTS THE MUX BUS AND MUX BUS CONTROLS (EXCEPT INTERRUPTS)
                              ::      NOTE: THIS TEST ASSUMES THAT DEVICE 02 IS OPERATIONAL AS TTY INTERFACE
                              ::
151  0000 0 00 0 4 E 00 800 0 :IOTST  0,,,,CNST,IOCNTL  ZEROES TO IO CONTROL
152  0000 0 00 0 4 D 00 800 0 :       0,,,,CNST,IOBUS   ZEROES TO IO BUS
153  1000 0 25 2 5 8 00 866 0 :       ,,B,WR,IOBUS,,,BUS2+BUS3   IO BUS TO WR
154  0151 0 25 2 4 8 00 866 0 :       IOTST,,B,WR,CNST,,,BUS2+BUS3  FAILING ADDRESS TO WR
155  0055 8 00 0 0 8 00 800 0 :       DISPLA,G     BRANCH TO ERROR IF WR NOT ZEROES
156  FFFF 0 00 0 4 D 00 800 0 :IOT1   0FFFF,,,,CNST,IOBUS   FFFF TO IO BUS
157  1000 0 25 2 5 8 00 D66 0 :       ,,B,WR,IOBUS,,,BUS0+BUS2+BUS3  IO BUS TO WR
158  0000 0 00 0 0 8 00 880 0 :       ,,APLUS1,,,,,WR   SHOULD GIVE CARRY
159  0156 0 65 2 4 8 00 866 0 :       IOT1,,B,WR,CNST,,,BUS2+BUS3   FAILING ADDRESS TO WR
15A  015C A 00 0 0 8 00 800 0 :       IOT1A,CARRY    CONTINUE TEST IF CARRY
15B  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE   BRANCH TO ERROR--MUX BUS NOT FFFF
15C  01E0 0 65 0 4 8 00 866 0 :IOT1A  01E0,,B,,CNST,,,BUS2+BUS3    1E0 TO MC
15D  015C 0 25 2 4 8 00 866 1 :       IOT1A,,B,WR,CNST,,,BUS2+BUS3,LOADMC   FAILING ADDRESS TO WR
15E  1160 B 00 0 0 8 00 800 0 :IOT1B  IOT1C,SYNC      LOOP IF SYN0 IS ACTIVE
15F  0162 1 00 0 0 8 00 800 0 :       IOT2,TRUE   CONTINUE IF SYN0 IF OFF
160  015E C 00 0 0 8 00 800 2 :IOT1C  IOT1B,MC11,,,,,,,INCMC   DELAY AND LOOP
161  0055 1 00 0 0 8 00 800 0 :       DISPLA,TRUE     BRANCH TO ERROR IF SYN0 ACTIVE AFTER 2 USEC.
162  0002 0 40 0 4 D 00 800 0 :IOT2   02,,,,CNST,IOBUS   DEVICE ADDRESS TO IO BUS
163  0080 0 40 0 4 E 00 800 0 :       ADRS,,,,CNST,IOCNTL  SEND ADRES0
164  1166 B 00 0 0 8 00 800 0 :IOT3   IOT4,SYNC  CONTINUE IF SYN0
165  0164 1 00 0 0 8 00 800 0 :       IOT3,TRUE    LOOPS HERE IF NO RESPONSE TO ADRS0
166  0000 0 00 0 4 E 00 800 0 :IOT4   0,,,,CNST,IOCNTL   TERMINATE ADRS0
167  0098 0 40 0 4 D 00 800 0 :       098,,,,CNST,IOBUS   WRITE COMMAND CODE TO IO BUS
168  0008 0 40 0 4 E 00 800 0 :       CMD,,,,CNST,IOCNTL  SEND CMD0
169  016B B 00 0 0 8 00 800 0 :IOT5   IOT6,SYNC     CONTINUE IF SYN0
16A  1169 1 00 0 0 8 00 800 0 :       IOT5,TRUE    LOOP HERE IF NO RESPONSE TO CMDO
16B  0000 0 00 0 4 E 00 800 0 :IOT6   0,,,,CNST,IOCNTL  TERMINATE CMD0
16C  00C1 0 40 0 4 D 00 800 0 :       0C1,,,,CNST,IOBUS   SEND "A" CODE TO IO BUS
16D  0040 0 40 0 4 E 00 800 0 :       DA,,,,CNST,IOCNTL   SEND DA0
16E  0170 B 00 0 0 8 00 800 0 :IOT7   IOT8,SYNC     CONTINUE IF SYN0
16F  016E 1 00 0 0 8 00 800 0 :       IOT7,TRUE   LOOP HERE IF NO RESPONSE TO DA0
170  0000 0 00 0 4 E 00 800 0 :IOT8   0,,,,CNST,IOCNTL    TERMINATE DA0
                              ::
                              ::      TERMINAL SHOULD TYPE "A"
                              ::
171  0000 0 00 0 4 D 00 800 0 :       0,,,,CNST,IOBUS   ZEROES TO IO BUS
172  0010 0 40 0 4 E 00 800 0 :       SR,,,,CNST,IOCNTL   SEND SR0
173  0175 B 00 0 0 8 00 800 0 :IOT9   IOT10,SYNC   CONTINUE IF SYN0
174  0173 1 00 0 0 8 00 800 0 :       IOT9,TRUE   LOOP IF NO RESPONSE TO SR0
175  0000 0 00 0 4 E 00 800 0 :IOT10  0,,,,CNST,IOCNTL  TERMINATE SR0
176  0094 0 40 0 4 D 00 800 0 :       094,,,,CNST,IOBUS    INPUT COMMAND
177  0008 0 40 0 4 E 00 800 0 :       CMD,,,,CNST,IOCNTL   SEND CMD0
178  017A B 00 0 0 8 00 800 0 :IOT10A IOT10B,SYNC    CONTINUE IF SYNC
179  1178 1 00 0 0 8 00 800 0 :       IOT10A,TRUE    LOOP IF NO SYNC RESPONSE
17A  0000 0 00 0 4 E 00 800 0 :IOT10B 0,,,,CNST,IOCNTL  TERMINATE CMD0
17B  0000 0 00 0 4 D 00 800 0 :       0,,,,CNST,IOBUS    ZEROES TO IO BUS
17C  0020 0 40 0 4 E 00 800 0 :       DR,,,,CNST,IOCNTL    SEND DR0
17D  017F B 00 0 0 8 00 800 0 :IOT11  IOT12,SYNC    CONTINUE IF SYN0
17E  117D 1 00 0 0 8 00 800 0 :       IOT11,TRUE LOOP IF NO RESPONSE TO DR0
17F  0000 0 00 0 4 E 00 800 0 :IOT12  0,,,,CNST,IOCNTL   TERMINATE DR0
                              ::
                              ::      THIS TESTS YD,YS AND YS2 REGISTERS
                              ::
180  0000 0 40 0 4 A 00 800 0 :YSYDT  0,,,,CNST,PSW    SPECIFY REGISTER SET 0
181  000C 0 40 0 4 0 00 800 0 :       0C,,,,CNST,LDMAC    WRITE AND LOAD INSTRUCTION REGISTER
182  AAAA 0 40 0 4 9 00 800 0 :       0AAAA,,,,CNST,MDR    LOAD MDR
183  0000 0 00 0 0 8 80 800 0 :       ,,,,,,MACREQ     WRITE REQUEST--ALSO LOADS INSTRUCTION REGISTER
184  8000 0 00 0 0 8 00 800 0 :       8000      WAIT FOR MEMORY
185  ACED 0 65 2 4 8 08 866 0 :       0ACED,,B,WR,CNST,,MAPSEL,BUS2+BUS3  CHECK VALUE TO WR--LOAD YD,YS,YS2
186  000A 0 00 0 0 8 07 800 0 :       0A,,,,,,MREG+REGWRT   WRITE REGISTER A
187  1000 0 00 0 0 8 00 800 0 :       ,,,,,,YS  READ REGISTER A
188  1000 0 2F 2 0 8 01 808 0 :       ,,A,WR,,,YD,LATCH  REGISTER A TO WR--READ REGISTER A
189  0000 0 26 2 0 8 00 83B 0 :       ,,AEXRB,WR,,,,LATCH+WR2+WR3  SHOULD MAKE WR = 0
18A  0180 0 25 1 4 8 00 866 0 :       YSYDT,,B,XWR,CNST,,,BUS2+BUS3   FAILURE ADDRESS TO XWR
18B  0055 8 25 2 0 8 00 822 0 :       DISPLA,G,B,WR,,,,XWR2+XWR3    BRANCH TO ERROR IF WR NOT ZERO--XWR TO WR
18C  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0   BRANCH TO ERROR IF WR NOT ZERO
18D  0000 0 25 2 7 8 00 806 0 :YS2A   ,,B,WR,YS,,,BUS3  YS REGISTER TO WR
18E  1000 0 00 5 0 8 00 800 0 :       ,,,SLWR     SHIFT WR LEFT
18F  0000 0 26 2 6 8 00 886 0 :       ,,AEXRB,WR,YS2,,,WR+BUS3   SHOULD MAKE WR = 0
190  018D 0 65 1 4 8 00 866 0 :       YS2A,,B,XWR,CNST,,,BUS2+BUS3  FAILURE ADDRESS TO XWR
191  0055 8 25 2 0 8 00 822 0 :       DISPLA,G,B,WR,,,,XWR2+XWR3    BRANCH TO ERROR IF WR NOT ZERO--XWR TO WR
192  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0   BRANCH TO ERROR IF WR NOT ZERO
193  5555 0 40 0 4 9 00 800 0 :YSYD2  05555,,,,CNST,MDR   LOAD MDR
194  0000 0 00 0 0 8 80 800 0 :       ,,,,,,MACREQ    WRITE REQUEST--ALSO LOADS INSTRUCTION REGISTER
195  8000 0 00 0 0 8 00 800 0 :       8000   WAIT FOR MEMORY
196  FACE 0 25 2 4 8 08 866 0 :       0FACE,,B,WR,CNST,,MAPSEL,BUS2+BUS3  CHECK VALUE TO WR--LOAD YD,YS,YS2
197  0005 0 00 0 0 8 07 800 0 :       05,,,,,,MREG+REGWRT   WRITE TO REGISTER 5
198  1000 0 00 0 0 8 00 800 0 :       ,,,,,,YS   READ REGISTER 5
199  1000 0 2F 2 0 8 01 808 0 :       ,,A,WR,,,YD,LATCH   REGISTER 5 TO WR--READ REGISTER 5
19A  0000 0 26 2 0 8 00 83B 0 :       ,,AEXRB,WR,,,,LATCH+WR2+WR3  SHOULD MAKE WR = 0
19B  0193 0 65 1 4 8 00 866 0 :       YSYD2,,B,XWR,CNST,,,BUS2+BUS3   FAILURE ADDRESS TO XWR
19C  0055 8 25 2 0 8 00 822 0 :       DISPLA,G,B,WR,,,,XWR2+XWR3   BRANCH TO ERROR IF WR NOT ZERO--XWR TO WR
19D  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0   BRANCH TO ERROR IF WR NOT ZERO
19E  0000 0 25 2 7 8 00 806 0 :YS2B   ,,B,WR,YS,,,BUS3   YS REGISTER TO WR
19F  1000 0 00 5 0 8 00 800 0 :       ,,,SLWR    SHIFT WR LEFT
1A0  0000 0 26 2 6 8 00 886 0 :       ,,AEXRB,WR,YS2,,,WR+BUS3  SHOULD MAKE WR = 0
1A1  019E 0 25 1 4 8 00 866 0 :       YS2B,,B,XWR,CNST,,,BUS2+BUS3  FAILURE ADDRESS TO XWR
1A2  0055 8 25 2 0 8 00 822 0 :       DISPLA,G,B,WR,,,,XWR2+XWR3   BRANCH TO ERROR IF WR NOT ZERO--XWR TO WR
1A3  1055 9 00 0 0 8 00 800 0 :       DISPLA,WR0   BRANCH TO ERROR IF WR NOT ZERO
                              ::
                              ::      THIS INCREMENTS REGISTER 8 OF SET A AND DISPLAYS THE LEFT HALF OF THIS
                              ::      REGISTER ON THE LEFT HALF OF THE CONSOLE. THE RIGHT HALF OF THE CONSOLE
                              ::      DISPLAYS "ACED"
                              ::
1A4  00A0 0 40 0 4 A 00 800 0 :HAPPY  00A0,,,,CNST,PSW  SPECIFY REGISTER SET A
1A5  0008 0 00 0 0 8 03 800 0 :       08,,,,,,MREG    READ REGISTER 8
1A6  00ED 0 00 2 4 B 00 808 0 :       0ED,,APLUS1,WR,CNST,CONSOL,,LATCH  INCREMENT REGISTER--"ED" TO CONSOLE
1A7  1008 0 00 0 0 8 07 800 0 :       08,,,,,,MREG+REGWRT   WRITE REGISTER 8
1A8  FE00 0 40 0 4 C 04 800 0 :       LA,,,,CNST,CNCNTL,REGWRT   LA TO CONSOLE CONTROL--WRITE REGISTER
1A9  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL    TERMINATE LA
1AA  00AC 0 65 2 4 B 00 845 0 :       0AC,,B,WR,CNST,CONSOL,,L20+L31  "AC" TO CONSOLE--SHIFTED REGISTER TO WR
1AB  FD00 0 40 0 4 C 04 800 0 :       LB,,,,CNST,CNCNTL,REGWRT   LB TO CONSOLE CONTROL--WRITE REGISTER
1AC  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL   TERMINATE LB
1AD  0000 0 25 0 8 B 00 801 0 :       ,,B,,ALU,CONSOL,,L33   REGISTER BYTE 1 TO CONSOLE
1AE  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL   LB TO CONSOLE CONTROL
1AF  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL   TERMINATE LB
1B0  0000 0 25 0 8 B 00 804 0 :       ,,B,,ALU,CONSOL,,L32    REGISTER BYTE 0 TO CONSOLE
1B1  FD00 0 00 0 4 C 00 800 0 :       LB,,,,CNST,CNCNTL   LB TO CONSOLE
1B2  FF00 0 40 0 4 C 00 800 0 :       0FF00,,,,CNST,CNCNTL   TERMINATE LB
1B3  00FF 0 00 0 4 B 00 800 0 :       0FF,,,,CNST,CONSOL   CLEAR CONSOLE DATA REGISTER
1B4  0074 1 00 0 0 8 00 800 0 :       SPEED,TRUE    RETURN TO BEGINNING OF TEST
                              ::
                              :#1FE
                              ::
1FE  1004 4 00 0 0 8 00 800 0 :HITEST TEST3,CATN
1FF  01FE 1 00 0 0 8 00 800 0 :       HITEST,TRUE
                              ::



















                       :ROM/IO BOARD CERTIFICATION CODE
                        :
                        :
000030                            ORG 30
000030                  FIRST     EQ .
000030  0000 8000 0000  ILEGAL   HC 0,8000,0,0FADE   ILLEGAL INSTRUCTION
        FADE            
000038  0000 0000 0000  GOPSW     HC 0,0,0,START    MACHINE MALFUNCTION (POWER, PARITY)
        1000            
                        :
                        :
000090                            ORG 90
000090  0000 0000 0000  MACINT    HC 0,0,0,MAC1    MAC INTERRUPT CELLS
        1066            
                        :
                        :
                        :         THIS TESTS MAPING, FLAGS AND RX ADDRESSING
                        :
001000                            ORG 1000
001000  99BD            START     CIO 0B,0D  DISPLAY MAC INTERRUPT AND PARITY INTERRUPT COUNTS
001002  4220 104E                 JT 2,PAR1    PARITY ERROR CHECK
001006  C860 FFFF                 LHI 6,-1      SHOULD GIVE L FLAG
00100A  23E2                      JFFS 0E,BR2  CONTINUE IF C, V, G FLAGS OFF
00100C  FFFF            BAD1      HC -1    ILLEGAL INSTRUCTION
00100E  2112            BR2       JTFS 1,BR3    CONTINUE IF L FLAG ON
001010  FFFF            LBAD      HC -1  ILLEGAL INSTRUCTION
001012  2661            BR3       AIS 6,1   SHOULD GIVE CARRY
001014  2372                      JFFS 7,BR4   CONTINUE IF V, G, L FLAGS OFF
001016  FFFF            BAD2      HC -1   ILLEGAL INSTRUCTION
001018  2182            BR4       JTFS 8,BR5   CONTINUE IF CARRY ON
00101A  FFFF            CBAD      HC -1   ILLEGAL INSTRUCTION
00101C  2661            BR5       AIS 6,1   SHOULD CAUSE G FLAG
00101E  2122                      JTFS 2,PSW1  CONTINUE IF G FLAG
001020  FFFF            GBAD      HC -1  ILLEGAL INSTRUCTION
001022  C200 106C       PSW1      LPSW PSW    SET V FLAG
001026  2142            PSWTST    JTFS 4,SHIFT   CONTINUE IF VFLAG ON
001028  FFFF            VBAD      HC -1   ILLEGAL INSTRUCTION
00102A  1061            SHIFT     SRLS 6,1   SHIFT RIGHT SHOULD CAUSE ZEROES IN REG 6
00102C  2372                      HC 2372  JFFS7,RX2T CONTINUE IF ZEROES IN REG 6
00102E  FFFF            SHIFTBAD  HC 0FFFF  ILLEGAL INSTRUCTION
001030  5866 8050       RX2T      WC 58668050 L 6,VALU1,6
001034  4870 1074                 LH 7,REG7   PREPARE FOR RX3 TEST
001038  4880 1076                 LH 8,REG8   PREPARE FOR RX3 TEST
00103C  5767 4800 1180  RX3T      X 6,VALU2+100,7,8   SHOULD MAKE REG 6 = FFFFFFFF
001042  2661                      AIS 6,1    SHOULD CAUSE CARRY
001044  2182                      JTFS 8,INTRPT   CONTINUE IF CARRY IS ON
001046  FFFF                      HC -1    ILLEGAL INSTRUCTION
                        :
                        :
                        :         THIS TESTS INTERRUPTS (NOT I/O)
                        :
001048  4898 0000       INTRPT    LH 9,0,8   SHOULD CAUSE MEMORY PARITY ERROR INTERRUPT
00104C  FFFF                      HC -1   ILLEGAL INSTRUCTION IF NO PARITY INTERRUPT
00104E  26B1            PAR1      AIS 0B,1  INCREMENT PARITY INTERRUPT VALUE
001050  C800 0000                 LHI 0,0    ZEROES IN REG 0
001054  4000 0300                 STH 0,300    SET RELOCATION VALUE
001058  4000 0302                 STH 0,302    SET PROTECTION VALUE
00105C  C200 1078                 LPSW MACPSW    ENABLE MAC
001060  4800 3FAD       MACTST    LH 0,03FAD     FETCH OUT OF BOUNDS
001064  FFFF                      HC -1   ILLEGAL INSTRUCTION IF NO MAC INTERRUPT
001066  26C1            MAC1      AIS 0C,1   INCREMENT MAC INTERRUPT COUNT
001068  C200 0038                 LPSW GOPSW      RESTART TEST
00106C  0000 2004 0000  PSW       HC 0,2004,0,PSWTST
        1026            
001074  0500            REG7      HC 500
001076  FA00            REG8      HC -600
001078  0000 2400 0000  MACPSW    HC 0,2400,0,MACTST
        1060            
001080  E6E6 E6E6       VALU2     HC 0E6E6,0E6E6
001084  1919 1919       VALU1     HC 1919,1919
001058                  LAST      EQ .-FIRST
001088                            END
  [@
En