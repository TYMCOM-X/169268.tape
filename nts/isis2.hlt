.	<<	ISIS2.HLT	>>
.SEC(|ISIS DISPLAYS AND HALTS|)
.TOPIC(|HALTS|)
.TOPIC(|ISIS HALTS|)
.TOPIC(|ISIS DISPLAYS|)
.TOPIC(|DISPLAYS|)
	In general, the ISIS SYSTEM generates a display on the machine front-
panel:
.SS(|NORMAL DISPLAY|)
	The normal ISIS display consists of nine hexidicimal digits, of format:
.SKIP
.BEGIN GROUP VERBATIM
	----.---.---.---.---.---.---.---.----
	| s | speed | S0 ss | slot display  |
	-------------------------------------
.END
	Where:
.BEGIN OFFSET
	s########slot number -- the number of the ISIS slot being displayed
in the "slot display" field.
	speed####speedometer -- a pair of bits which are periodically
cycled to provide a moving display;  the rate of motion is a rough
indication of the load experienced by the ISIS environment -- hence
the name "speedometer".
	S0#ss####Special display for slot 0 -- the usage varies, depending
on the contents of slot 0 (TYMNET-I or II).
	slot#display##this field may display current information for a running
slot;  the usage is highly slot dependent.  If the slot is NOT running,
a default display is generated by ISIS, depending upon the state of that
slot:
.BEGIN OFFFSET
	The slot has been halted by outside activity (halt command);  the
display will present "DEAD" to indicate this state.
	The slot has been halted by ISIS because of excessive internal
faults (e.g. un-recovered parity errors);  the display will present "D1ED"
to indicate this state.
	The slot has never been activated;  the display will present an
ordered succession of "0FEE", "0F1E", "0F0E", and "0F00" to indicate
this state.  It is unlikely that this can be misinterpreted as any indication
that the slot itself might originate.
.END
.END
.SS(|ISIS HALT DISPLAY|)
	Under certain circumstances, the ISIS SYSTEM may detect that an
irrecoverable or catastrophic condition has occured, and that the
condition is severe enough to halt the machine.
	If a fault occurs, the PSD will reflect the condition detected.  The
following discussion will display the PSD as:
.SKIP 1
.BEGIN GROUP VERBATIM
		.---.---.---.---.---. .---.---.---.---.
		| B | A | D | x | x | | 8 | 7 | c | c |
		--------------------- -----------------
.SKIP
		.---.---.---.---.---. .---.---.---.---.
formerly	| D | E | A | D | 0 | | 8 | 0 | c | c |
		--------------------- -----------------
.SKIP
(formerly	< x | 0 | 0 | 7 | 0 | | p | p | p | p > ).
.END
where xx is the extended crash-code, cc is the crash-code.

.SSS(|DISPLAYED STATUS|)
.BEGIN INDENT 1,29 PREFACE 0 TURN ON "#"
	BADxx#87cc##DEAD##Old form:
	##################<1#8000>##machine ignores parity errors.
	BAD00#8720##8020##<1#8001>##parity error detected during
initialization.
	BAD00#8730##8030##<1#8002>##unexpected I/O interrupt.
	BAD00#8740##8040##<1#8003>##illegal instruction during initialization.
	BAD00#8750##8050##<1#8004>##MAC interrupt during initialization.
	BAD00#8760##8060##<1#8005>##SVC trap during initialization.
	BAD02#8750##################Unexpected MAC interrupt during
initialization of semiconductor memory above 1 MEG.
	BAD04#8763##8063##<1#8006>##Wild transfer to low core.
	BAD04#8730##8030##<1#8007>##Enhanced-sync interrupt, not expected.
	BAD02#8740##8040##<4#8000>##Illegal instruction within KERNEL.
	BAD02#8720##8020##<4#8001>##PARITY ERROR within KERNEL.
	BAD04#8721##################MAC register set 0 bad.
	BAD04#8752##8052##<4#8002>##DMA device timeout.
	BAD02#8763##8063##<4#8003>##Bad REPOP operation.
	BAD00#8763##8063##<4#8004>##Unable to connect slot on start-up.
	BAD04#8741##8041##<4#8005>##Illegal Instruction -- Engine took
an illegal instruction trap, but the op-code at the specified location
appears valid;  may be a bad MAC, or caused by some other card.
	BAD00#8790########<4#8006>##Daughter-board timeout during disconnect.
	BAD04#8762##8062############Unexpected Sync Interrupt.
	BAD14#8763########<5#8000>##Data transfer core address within KERNEL.
	BAD06#8762##8062##<5#8001>##Disc interrupt queue overrun.
	BAD08#8763##8063##<5#8002>##Invalid routine address
(from queue address).
	BAD0A#8763##8063##<5#8003>##Invalid queue address.
	BAD0C#8762##8062##<5#8004>##MSC Controller locked during recalibrate.
	BAD06#8720##8020##<7#8002>##Parity error within DISPATCHER.
	BAD0E#8763##8063##<7#8003>##KERNEL crash.
	BAD06#8740##8040##<7#8004>##Illegal Instruction within DISPATCHER.
	BAD06#8760##8060##<7#8005>##Illegal SVC within DISPATCHER.
	BAD06#8763##8063##<7#8006>##SYSTEM crash (PARITY ERROR in KERNEL).
	BAD06#8750##8050##<7#8007>##Protection Violation (should never happen).
	BAD10#8763##8063##<7#8009>##"TOPUT" crash within DISPATCHER.
	BAD02#8765##8065##<7#800A>##"GCI" crash within DISPATCHER.
	BAD04#8765##8065##<7#800B>##"WCI" crash within DISPATCHER.
	BAD06#8765##8065##<7#800C>##"WRECI" crash within DISPATCHER.
	BAD08#8765##8065##<7#800D>##"EMPTY" crash within DISPATCHER.
	BAD12#8763##8063##<7#800E>##Accounting crash within DISPATCHER.
	BAD16#8763##################No dispatcher present.
.END

.SSS(|CRASH TABLE|)

	Physical location 0006C will always contain the physical address of
the beginning of the crash table:
.SKIP
.BEGIN VERBATIM
.ONCE CENTER
CRASH TABLE HEADER:
.SKIP
NODENUMBER	HS	1	:Machine node number
NODETYPE	HS	1	:node type (see table below)
TABVER		HS	1	:Version of crash table
CODVER		HS	1	:version of code
TAKETIME	WS	1	:real time of first takeover (GMT)
CRCNT		HS	1	:current crash count
.SKIP
.ONCE CENTER
CRASH SUMMARY:
.SKIP
CRCNT		HS	1	:crash count for entry
CRID		HS	1	:crash ID (see table below)
CRPSD		WS	2	:crash PSW and PC
CRTIME		WS	1	:real time of crash (GMT)
.SKIP
.ONCE CENTER
DETAIL TABLE:
.SKIP
CRCNT		HS	1	:crash count for entry
CRID		HS	1	:crash ID (see table below)
CRPSD		WS	2	:crash PSW and PC
CRTIME		WS	1	:real time of crash (GMT)
REGS0		WS	$0 10	:register set 0
REGSF		WS	$0 10	:register set F (or current set)
MACREGS		HS	$0 30	:mac registers (locations 300-35F)
LASTSLOT	HS	1	:last slot executed (filled by ISIS
					only)
.END

	The summary table is a push-down stack, meaning that the first entry
is for the last crash, the second entry is the previous crash, and so on.
The crash table will not be over-written by repetitive loads and the
software will not initialize it.  Thus if the machine is reloaded with the
same code we can still read out old crash information.

	The tabeover label will contain the real-time value of the first
takeover (in GMT) after a reload.  However, upon first startup the value will
be set to hex 80000000.  Also, any crashes occuring before the first takeover
will be the number of seconds plus the initial value.  All valid times will not
have the high-order bit on.

.SSS(|COMMON CRASH HANDLING|)

	The following section addresses the issue of common crash handling for
all versions of node code and ISIS.  Common crash codes, console
formats, and crash action are all considered.  Common local
debugging facilities are deferred to a later date.
.SSSS(|Crash Codes|)
	Crash codes will be one byte, with the high-order nibble
designating the general crash type and the low-order nibble
giving additional information.
.SKIP
.BEGIN VERBATIM
          2x - Parity error
          20 - Non-DMA
          21 - DMA
.SKIP
          3x - Unexpected interrupt
          30 - Non-microcode device
          31 - Microcode-controlled device
.SKIP
          4x - Instruction failure
          40 - Illegal instruction (memory location bad)
          41 - Legal illegal instruction (memory location OK)
          42 - Instruction malfunction (e.g., illegal result)
.SKIP
          5x - MAC error
          50 - Protection violation
          51 - Out of bounds
          52 - DMA time-out
          53 - Presence error
          54 - Write interrupt
          55 - Fetch error
.SKIP
          6x - Software-detected errors (common)
          60 - Illegal SVC
          61 - Dispatcher detected error
          62 - Hardware consistency error
          63 - Software consistency error
          64 - GCI crash - empty buffer
          65 - GCI crash - illegal buffer index
          66 - Bufferlet error - illegal free list pointer
.SKIP
          7x - Software-detected errors (code-dependent)
.SKIP
          8x - Configuration error
          80 - Not enough memory
          81 - Required device not assigned
          82 - Wrong device type
.SKIP
          9x - Device failure
          90 - Busy/not ready
          91 - Status error
          92 - Missing interrupt
.SKIP
          Ax-Fx - Reserved for future use.
.END
	The above crash codes will be used in the CRID (crash ID) field
of the crash table, for crash reports to the SUP log, and for
console displays.
   