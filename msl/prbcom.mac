;       MULTI-USER PROBE COMMUNICATION PROGRAM
        TITLE   PRBCOM -- VERSION 4.3
        SUBTTL  PROBE RELAY
        TWOSEG

;AC ASSIGNMENTS

        M=0
        A=1
        B=2
        C=3
        D=4
        X=5
        AX=6    ;AUX CIRCUIT CONTROL
        N=10
        N1=11
        INP=13          ;INPUT POINTER
        T1=14
        T2=15
        CH=16
        P=17

SUBTTL  PARAMETERS AND DEFINITIONS
DEBUG==0         ;1 FOR DEBUGGING, 0 FOR NONDEBUG

NSUPS==4        ;NUMBER OF SUPERVISORS

;AUX CIRCUIT FUNCTIONS
AX.IW==0                ;INPUT CHAR AND WAIT
AX.OW==3                ;OUTPUT CHAR AND WAIT
AX.IS==1                ;INPUT CHAR, SKIP IF SUCCESSFUL
AX.SP==10               ;SKIP IF INPUT CHAR PRESENT
AX.CI==6                ;CLEAR INBUF
BIOMOD==13		;BLOCK I/O IN IMAGE BINARY MODE

TNAP==^D50     ;# OF CLOCK TICKS TO WAIT BETWEEN PROBE SCANS
TCLK==^D5000  

OPDEF   PJ      [PUSHJ P,]
OPDEF   RET     [POPJ P,]
OPDEF   STACK   [PUSH P,]
OPDEF   PULL    [POP P,]

DEFINE  SRET    <
        AOS     (P)
        RET     >

DEFINE  SUBR(X)<X: OPDEF X [PUSHJ P,.]>

DEFINE  AXIO(OP)<
        HRRI    AX,OP
        AUXCAL  AX,CH>

DEFINE  AXTXCR  <
        AXTX
        MOVEI   CH,215
        AUXCAL  AX,CH
        SKIP>

;SHARABLE STORAGE (ALL EXTERNAL)
EXTERN NEWCNT   ;UPDATED BY PRBCOM (IF RUNNING)
EXTERN	INTVEC		;INTERRUPT VECTOR
EXTERN	LOGTIM	;15 MINUTE TIMER
EXTERN	NAPTIM	;SLEEP TIMER FOR DPY
EXTERN	PRBACT	;FLAG FOR PROBE ACTIVE - INHIBITS DPY FROM RUNNING
EXTERN  RUNFLG  ;-1 SUICIDE, 0 NOT INITIALIZED, 1 RUNNING
EXTERN  BIOBUF  ;BLOCK I/O BUFFER
EXTERN  BIOEND  ;BLOCK I/O DONE FLAG
EXTERN  LINKED  ;LINK TABLE
EXTERN  TRIES           ;RETRY COUNT
EXTERN  AUXTAB          ;TABLE OF AUX CIRCUITS
EXTERN  DPYERR          ;ERROR FLAGS
EXTERN  ERRFLG
EXTERN  TIMEO
EXTERN  REQ             ;REQUEST FROM USER PROG
EXTERN  SENDP           ;FLAG FOR TIMEOUT
EXTERN  PREQ            ;REQUEST TO RUN PROBC
EXTERN  PRBOBP          ;POINTER TO PROBE COMMAND BUF
EXTERN  PRBIBP
EXTERN  NSLOTS          ;NUMBER OF USERS WE CAN HAVE
EXTERN  SUPNUM          ;SUPERVISOR NUMBER
EXTERN  SUPN            ;TABLE OF SUPERVISOR NUMBERS
EXTERN  PSUP            ;NUMBER OF SUP TO DIRECT OUTPUT TO
EXTERN  PRBERR          ;FLAG FOR CIRCUIT LOST
EXTERN  SSLP            ;FLAG - SUP SLEEPING
EXTERN  PZER             ;FIRST CELL TO ZERO
EXTERN  PLZER            ;LAST CELL TO ZERO
EXTERN  FL.SCB  ;FLAG, -1 IF CIRCUIT TO SUP. BUILT SUCCESSFULLY, ELSE 0
EXTERN  PORT    ;TABLE OF PORT #S
EXTERN  PTIME    ;TIMER, INCREMENTED BY CLOCK INTERRUPT
EXTERN  SENDNG  ;FLAG FOR TIMEOUT
EXTERN  LOGTAB  ;LOGIN TABLE
EXTERN  SYNCTB  ;SEMAPHORE TABLE
EXTERN	CHKTAB	;TIMEOUT TABLE
EXTERN  LOGFLG   ;FLAG FOR NEW LOGIN REQUEST
EXTERN  SLOT    ;SLOT ADDRESS FOR NEW LOGIN
EXTERN  SYNC    ;SEMAPHORE FOR SYNC BETWEEN USER PROCESSES
EXTERN	SYNUSR	;SLOT # OF USER WHO HAS SYNC SEMAPHORE
EXTERN  XSYNC   ;SEMAPHORE FOR PROBE COMMAND
EXTERN	XSUSR	;SLOT # FOR XSYNC
EXTERN  PBUFP  ;POINTER TO INPUT BUFFER
EXTERN	PBUF		;INPUT BUFFER FOR DPY
EXTERN	PRBIBF		;INPUT BUFFER FOR PROBC

SUBTTL  MAIN PROGRAM



START:  RESET
        SETZ    A,      ;DETACH
	IFN DEBUG,<ATTACH A,>
        IFE     DEBUG,<
        MOVEI   A,[SIXBIT /DSK/
                SIXBIT /PRBCOM/
                SIXBIT  /SWR/
                0
                0
                0]
        GETSEG  A,
        HALT    .
        SETZ    A,>
        SETUWP  A,      ;MAKE HIGH SEG WRITABLE
        HALT    .
        MOVEI   A,1
        MOVEM   A,RUNFLG        ;SO THE WORLD KNOWS WE'RE RUNNING
        SETZM   PZER
        MOVE    A,[PZER,,PZER+1]
        BLT     A,PLZER
	MSTIME	A,
	MOVEM	A,LOGTIM
        MOVE    P,CPDP  ;CLOCK PUSHDOWN STACK
        MOVEM   P,SPDP
        MOVE    P,PDP   ;INIT STACK POINTER
        SETOM   PSUP    ;INIT SUP NUMBER TO DEFAULT
        SETOM   SYNC    ;INIT SEMAPHORE
        SETOM   XSYNC   ;INIT SEMAPHORE
        SETOM   LINKED
        MOVE    A,[LINKED,,LINKED+1]
        BLT     A,LINKED+NSLOTS-1
        SETCLK          ;SET CLOCK INTERRUPT
RESTRT: SETZM   TRIES
        JRST    AXBCIR
REST1:  MOVEI   A,1
        MOVEM   A,NAPTIM
	IFE DEBUG,<
SCRAM:  OUTSTR  [ASCIZ /GO AWAY/] ;COME HERE IF SOMEONE ATTACHES US
        SETZ    A,
        ATTACH  A,              ;DETACH AGAIN
        AOS     NEWCNT
        JRST    SCRAM>
	IFN DEBUG,<
SCRAM:  MOVEI   A,1
        AOS     NEWCNT
	HIBER	A,
	SKIP
	JRST	SCRAM>

DPYLUP::AOS     NEWCNT
         SKIPE PRBERR		;DON'T RUN IF ERROR CONDITION NOT CLEANED UP
	JRST	DSMS
	SKIPE	PRBACT		;OR IF PROBE INTERACTIVE HANDLER RUNNING
	JRST	DSMS
	SKIPE   SSLP     ;SUP SLEEPING?
        JRST    AXBERR  ;YES
        MOVEI   A,3
        MOVEM   A,TRIES         ;INIT RETRY COUNT
;PROCESS NEW LOGIN, IF ANY
        SKIPN   LOGFLG           ;NEW LOGIN REQUEST?
        JRST    SYNC0           ;NO, GO TO SLEEP
        MOVEI    X,NSLOTS
        SOJL    X,BARF          ;FAIL IF NO SLOTS LEFT
        SKIPE   LOGTAB(X)         ;FIND EMPTY SLOT
        JRST    .-2
        SETOM   LOGTAB(X)         ;SET FLAG - USER NOW LOGGED IN
        SETOM   SYNCTB(X)         ;INIT SEMAPHORE
	SETZM	CHKTAB(X)		;INIT DEFUNCTNESS COUNT
BARF:   MOVEM   X,SLOT          ;SAVE SLOT NUMBER (-1 FOR FAILURE)
        SETZM   LOGFLG           ;TELL USER TO PICK UP INFO
SYNC0:  MOVEI   X,NSLOTS        ;INIT INDEX
        SETZ    B,
SYNC2:	SOJL	X,SYNC1
	SKIPN	LOGTAB(X)
	JRST	SYNC2
	AOS	B,CHKTAB(X)
	CAIG	B,5		;ARE THEY FOR REAL?
	JRST	SYNC2		;SO FAR THEY'RE OK - DO NEXT
	SETZM	LOGTAB(X)	;DEFUNCT - LOG THEM OUT
	CAIN	X,SYNUSR
        SETOM   SYNC
	CAIN	X,XSUSR
        SETOM   XSYNC
	JRST	SYNC2
SYNC1:	SETZ	B,		;INIT LOGIN COUNT
	MOVEI	X,NSLOTS
SYNCP:  SOJL    X,GOTALL        ;BUMP COUNT
	SKIPN	LOGTAB(X)	;THIS ONE LOGGED IN?
        JRST    SYNCP           ;NO, DO NEXT
TSYN0:	AOS	B,		;INC LOGIN COUNT
TSYNC:	AOSN	SYNCTB(X)	;TRY TO GRAB SEMAPHORE
        JRST    SYNCP           ;GOT IT, DO NEXT
        SETZ    A,              ;MISSED - SLEEP SHORT TIME
        SLEEP   A,
        SETOM   SYNCTB(X)
        JRST    TSYNC           ;WAKE UP AND TRY AGAIN
GOTALL:	JUMPE	B,[MSTIME B,	;NO LOGINS - SEE IF 15 MIN SINCE LAST
		SUB B,LOGTIM
		IDIVI B,^D60000
		CAIG B,^D15
		JRST GOT1
		SETOM RUNFLG	;NOBODY LOGGED IN FOR 15 MINS - QUIT
		DISMISS]
	MSTIME	B,
	MOVEM	B,LOGTIM	;REINIT LOGIN TIMEOUT
GOT1:	HRRZI	A,^D120         ;INIT TIMEOUT
        MOVEM   A,TIMEO
        SETOM   SENDNG          ;START TIMER TICKING
        SETZM   DPYERR          ;INIT ERROR INDICATOR
	PJ	BLKSET		;SET UP BLOCK I/O
        MOVEI   INP,PBUF        ;INIT IBUF POINTER
        MOVEI    M,[ASCIZ /STAT/] ;SEND STAT COMMAND
        AXTXCR
	PJ	GREPLY
        MOVEM   A,SAVA
        INCHRS  A
        JRST    .+2
        JRST    NOTSUP
        MOVEM   B,SAVB
        MOVEM   C,SAVC
        MOVEI   A,0
        MOVEM   A,COMPWD
        MOVEM   D,SAVD
        MOVE    D,PBUFP         ;GET PTR TO START OF BUFFER
LOOP:   MOVEI   B,0
        MOVE    C,DIAGTB(B)
        CAME    C,COMPWD
        JRST    .+3
        CAME    C,DIAGTB+2
        JRST    NOTSUP
        JFCL    
        AOJ     B,
        CAIE    B,6
        JRST    LOOP+1
        MOVE    A,COMPWD
        LSH     A,7
        MOVEM   A,COMPWD
        ILDB    B,D
        ANDI    B,177
        CAIN    B,":"
        JRST    COLON
        LSH     B,1
        IORB    B,COMPWD
        JRST    LOOP
NOTSUP: MOVE    A,SAVA
        MOVE    B,SAVB
        MOVE    C,SAVC
        JRST    SUPSLP
COLON:
        SETZ    A,0
        SETTIM  A,0
        JFCL
        MOVE    A,SAVA
        MOVE    B,SAVB
        MOVE    C,SAVC
GDSUP:  MOVEI    M,[ASCIZ /VERSION/]
        AXTXCR
	PJ	GREPLY
        MOVEI    M,[ASCIZ /COUNT/] ;SEND COUNT COMMAND
        AXTXCR
	PJ	GREPLY
        MOVEI    M,[ASCIZ /EXC/] ;GET EXCEPTIONS
        AXTXCR                  ;SEND
	PJ	GREPLY		;GET REPLY FROM PROBE
	HRRI	AX,42		;TERMINATE BLOCK I/O MODE
	AUXCAL	AX,
;RELEASE SEMAPHORES
        AOS     NEWCNT
UNSYNC:
        SETZ    A,0
        SETTIM  A,0
        JFCL
        HRRZI   A,TCLK
        SETTIM  A,0
        JFCL
        SETZM   SENDNG
        SETZM   TIMEO
        MOVEI   X,NSLOTS ;INIT INDEX
UNSYN1: SOJL    X,NAP
        SKIPN   LOGTAB(X)
        JRST    UNSYN1
        SETOM   SYNCTB(X)
        JRST    UNSYN1

NAP:    HRRZI   A,TNAP          ;SLEEP - COUNTED DOWN BY CLOCK
        MOVEM   A,NAPTIM        ;SET TIME TO SLEEP
        DISMIS
DSMS:	AOSG	NAPTIM		;ENSURE THAT WE GET RUN
	JRST	.-1
	DISMIS

SUPSLP: SETOM   SSLP
        JRST    AXBERR


;SEND STRING TO PROBE FOR "PROBE" COMMAND
PROBC:: AOS     NEWCNT
       	SKIPE   PRBERR          ;ERROR?
        JRST    PRBDMS          ;DISMISS IF SO
        MOVEI   A,3
        MOVEM   A,TRIES
        SKIPGE  PSUP            ;SPECIFIC SUP REQUESTED?
        JRST    PROBC1
        MOVE    A,PSUP
        MOVEM   A,CSUP
        MOVE    AX,PORT(A)      ;SET UP PORT NUMBER
PROBC1: HRRZI   A,^D60
        MOVEM   A,TIMEO
        SETOM   SENDP           ;ID FOR AXBERR
        SETZM   ERRFLG          ;FLAG FOR REQUESTING PROG
	PJ	BLKSET		;SET UP FOR BLOCK INPUT
        MOVE    M,PRBOBP
        AXTX                    ;SEND COMMAND
        MOVEI   INP,PRBIBF
        PJ      GREPLY          ;GET REPLY
	HRRI	AX,42		;TERMINATE BLOCK I/O
	AUXCAL	AX,
        SETZM   REQ             ;INFORM USER HIS INFO'S READY
        SETZM   TIMEO           ;TURN OFF TIMEOUT
        SETZM   SENDP
        MOVE    A,RSUP
        MOVEM   A,CSUP          ;SWITCH BACK TO RUNNING SUP
        MOVE    AX,PORT(A)
        SETOM   PSUP
	SETZM	PRBACT		;LET DPY RUN
        DISMIS
PRBDMS: SETOM   PREQ            ;TELL CLOCK TO RESTART US
        DISMIS                  ;WAIT

;SET UP PORT FOR BLOCK I/O
BLKSET:	HRRI    AX,34
	AUXCAL  AX,             ;PUT PORT IN BLOCK I/O MODE
	JRST	AXBERR
	HRRI	AX,32		;SET DATA MODE (IMAGE BINARY)
	AUXCAL	AX,BIOMOD
	MOVEI	B,^D400		;DO INPUT CALL TO GET THINGS STARTED
	MOVEM	B,BIOBUF
	HRRI	AX,36
	AUXCAL	AX,BIOBUF
	JFCL
	RET


;SET UP CLOCK INTERRUPT (SO USER PROGS KNOW WE'RE HERE)
SUBR    SETCLK
	MOVEI	A,CLOCK
	MOVEM	A,INTVEC+1
	MOVEI	A,DPYLUP
	MOVEM	A,INTVEC+3
	MOVEI	A,PROBC
	MOVEM	A,INTVEC+5
        MOVE    A,[2,,INTVEC]
        INTADR  A,              ;SET UP INTERRUPT VECTOR
        ERROR
        SETZ    A,
        SETTIM  A,      ;RESET TIMER TO NOTHING
        JFCL
        MOVE    A,[4,,1]        ;CAUSE=4, CHANNEL=1
        INTASS  A,      ;ASSIGN CHANNEL
        ERROR
        MOVSI   A,(1B0+1B1+1B2+1B3) ;ENABLE CLOCK AND RESTART INTS
        INTENB  A,
        ERROR
        HRRZI   A,TCLK  ;GET TIME BETWEEN TICKS
        SETTIM  A,
        ERROR
        RET




;CLOCK INTERRUPT
CLOCK:: AOS     NEWCNT
        AOS     PTIME           ;INCREMENT TIMER
        SKIPGE  RUNFLG  ;IF -1, EXIT
        JRST    SUICID
        EXCH    P,SPDP  ;SAVE STACK POINTER
        STACK   A       ;SAVE AC
        SKIPN   TIMEO
        JRST    PROBOK
        SOSE    TIMEO
        JRST    PROBOK
        HRRI    A,AXBERR
        HRRM    A,INTVEC        ;SET OFF ERROR HANDLER
	JRST	EXX
PROBOK: SKIPN   NAPTIM  ;MAIN PROGRAM ASLEEP?
        JRST    AWAKE   ;NO
        SKIPE   LOGFLG  ;ANYBODY WANT TO LOG IN?
        JRST    WAKEM
        SOSE    NAPTIM  ;TIME TO WAKE HIM?
        JRST    AWAKE   ;NO
WAKEM:  SETZM   NAPTIM          ;TURN OFF TIMER
        MOVSI   A,(1B0+1B2) ;TIME TO GET UP!
        INTACT  A,
        SKIP
AWAKE:  SKIPN   PREQ     ;ANYONE HAVE ANYTHING TO SAY?
        JRST    EXX     ;NO
        SETZM   PREQ
	SETOM	PRBACT
        MOVSI   A,(1B0+1B3) ;SET OFF INTERRUPT ROUTINE
        INTACT  A,
	JFCL
EXX:	SETZ	A,
	SLEEP	A,
	HRRZI   A,TCLK  ;RESET TIMER
        SETTIM  A,
        ERROR
	POP	P,A		;RESTORE AC
        EXCH    P,SPDP  ;RESTORE PROGRAM STACK
        DISMIS          ;RETURN TO MAINLINE
SUICID: MOVE    A,[1,,SUIBLK]
        RUN     A,
        HALT    .-1
SUIBLK: SIXBIT  /SYS/   ;LOG OUT
        SIXBIT  /LOGOUT/
        EXP     0,0,0,0,0,0





;	BUILD AN AUXILIARY CIRCUIT TO PROBE
AXBCIR: SETZ    A,              ;D. SCHMIDT - 7/3/79 -CLEAR INTERUPTS
        SETTIM  A,              ;AS PER WARNING IN UUO MANUAL
        JFCL                    ;FASTEST NO-OP
        MOVE    A,[1,,^D60]     ;SET TIMER INT. AT 60 SECONDS
        SETTIM  A,
        JFCL                    ;FASTEST NO-OP = ERROR RETURN
AXBCR2: SETZM   SUPNUM
        SETZM   CSUP
        SETOM   BCIRC   ;FLAG - IN PROCESS
        MOVEI   X,NSUPS
AXCRE:  SOJL    X,AXB0          ;LOG IN TO ALL SUPERVISORS
        MOVEM   X,CSUP          ;SAVE FOR ERROR PROCESSING
        SKIPE   FL.SCB(X)
        JRST    AXSTT           ;GO DIRECTLY TO STAT CHECK
        MOVE   AX,SUPLOG(X)    ;GET LOGIN STRING
        CREAUX  AX,
        JRST    AXBERR          ;IF WE FAIL, ASSUME DOWN
        HRL     AX,AX
        MOVEM   AX,PORT(X)      ;SAVE PORT #
        MOVEI   A,^D60
        MOVEM   A,TIMEO
	AXSCCN			;GOT ONE...SPAN INPUT OVER ":"
	MOVEI	M,[ASCIZ /NETCON2/]
	AXTXCR
	AXSCCN
	MOVEI	M,[ASCIZ /LOOPBACK/]
	AXTXCR
	AXSCCN
        SETOM   FL.SCB(X) ;SET FLAG FOR CIRCUIT BUILT
        SETZM   ERRFLG          ;D. SCHMIDT - 6/26/79 - CLEAR ERROR FLG
                                ;SOLVED TMS'S NON-REFRESHING SCREEN PROB.
AXSTT:  MOVE    AX,PORT(X)
        MOVEI   M,[ASCIZ /STAT/]
        AXTXCR			;SEND "STAT"
STATCK: MOVEM   A,SAVA
        MOVEM   B,SAVB
        MOVEM   C,SAVC
        MOVEI   A,0
        MOVEM   A,COMPWD
LOOP1:  MOVEI   B,0
        MOVE    C,DIAGTB(B)
        CAME    C,COMPWD
        JRST    .+4
        CAME    C,DIAGTB+2
        JRST    NTSUP2
        JFCL
        AOJ     B,
        CAIE    B,6
        JRST    LOOP1+1
        MOVE    A,COMPWD
        LSH     A,7
        MOVEM   A,COMPWD
        AXGCH
        CAIN    CH,":"
        JRST    GDSUP2
        LSH     CH,1
        IORB    CH,COMPWD
        JRST    LOOP1
GDSUP2: MOVE    A,SAVA
        MOVE    B,SAVB
        MOVE    C,SAVC
        MOVEM   X,RSUP
        MOVE    N,SUPN(X)
        MOVEM   N,SUPNUM
        JRST    ASLEEP+1
NTSUP2: MOVE    A,SAVA
        MOVE    B,SAVB
        MOVE    C,SAVC
        JRST    ASLEEP
ASLEEP: AXSCCN                  ;NOW SCAN FOR TERMINAL ":"
	SETZM	TIMEO		;TURN OFF TIMEOUT
        JRST    AXCRE           ;DO NEXT
AXB0:   SETZM   PRBERR
        MOVE    X,RSUP
        MOVEM   X,CSUP
        MOVE    AX,PORT(X)      ;GET PORT FOR RUNNING SUP
        SETZM   BCIRC
        SKIPN   SUPNUM          ;D. SCHMIDT - 7/3/79 - SKIP IF GOT SUP
        JRST    AXBCR2          ;OTHERWISE TRY AGAIN
        SETZ    A,              ;CLEAR TIMER INTERUPTS AS PER UUO MAUEAL
        SETTIM  A,              ;WARNING
        JFCL                    ;FASTEST NO-OP = ERRO RETURN
        HRRZI   A,TCLK
        SETTIM  A,              ;RESET TIMER TO ORIGINAL VALUE
        JFCL                    ;FASTEST NO-OP - ERROR RETURN
        JRST    REST1           ;CONT. AT REST1 = SET NAP AND GO AWAY
AXBERR: SETZ    A,0             ;RESET TIMER TO ORIGINAL VALUE
        SETTIM  A,0
        JFCL                    ;FASTEST NO-OP
        HRRZI   A,TCLK
        SETTIM  A,0
        JFCL
        SETZM   TIMEO
        AOS     NEWCNT
        MOVE    P,PDP           ;REINIT STACK
	HRRI	AX,42
	AUXCAL	AX,		;TURN OFF BLOCK I/O MODE
        PJ      AUXCHK          ;CIRCUIT STILL THERE?
        JRST    CZAPT           ;NO
	SOSG	TRIES		;RETRY?
	JRST	CZAPT		;NO
	SKIPE	SENDP		;CALLED FROM INTERACTIVE HANDLER?
        JRST    PROBC1          ;GO TRY AGAIN
	SKIPE   SENDNG          ;DPY SECTION?
        JRST    GOTALL
CZAPT:  SETOM   PRBERR
        SKIPN   SENDP
        JRST    LZAPT
        SETZM   SENDP
        SETOM   ERRFLG          ;INFORM USER PROG OF ERROR
        SETOM   PSUP
        SETZ    CH,
        MOVE    M,PRBIBP
        IDPB    CH,M
        SETZM   REQ             ;TELL USER TO PICK UP REPLY
	SETZM	PRBACT		;RELEASE LOCK FOR DPY
LZAPT:  SKIPN   SENDNG
        JRST    ZAPT
	SETZM	SENDNG
        SETOM   DPYERR
	MOVEI	CH,"D"-100
        IDPB    CH,INP
        MOVEI   X,NSLOTS        ;RELEASE SEMAPHORES
LZAP1:  SOJL    X,ZAPT
        AOS     NEWCNT
        SKIPN   LOGTAB(X)
        JRST    LZAP1
        SETOM   SYNCTB(X)
        JRST    LZAP1
ZAPT:   SKIPE   SSLP            ;DONT ZAP CIRC IF JUST ASLEEP
        JRST    INTCLR
        HLRZ    AX,AX
        ZAPCIR  AX,
INTCLR:	REDPIP  A,      ;DISMISS IF INTERRUPT
	JFCL
        TLZ	A,(1B1)		;DON'T ZAP THE CLOCK
        JFFO    A,INTDIS
        JRST    ZAP2
INTDIS:	ADDI	B,-2(B)		;GET INDEX INTO INTERRUPT VECTOR
        HRRI    A,INTCLR
        HRRM    A,INTVEC(B)
        DISMIS
ZAP2:	SETZM   SSLP
        SKIPN   BCIRC           ;START OVER IF CALLED FROM MAIN PROG
        JRST    AXBCIR
	MOVE	X,CSUP		;GET INDEX OF CURRENT SUP
        MOVE    N,SUPN(X)       ;IGNORE IF NOT RUNNING SUP
        CAME    N,SUPNUM
        JRST    AXCRE
        JRST    AXBCIR

;CHECK TO SEE IF AUX CIRCUIT STILL THERE, CLEAN UP ANY EXTRAS
AUXCHK: MOVE    A,[-<NSUPS+4>,,AUXTAB]
        AUXRED  A,              ;READ AUX STATUS
        SKIP
	MOVEI	X,NSUPS		;INIT PORTTAB INDEX
AXCHK1:	SOJL	X,AXCHK2	;DONE ALL?
        AOS     NEWCNT
	HRRZ	B,PORT(X)	;GET CIRCUIT #
	SETO	A,		;INIT AUXTAB INDEX
AXCHK3:	AOJ	A,		;LOOK AT NEXT IN LIST OF PORTS WE REALLY HAVE
	SKIPGE	AUXTAB(A)	;END OF LIST?
	JRST	AXCHK4		;YES
	CAME	B,AUXTAB(A)	;DOES THIS CIRCUIT REALLY EXIST?
	JRST	AXCHK3
	SETZM	AUXTAB(A)	;YES, DELETE THIS ENTRY
	JRST	AXCHK1

AXCHK4:	SETZM	PORT(X)		;THIS CIRCUIT HAS DIED
	SETZM	FL.SCB(X)
	JRST	AXCHK1		;GO LOOK AT NEXT

AXCHK2:	SETO	A,		;ZAP ANY EXTRANEOUS CIRCUITS
AXCHK5:	AOJ	A,
	SKIPN	B,AUXTAB(A)
	JRST	AXCHK5		;ENTRY WAS NULL, TRY NEXT
	JUMPL	B,AXCHK6	;NEGATIVE ENTRY MEANS END OF LIST
	ZAPCIR	B,		;OTHERWISE WE HAVE A CIRCUIT WE DON'T WANT
	SETZM	AUXTAB(A)
	JRST	AXCHK5
AXCHK6:	HLLZ	AX,AX		;NOW CHECK THAT CURRENT CIRCUIT IS STILL THERE
	MOVEI	X,NSUPS
AXCHK7:	SOJL	X,[RET]		;NOT FOUND, NO SKIP RETURN
	HLLZ	B,PORTGET NEXT LEGAL PORT NUMBER
        AOS     NEWCNT
	CAME	B,AX		;IS IT THE ONE WE WANT?
	JRST	AXCHK7		;NO, TRY NEXT
	SRET			;GOT IT, SKIP RETURN

;	A X T X
;	TRANSMIT A STRING OF CHARS
SUBR	AXTX
        HRRI    AX,7            ;CLEAR OUTBUF
        AUXCAL  AX,
        HLLZ    A,AX            ;WAIT FOR OUTPUT DONE
        LSH     A,11
        AND     A,[777000,,0]
        IOR     A,[140,,^D15000]
        HIBER   A,
        SKIP
        HRRI    AX,6            ;CLEAR INBUF
        AUXCAL  AX,
	HRLI	M,440700
AXTX1:	ILDB	CH,M		;GET ANOTHER CHAR
	JUMPE	CH,[RET ]
	IORI	CH,200		;CONVERT TO 8-LEVEL
	AXIO	AX.OW		;TRANSMIT IT
        SKIP
	JRST	AXTX1
	RET

;GET REPLY FROM PROBE
GREPLY:	HRRI	AX,35		;SELECT INPUT AND WAIT FUNCTION
	MOVE	B,INP		;INIT POINTERS
	HRLI	B,BIOBUF+1	;POINTER FOR BLT
	MOVEM	B,A		;SAVE
	MOVEI	C,^D400		;SET BYTE COUNT
        MOVEM   C,BIOBUF
	HLL	D,AX		;MAKE GETTAB WORD
	HRRI	D,-31
	MOVEM	D,GTABWD
BIOLUP:	AUXCAL	AX,BIOBUF	;PERFORM TRANSFER
	JRST	AXBERR
        AOS     NEWCNT
	MOVE	D,GTABWD	;EOF?
	GETTAB	D,
	JRST	AXBERR
	TRNE	D,20000
	JRST	BIOALL		;NO MORE DATA
	MOVE	C,BIOBUF	;GET COUNT OF BYTES ACTUALLY TRANSFERRED
	ADDI	C,3		;MAKE SURE WE POINT TO NEXT UNUSED WORD
	IDIVI	C,4		;CONVERT TO WORD COUNT
	ADD	INP,C		;UPDATE END POINTER
	BLT	B,(INP)		;COPY DATA TO DEST BUFFER
	ADD	A,C		;UPDATE START POINTER
	MOVE	B,A
	JRST	BIOLUP		;GET ANOTHER BUFFER FULL
BIOALL:	HRRI	AX,32		;TURN OFF EOF
	AUXCAL	AX,BIOMOD
	HRLZI	CH,(BYTE(8)4)	;TERM WITH EOT
	MOVEM	CH,(INP)
	AOJ	INP,
	HLLI	INP,441000	;MAKE BYTE POINTER
	RET

;	SCAN FOR OCTAL DIGIT
SUBR	AXSCOD
	AXGCH			;GET A CHAR
	CAIG	CH,"7"
	CAIGE	CH,"0"
	JRST	.-3
	RET			;GOT ONE...RETURN

;	SCAN FOR DECIMAL DIGIT
SUBR	AXSCDD
	AXGCH			;GET A CHAR
	CAIG	CH,"9"
	CAIGE	CH,"0"
	JRST	.-3
	RET			;GOT ONE...RETURN

;	GET AN OCTAL NUMBER FROM AUXILIARY CIRCUIT
;	EXPECTS <CH> TO CONTAIN THE FIRST DIGIT
;	RETURNS <CH> FIRST NON-DIGIT, <N> = NUMBER
SUBR	AXGON
	MOVEI	N,0		;INITIALIZE THE VALUE
AXGON1:	SUBI	CH,"0"		;MAKE INTEGER DIGIT
	IMULI	N,10		;SCALE NUMBER
	ADD	N,CH
	AXGCH			;GET ANOTHER CHARACTER
	CAIL	CH,"0"		;TEST RANGE
	CAILE	CH,"7"
	RET
	JRST	AXGON1		;ANOTHER DIGIT...REPEAT

;	GET A DECIMAL NUMBER FROM AUXILIARY CIRCUIT
;	EXPECTS <CH> TO CONTAIN THE FIRST DIGIT
;	RETURNS <CH> FIRST NON-DIGIT, <N> = NUMBER
SUBR	AXGDN
	MOVEI	N,0		;INITIALIZE THE VALUE
AXGDN1:	SUBI	CH,"0"		;MAKE INTEGER DIGIT
	IMULI	N,^D10		;SCALE NUMBER
	ADD	N,CH
	AXGCH			;GET ANOTHER CHARACTER
	CAIL	CH,"0"		;TEST RANGE
	CAILE	CH,"9"
	RET
	JRST	AXGDN1		;ANOTHER DIGIT...REPEAT

;	SCAN INPUT FROM AUXILIARY CIRCUIT FOR ":"
SUBR	AXSCCN
	AXGCH			;GET THE CHAR
	CAIE	CH,":"
	JRST	.-2		;NOT YET
	RET			;GOT ONE...RETURN

;	GET A CHARACTER FROM AUXILIARY CIRCUIT
SUBR	AXGCH
        AXIO    AX.IW           ;GET THE CHAR
        JRST    AXBERR
        ANDI    CH,177
        RET

SUBR    ERROR
	SETOM	RUNFLG
        HALT    .


SUBR    ACCSAV
        SKIPE   ACCFLG
        DISMIS
        SKIPE   ACCFLG
        RET
        MOVEM   M,ACSAV
        MOVSI   M,1
        HRRI    M,ACSAV+1
        BLT     M,ACSAV+17
        SETOM   ACCFLG
        RET

SUBR    ACCRES
        SKIPN   ACCFLG
        DISMIS
        SKIPN   ACCFLG
        RET
        HRLZI   17,ACSAV
        BLT     17,17
        SETZM   ACCFLG
        RET


SUBTTL LOCAL CONSTANTS AND DATA
BCIRC:  0               ;FLAG FOR CIRCUITS BEING BUILT
RSUP:   0                       ;# OF RUNNING SUP
CSUP:   0
SUPLOG: [ASCIZ /PROBE:121;/]    ;LOGIN STRINGS
        [ASCIZ /PROBE:122;/]
        [ASCIZ /PROBE:123;/]
        [ASCIZ /PROBE:125;/]
;BYTE POINTER TABLE FOR BLOCK INPUT
BPTAB:	POINT	8,0
	POINT	8,0,7
	POINT	8,0,15
	POINT	8,0,23

SAVA:   0
SAVB:   0
SAVC:   0
SAVD:   0

ACCFLG: 0
ACSAV:  BLOCK   20

COMPWD: 0

DIAGTB: ASCII   /NAME/
        ASCII   /INITI/
        ASCII   /DISK /
        ASCII   /SLEEP/
        ASCII   /FROZE/
        ASCII   /ENTER/

SPDP:   0
CPDP:   -20,,.
        BLOCK   21
PDP:    -20,,.
        BLOCK   21
GTABWD:	0			;WORD FOR GETTAB

        XLIST
        LIT
        LIST
        END     START
    f 1