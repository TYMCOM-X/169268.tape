;DEFINE VERSION NUMBER

        TYMSPC==4
	TYMREL==16	;TYMSHARE RELEASE NUMBER
	DECSPC==0	;DEC SPECIFICATION  [WHAT'S A]
	DECREL==0	;DEC RELEASE NUMBER [DEC HAND?]

DEBUG==0			;1 FOR REAL, NONZERO FOR DEBUGGING
IFNDEF  DEBUG,<DEBUG==0>
NETCON==1
IFNDEF  NETCON,<NETCON==0>

DEFINE TITL(TS,TR,DS,DR)<
TITLE TMS -- VERSION TS'.'TR'-'DS'.'DR
SUBTTL	NETWORK OPERATOR INTERFACE      RG - JULY 25, 1977
SUBTTL  TYMNET MONITORING SYSTEM   ROBERT W. BAILEY (JANUARY 78)
IF1,<PRINTX VERSION TS'.'TR'-'DS'.'DR>
VNETDPY==BYTE(9)DS,TS,DR,TR>

	TITL	(\TYMSPC,\TYMREL,\DECSPC,\DECREL)

	LOC	137
JOBVER:	VNETDPY
	RELOC
	MLON
	SALL

;AC ASSIGNMENTS

M=0
A=1
B=2
C=3
D=4
X=5
J=5
OBP=5                           ;BYTE POINTER TO OUTPUT BUFFER
AX=6		;AUXILIARY CIRCUIT CONTROL
R=7
N=10
N1=11
F=12
BP=13
T1=14
CURSOR=15
T2=15
CH=16
P=17

;I/O CHANNELS
HOS==1
NAM=2			;NODE NAME FILE

IFNDEF JIFSEC,<JIFSEC==^D60>
SUBTTL PARAMETERS AND DEFINITIONS

;FLAGS (LH OF F)

FL.SUP==1	;SUPPRESS OUTPUT
FL.FLS==2	;TOGGLE FOR FLASHING LINES
FL.EOL==4	;SYNC FOR CLEAR EOL IN OUTPUT
FL.2PT==10	;TWO PART OUTPUT PHASE FLAG
FL.REF==20	;ONE FOR FULL REFRESH PASS, 0 FOR PARTIAL
FL.HLP==40	;LAST TYPEIN WAS JUNK--FLASH HELP
FL.OUT==100	;FLAG FOR LINES OUT
FL.SHU==200	;FLAG FOR LINES SHUT
FL.OOC==400	;FLAG FOR LINES OUT OF CHANNELS
FL.HAN==2000	;FLAG FOR HOST ANSWERED
FL.HSH==4000	;FLAG FOR HOST SHUT
FL.HDN==10000	;FLAG FOR HOST DOWN
FL.REC==20000   ;FLAG FOR COMMAND RECOGNIZED
FL.BCS==40000   ;FLAG FOR BREAK CHAR SEEN

NUMBAS==1000            ;NO. OF BASES
NUMREM==2500            ;NUMBER OF REMOTES
NN.SIZ==NUMBAS+NUMREM	;NUMBER OF NODES WE CAN HANDLE
BUF.SZ==400 		;SIZE OF BUFFER (MUST BE .GE. 200)
PBF.SZ==400             ;SIZE OF PROBE BUFFER
HOS.SZ==1411            ;SIZE OF HOST BUFFER
NU.SIZ==12		;SIZE OF NODE-UP TABLE
ND.SIZ==100		;SIZE OF NODE-DOWN TABLE

;	AUXILIARY CIRCUIT FUNCTIONS
AX.IW==0		;INPUT CHAR AND WAIT
AX.IS==1		;INPUT CHAR AND SKIP IF SUCCESS
AX.OW==3		;OUTPUT CHAR
AX.SP==10		;SKIP IF INPUT CHAR PRESENT

        EXTERN  SENDNG
EXTERN  ANS,FORSE.

EXTERN NEWCNT   ;THIS CELL CONSTANTLY UPDATED BY PRBCOM(IF RUNNING)
EXTERN JOBREN
EXTERN  RUNFLG  ;0 MEANS PRBCOM NOT RUNNING, 1 RUNNING, -1 SUICIDE
EXTERN  FL.SCB          ;TABLE OF FLAGS - CIRCUIT BUILT
EXTERN  LINKED  ;LINK TABLE
EXTERN  LNKBUF  ;LINK DATA BUFFER
EXTERN  LNKDAT  ;LINK CONTROL TABLE
EXTERN  NAMTAB  ;TABLE OF USER NAMES
EXTERN  SPYBUF  ;TABLE OF USERS WHO HAVE EXECUTED OPERATOR COMMANDS
EXTERN  SPYNAM  ;TABLE OF NAMES FOR SPY COMMAND
EXTERN  SPYCUR  ;POINTER TO CURRENT ENTRY IN RING BUFFER
EXTERN  ERRFLG  ;PROBE SCREWUP
EXTERN  DPYERR
EXTERN  PREQ    ;TELLS CLOCK INT TO RUN COMMUNICATOR
EXTERN  PRBOBP  ;POINTER TO PROBE COMMAND BUFFER
EXTERN  PRBIBP  ;POINTER TO PROBE REPLY BUFFER
EXTERN  REQ     ;-1 MEANS WE HAVE SOMETHING TO SAY TO PROBE
EXTERN  XSYNC   ;SEMAPHORE FOR PROBE COMMAND
EXTERN	XSUSR	;SLOT # FOR XSYNC
EXTERN  SUPNUM  ;SUPERVISOR NUMBER
EXTERN  PSUP    ;SUPERVISOR THAT WE ARE TALKING TO
EXTERN  SUPN    ;TABLE OF SUPERVISOR NUMBERS
EXTERN  PRBERR  ;FLAG - CIRCUIT LOST
EXTERN  PTIME   ;PROBCOM TIMER
EXTERN  SSLP    ;SUP SLEEPING FLAG
EXTERN  PBUFP   ;POINTER TO PROBCOM BUFFER
EXTERN  LOGFLG   ;FLAG - LOGIN REQUEST
EXTERN  SLOT    ;SLOT PASSED BACK BY PRBCOM
EXTERN  SYNCTB  ;SEMAPHORE TABLE
EXTERN  LOGTAB  ;LOGIN TABLE
EXTERN	CHKTAB	;TIMEOUT TABLE
EXTERN  SYNC    ;SEMAPHORE
EXTERN	SYNUSR	;SLOT # FOR SYNC SEMAPHORE
;CONTROL CHAR DEFS
CDOWN=12        ;MOVE CURSOR DOWN ONE LINE
CUP=13
CLEFT=10        ;MOVE LEFT
CRIGHT=14       ;MOVE RIGHT
HOMEUP=36
ERASE==32
BELL=7          ;BEEP
WIDTH=^D80      ;LINE LENGTH
NLINES=^D24     ;NUMBER OF LINES ON SCREEN
WCOL=<WIDTH/2>-1 ;COLUMN WIDTH

NSUPS==4
NSLOTS==20      ;NUMBER OF JOB SLOTS
NSPY==20        ;NUMBER OF SPY SLOTS
NLOGR==2        ;NUMBER OF LOGGERS
THIBE==5

OPDEF	PJ [PUSHJ P,]
OPDEF	RET [POPJ P,]

DEFINE  CMDATA(STR,ADR<CMDOK>,OPER,%X)<
	IFIDN	<ADR><>,<
		IFE	OPER,<0,,CMDOK>
		IFN	OPER,<400000,,CMDOK>>
	IFDIF	<ADR><>,<
	        IFE     OPER,<0,,ADR>
	        IFN     OPER,<400000,,ADR>>
        ASCIZ   /STR/
        %X==0
        IRPC    STR,<%X==%X+1>
        %X==%X-5
        IFL     %X,<0,,0>>

DEFINE	SRET	<
	AOS	(P)
	RET
>

DEFINE	SET	(LT,RT,TOP,BOT,NEXT,TABS)<
	PJ	SETUP
	XX=10
	RADIX	10
	BYTE	(7)LT-1(7)RT-LT(5)TOP-1,BOT-1(2)NEXT(10)TABS-TAB0
	RADIX	XX
>

DEFINE	CHANGE	(LT,RT,TOP,BOT,NEXT,TABS)<
	FIN
	SET	LT,RT,TOP,BOT,NEXT,TABS
>

DEFINE FIN <
	CRLF			;CLEAR ALL REMAINING SPACE
	SKIPL	LINE
	JRST	.-2
>

DEFINE SUBR(X)<X: OPDEF X [PUSHJ P,.]>

DEFINE	CAPTION(TEXT) <
	MOVEI	N,[ASCIZ /TEXT/]
	HEADING
>
SUBTTL TOP LEVEL PROGRAM

;START HERE

START:  MOVE    P,PDP   ;INIT STACK
        JRST    INIT0
        MOVE    A,DERPTR        ;SAVE DISK ERROR POINTERS
        MOVEM   A,SAVDP1
        MOVE    A,DERPTR+1
        MOVEM   A,SAVDP2
        OUTCHI  ERASE   ;CLEAR SCREEN
        MOVEI   N,0
        MOVEI   X,15
        OUTSTR  [ASCIZ/ENTER USER CODE/]
        TTCALL  1,X
        MOVEI   R,12
        TTCALL  1,R
ECHOFF: MOVE    AX,[-1,,-31]
        GETTAB  AX,
        HALT    .
        ADDI    AX,200
        JUMPE   AX,.-2
        SETMOD  AX,
        MOVEI   B,8
        MOVE    C,[ASCIZ/BOOTH/]
        MOVE    F,[ASCIZ/ILL/]
LOOP:   SOJL    B,ECHON
        INCHRW  CHAR
        MOVE    D,CHAR
        DPB     D,PTR(N)
        IBP     PTR(N)
        CAIG    B,3
        MOVEI   N,1
        JRST    LOOP
ECHON:  SUBI    AX,200
        SETMOD  AX,
CHECK:  SUBM    C,PWORD
        SKIPE   PWORD
        JRST    NVALID
        SUBB    F,PWORD1
        JUMPE   F,.+3
NVALID: OUTSTR  [ASCIZ/INVALID USER CODE/]
        EXIT
INIT0:  OUTSTR  [ASCIZ /INITIALIZING.
/]
        SETZM	ZER		;CLEAR OUT SCRATCH
	MOVE	A,[ZER,,ZER+1]
	BLT	A,LZER
	MOVEI	A,JIFSEC	;PRESET JIFFY CLOCK
	MOVEM	A,TCKSEC
	HRROI	A,-22		;SAVE SIXBIT USER NAME
	GETTAB	A,
	JFCL
	MOVEM	A,USRNAM
	IFN NETCON,<PJ	GHOST>	;GET HOST LIST (NETCON ONLY)
        GETNN                   ;GET THE NODE-NAME LIST
        JRST    [OUTSTR [ASCIZ /
Unable to get node name list - aborting.
/]
                EXIT    1,]
	IFN DEBUG,<MOVE M,[POINT 7,[ASCIZ /NETCON:/]]>
	IFE DEBUG,<MOVE M,[POINT 7,[ASCIZ /NETCON:/]] ;SET UP LOGIN STRING>
        MOVE    T1,[POINT 7,LOGIST]
ST1:	ILDB    CH,M
        JUMPE   CH,ST2
        IDPB    CH,T1
        JRST    ST1
ST2:    HRRZI   A,11
        GETTAB  A,      ;GET SYSTEM NUMBER
        SKIP
        MOVE    M,[POINT 7,A,6]
        ILDB    CH,M
        IDPB    CH,T1		;APPEND TO USER NAME
        SUBI    CH,60
        IMULI   CH,10
        MOVEM   CH,SYSNO
        ILDB    CH,M
        IDPB    CH,T1
        SUBI    CH,60
        ADDB    CH,SYSNO
        MOVEI   CH,";"
        IDPB    CH,T1		;TERM WITH ";" AND NULL CHAR
        SETZ    CH,
        IDPB    CH,T1
        LDB     A,TTYPE         ;SET UP FOR RIGHT KIND OF TERMINAL
        MOVE    B,OEINS(A)      ;GET OUT ERASE INSTRUCTION
        MOVEM   B,OERASE
        MOVE    B,CEINS(A)      ;GET COUT ERASE INSTRUCTION
        MOVEM   B,CERASE
;INIT COMMAND TABLE
	SETZ	D,		;D IS INDEX INTO COMMAND TABLE BEING BUILT
	HRROI	X,-2		;X IS INDEX INTO COMMAND LIST FROM FILE
ST3:	ADDI	X,2		;GET NEXT COMMAND STRING
	DMOVE	A,CMDVAL(X)
	JUMPE	A,START1	;ZERO MEANS WE'RE DONE
	MOVEI	C,NCMD*3	;C IS INDEX INTO INTERNAL TABLE
ST4:	SUBI	C,2		;LOOK AT NEXT ENTRY
	SOJL	C,ST3		;THIS ONE DIDN'T MATCH ANYTHING - IGNORE
	CAME	A,ICMDTB+1(C)	;MATCH?
	JRST	ST4
	CAME	B,ICMDTB+2(C)
	JRST	ST4
	AOS	NVCMD		;GOT IT - INC COUNT OF VALID COMMANDS
	DMOVEM	A,CMDTAB+1(D)
	MOVE	A,ICMDTB(C)
	MOVEM	A,CMDTAB(D)	;MAKE ENTRY IN REAL COMMAND TABLE
	ADDI	D,3
	JRST	ST3		;DO NEXT
        MOVEI   A,START1        ;FROM HERE ON, DON'T COMPLETELY REINIT
        MOVEM   A,JOBREN
START1: PJ      INIT1
START2: SKIPN   SUPNUM  ;HAS PRBCOM GOTTEN ON YET?
        JRST    NOSUP   ;NO
        LOG
        JRST    PROBE
REST0:  RESET
	MOVE	P,PDP		;SET UP STACK POINTER
        PJ      INIT1           ;REINIT STUFF THAT GETS CLEARED BY RESET
        SETZ    F,              ;INIT ALL FLAGS TO OFF
RESTRT:	OUTCHR  [HOMEUP]
        XCT     OERASE          ;CLEAR SCREEN
	MOVEI	A,EXCEPT	;SET EXCEPTION PROGRAM ON ENTRY
	MOVEM	A,PROGRM	;SAVE DISPLAY PROGRAM ADDRESS
        MOVE    A,[-1,,-31]     ;READ TERMINAL CHARACTERISTICS
        GETTAB  A,
        JRST    [OUTSTR [ASCIZ /Error - trying to turn off echo./]
                EXIT 1,]
        IORI    A,1B28          ;TURN OFF ECHO
        SETMOD  A,
SYSTT0:	MOVE	P,PDP		;SETUP STACK PNTR.
	AND	F,[FL.HLP,,0]	;CLEAR ALL FLAGS EXCEPT HELP
	TLO	F,FL.REF	;SET FOR FULL REFRESH
        MOVE    A,[40040,,40040]
        MOVEM   A,DBUF          ;CLEAR SCREEN TO SPACES
        MOVE    A,[DBUF,,DBUF+1]
        BLT     A,DBFEND
REENT:	HOME
	TLZ	F,-1-FL.REF-FL.HLP-FL.FLS	;CLEAR MOST FLAGS
        MOVEI   A,3             ;TRY THREE TIMES BEFORE REPORTING ERROR
        MOVEM   A,TRY
	JRST	@PROGRM		;GO TO CURRENT DISPLAY PROGRAM

;GET PRBCOM, DISABLE ESCAPE
INIT1:  GETPRB                  ;BUILD A CIRCUIT TO INTERDATA SUPERVISOR
        CLRBFI
        RET
;HERE AT END OF SCREEN CONSTRUCTION TO OUTPUT SCREEN AND DO OVERHEAD

FINIS:  INCHRS  C               ;SEE IF ANY CHARS WERE TYPED
        JRST    .+2             ;NO
        JRST    FINX            ;YES,GO PROCESS IMMEDIATELY
        FIN
	TLCN	F,FL.FLS	;COMPLEMENT FLASHER
	TLNN	F,FL.HLP	;SEE IF HELP ADVISED
	JRST	FINIS1		;NO--SKIP ADVISORY
	SET	53,WIDTH,NLINES,NLINES,0,TAB0
	MOVEI	M,[ASCIZ / Type ? for help./]
	MSG

FINIS1: MOVE    BP,[POINT 9,DBUF] ;SET UP INITIAL POINTER
        MOVEI    A,^D400           ;INIT OUTBUF COUNT
        MOVEM   A,OBCOUN
        MOVE    OBP,OBFIP       ;INIT OUTBUF POINTER
        MOVEI   CH,HOMEUP       ;PUT REAL CURSOR IN RIGHT PLACE
        COUT
        TLZE    F,FL.REF        ;REFRESH?
        XCT     CERASE          ;YES, CLEAR SCREEN
        SETO    CURSOR,
        SETZM   OLDCUR
NEXTCH: AOS     CURSOR  ;INCREMENT CURSOR
        CAILE   CURSOR,NLINES*WIDTH     ;AT END OF SCREEN?
        JRST    DONE            ;YES
        ILDB    T1,BP           ;GET NEXT CHAR FROM SCREEN IMAGE
        TRZN    T1,200          ;THIS CHAR NEW?
        JRST    NEXTCH          ;NO, GET NEXT ONE
        DPB     T1,BP           ;PUT CHAR BACK WITH "NEW" BIT OFF
        MOVE    A,CURSOR        ;WHERE WE ARE NOW
        SUB     A,OLDCUR        ;MINUS WHERE WE WERE LAST OUTPUT
        CAIG   A,4             ;WORTH THE TROUBLE OF SENDING ADDRESS?
        JRST    DIRECT          ;NO, MOVE STEP BY STEP
        MOVE    A,CURSOR
        IDIVI   A,WIDTH         ;TRANS CURSOR INTO X+Y
        MOVE    C,OLDCUR
        IDIVI   C,WIDTH         ;DO SAME FOR OLD CURSOR
        SUB     A,C             ;GET DELTA X AND Y
        SUB     B,D
        MOVE    D,B
        MOVM    B,B             ;GET ABS VALUE
        ADD     B,A
        CAIG    B,4
        JRST    DIREC1          ;TOTAL DIST <4, GO DIRECT
        MOVE    A,CURSOR
        IDIVI   A,WIDTH
        MOVEI   CH,33           ;SEND SET CURSOR SEQUENCE (ESC =)
        COUT
        MOVEI   CH,"="
        COUT
        ADDI    A,40            ;SEND ADDRESS, FIRST Y
        MOVE    CH,A
        COUT
        ADDI    B,40
        MOVE    CH,B
        COUT                    ;THEN X
FINOC:  MOVE    CH,T1           ;FINALLY, OUTPUT THE CHARACTER
        COUT
        MOVEM   CURSOR,OLDCUR   ;REMEMBER WHERE WE ARE
        AOS     OLDCUR
        JRST    NEXTCH          ;GO DO NEXT ONE

        MOVEI    CH,CRIGHT       ;SPACE OVER TO NEW POSITION
        COUT
DIRECT: SOJL     A,FINOC
        JRST    .-3

DIREC1: MOVEI    CH,CLEFT        ;WHICH WAY TO GO?
        SKIPL  D               ;FIND OUT
        MOVEI    CH,CRIGHT       ;GET CORRECT SPACER CHAR
        MOVM    D,D             ;GET ABS VALUE FOR COUNT
        SOJL    D,DOVERT        ;DONE WITH HORIZ WHEN COUNT 0
        COUT
        JRST    .-2
DOVERT: MOVEI    CH,CDOWN        ;THIS IS SIMPLER, ALWAYS DOWN
        SOJL    A,FINOC
        COUT
        JRST    .-2

DONE:   MOVEI   CH,HOMEUP
        COUT
        DUMP

FINXX:  MOVE    C,[11,,THIBE]
        HIBER   C,
	JRST	ZAPPED		;COMMAND PORT ZAPPED - LOG OUT
        SKIPG   RUNFLG          ;PRBCOM STILL ALIVE?
        JRST    PRBDED          ;NO
        MOVE    X,ISLOT
        SKIPL   LINKED(X)       ;SOMEBODY LINKING TO US?
        JRST    PROBE
	SKIPN	LOGTAB(X)
	JRST	RCVZAP		;WE'VE BEEN ZAPPED
	SETZM	CHKTAB(X)
        INCHRS  C
        JRST    REENT
FINX:	CAIL	C,"A"+40	;SEE IF LOWER CASE
	CAILE	C,"Z"+40	; ALPHABETIC
	SKIPA			;NO--LEAVE ALONE
	SUBI	C,40		;YES--CONVERT TO UPPER CASE
	MOVSI	A,-CHRN		;SEARCH CONTROL CHARACTER TABLE
FINXCL:	HLRZ	B,CHRTAB(A)	;GET NEXT CANDIDATE
	CAMN	B,C		;SEE IF MATCH
	JRST	FINXC		;YES--GO HANDLE
	AOBJN	A,FINXCL	;NO--TRY NEXT
				;NOT IN TABLE--
	CAIGE	C,40		;SKIP IF NOT CONTROL
	JRST	FINXC		;CONTROL--THROW AWAY
	MOVSI	A,-PRGN		;SEARCH PROGRAM CHARACTER TABLE
FINXL:	HLRZ	B,PRGTAB(A)	;GET LEGAL CHARACTER
	CAMN	B,C		;THAT WHAT WAS TYPED?
	JRST	FINXF		;YES. FOUND.
	AOBJN	A,FINXL		;NO. LOOP
	TLO	F,FL.HLP	;SET 'HELP' WANTED FLG
        JRST    REENT

;HERE AFTER COMMAND PROCESSED

FINXF:	TLZ	F,FL.HLP	;CLEAR HELP NEEDED FLAG
	HRRZ	B,PRGTAB(A)	;GET PROGRAM STARTING ADDRESS FOR THIS CHAR
	MOVEM	B,PROGRM	;SAVE IT AS DISPATCH ADDRESS
	JRST	SYSTT0		;AND GO DO THE PROGRAM

FINXC:	TLZ	F,FL.HLP	;CLEAR HELP NEEDED FLAG
	MOVE	N,CHRTAB(A)	;GET DISPATCH ADDRESS
	JRST	(N)		;GO DO IT
	EXIT
;TABLE FOR ACTION CHARACTER DISPATCH
CHRTAB:	XWD	" ",SYSTT0	;UPDATE SCREEN IMMEDIATELY
	XWD	"R",NEWNOD	;INPUT NEW NODE TABLE
        XWD     "P",PROBE       ;PROBE
        XWD     "L",LOGLOG      ;LOGGER
	XWD	32,ALLDON	;IF ^Z, GO EXIT
CHRN==.-CHRTAB


;TABLE FOR SCREEN SELECTOR
PRGTAB:	XWD	"?",HELP	;HELP TEXT
        IFN     NETCON,<"H",,HELP>
	XWD	"E",EXCEPT	;EXCEPTION TEXT
PRGN==.-PRGTAB			;LENGTH OF TABLE

;	HERE TO UPDATE NODE TABLE
NEWNOD: GETNN           ;GET LIST OF NODE NAMES
        SKIP
        IFN NETCON,<PJ  GHOST>  ;GET HOST LIST (NETCON ONLY)
	JRST	REENT		;RETURN

;HERE WHEN USER TYPES ^Z, TO EXIT TO MONITOR

ALLDON: OUTCHR  [HOMEUP]
        MOVEI   A,NLINES-2
        OUTCHR  [CDOWN]
        SOJG    A,.-1
        DUMP
        MOVE    A,[41,,^D10]
        HIBER   A,
	JRST	ZAPPED		;THEY'VE HUNG UP - LOG THEM OUT
ALLD1:  MOVEI   B,SYNC
        SYNCL
        MOVE    X,ISLOT
        SETZM   LOGTAB(X)
	SETOM	SYNUSR
        SETOM   SYNC
ALLD2:  SETO    A,
        GETLCH  A
        TLZ     A,20
        SETLCH  A
	EXIT    1,      ;MONRET

;COME HERE IF WE DISCOVER PRBCOM DEATH (RUNFLG=-1)
PRBDED: OUTSTR  [ASCIZ /
Probe multiplexer has halted.  Aborting.
/]
	JRST	ALLD2

;HERE IF WE DISCOVER COMMAND PORT GONE
ZAPPED:	MOVEI	B,SYNC		;GRAB LOGIN SEMAPHORE
	SYNCL
	MOVE	X,ISLOT		;LOG OUT OF PRBCOM
	SETZM	LOGTAB(X)
	SETOM	SYNUSR
        SETOM   SYNC
	MOVE	A,[1,,ZAPBLK]	;NOW LOG OUT OF EVERYTHING
	RUN	A,
	EXIT	1,

ZAPBLK:	SIXBIT	/SYS/
	SIXBIT	/LOGOUT/
	EXP	0,0,0,0,0,0
	SUBTTL	"H" -- DISPLAY HELP MESSAGE

HELP:	HEADER			;GIVE HEADER LINE
	CHANGE	1,WIDTH,6,NLINES,0,TAB4
	MOVEI	M,HELPMS	;GET MESSAGE
	MSG			;OUTPUT IT
	JRST	FINIS

HELPMS:	ASCIZ $
Type one character to have effect  --  no carriage return needed.

Type the screen selection character to refresh display
as given below:

?       list this text
E       list exceptions

^Z      exit back to the monitor
R       refresh name tables from files
space   rewrite screen (same display)
L       start logger
P       talk directly to Probe

$
SUBTTL "H" -- HOSTS DISPLAY
 IFN NETCON,<

HOSDIS: CKINCH                  ;GO SEE IF INPUT CHAR PRESENT
        PJ      AXHOST  ;GET HOST EXCEPTION REPORT
        JFCL    HOS6            ;BB MOD
        JRST    HOS1A            ;BB MOD
        CHANGE  1,WIDTH,5,5,0,TAB4 ;PUT OUT SUBHEADING
        MOVEI   M,[ASCIZ /Hosts:/]
        MSG
        MOVEI   M,[ASCIZ /   Down=/]
        MOVE    N,HDOWN
        SKIPE   N               ;NO MESSAGE IF NONE DOWN
        MSGDEC
        MOVEI   M,[ASCIZ /   Shut=/]
        MOVE    N,HSHUT
        SKIPE   N
        MSGDEC
        MOVEI   M,[ASCIZ /   Answered=/]
        MOVE    N,HANS
        SKIPE   N
        MSGDEC
        CHANGE  1,WCOL,7,NLINES,1,TAB1
HOS1A:  TLZ     F,FL.HDN+FL.HSH
        SKIPN   HDOWN           ;ANY DOWN?
        JRST    HOS6            ;NO
        MOVEI   C,1
HOS1:   MOVE    A,HOSTS(C)      ;GET NEXT ENTRY
        JUMPE   A,HOS2          ;IGNORE NULL
        MOVEM   A,HOSTS         ;SAVE IT
        LDB     B,HDS
        JUMPE   B,HOS2          ;NOT DOWN - GO ON
        TLON    F,FL.HDN
        PJ      [CAPTION (  Hosts Down)  ;IF FIRST ONE
                RET]
        LDB     N,HHOST
        PJ      HOSPRN
        SETZM   HOSTS(C)        ;BLANK ENTRY
HOS2:   AOJ     C,
        CAMG    C,HOS.NO
        JRST    HOS1
HOS6:   TLZ     FL.HSH
        SKIPN   HSHUT           ;ANY SHUT?
        JRST    BBMOD9          ;NO
        MOVEI   M,0
        MOVEM   M,BI.FLAG               ;FLAG FOR BISYNC HOST HEADING
        MOVEI   C,1
HOS3:   MOVE    A,HOSTS(C)      ;THIS CODE IN SAME FORM AS ABOVE
        JUMPE   A,HOS5
        MOVEM   A,HOSTS
        LDB     B,HSS
        JUMPE   B,HOS5
        TLON    F,FL.HSH
        JFCL
        LDB     N,HHOST
        PJ      HOSPRN
        SETZM   HOSTS(C)
HOS5:   AOJ     C,
        CAMG    C,HOS.NO
        JRST    HOS3
BBMOD9: JRST    BBMOD1          ;GO DO LINES OUT
        PJ      [CAPTION ( -no hosts down-)
                RET]
        TLNN    F,FL.HSH
        PJ      [CAPTION ( -no hosts shut-)
                RET]
HSLEEP: MOVEI   A,HNULL
        MOVEM   A,PROGRM
        JRST    FINIS
HNULL:  MOVE    C,[11,,THIBE]
        HIBER   C,
	JRST	ZAPPED		;USER HAS HUNG UP - LOG OUT
        INCHRS  C
        JRST    HNULL
        JRST    FINX

;GET HOST REPORT FROM PROBE
AXHOST: CKINCH                  ;CK FOR INPUT CHAR
        PJ      HOSXMT
        RET             ;SKIPS IF NO ERRORS
   MOVE    A,IHOSPT
        MOVEM   A,HOSPTR
        SETZM   HANS    ;INIT THINGS
        SETZM   HSHUT
        SETZM   HDOWN
        SETZM   HOS.NO
HOS.1:  ILDB    CH,HOSPTR
	ANDI	CH,177
	CAIN	CH,0
	JRST	.-3
        CAIN    CH,":"  ;TIME TO QUIT?
        JRST    HOS.4
        MOVEI   B,1     ;BIT FOR SETTING FLAGS
;GET HOST REPORT, EACH ENTRY IN FORM: H STATE NN NODE
        SETZM   HOSTS   ;INIT SAVE WORD
        PJ      HOSGD0  ;GET HOST NUMBER
        DPB     N,HHOST
        ILDB    CH,HOSPTR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
	CAIN	CH,":"
	JRST	HOS.4
        CAIN    CH,"A"  ;ANSWERED?
        JRST    [AOS    HANS
                DPB     B,HAS
                JRST    HOS.2]
        CAIN    CH,"D"  ;DOWN?
        JRST    [AOS    HDOWN
                DPB     B,HDS
                JRST    HOS.2]
        AOS     HSHUT   ;NOT ANS OR DOWN, MUST BE SHUT
        DPB     B,HSS
HOS.2:  PJ      HOSGON
        DPB     N,HPOS  ;POSITION ON BASE
        PJ      HOSGON  ;NODE NUMBER
        DPB     N,HNODE
        MOVE    A,HOSTS ;SAVE THIS ENTRY
        MOVE    C,HOS.NO
        MOVEM   A,HOSTS+1(C)
        AOS     HOS.NO
HOS.3:  CAIN    CH,12
        JRST    HOS.1
        ILDB    CH,HOSPTR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
	CAIE	CH,":"
        JRST    HOS.3
HOS.4:  SRET

;TRANSMIT HOST COMMAND, SAVE DATA RECEIVED
HOSXMT: MOVEI   A,3
        MOVEM   A,HOSTRY        ;INIT RETRY COUNTER
HOSX3:  MOVEI   B,XSYNC
        SYNCP
        SETOM   PSUP    ;TALK TO CURRENT SUP
        MOVE    M,[POINT 7,[ASCIZ /HOST/]]
        MOVE    T1,PRBOBP
HOSX1:  ILDB    CH,M
        JUMPE   CH,HOSX2
        IDPB    CH,T1
        JRST    HOSX1
HOSX2:  MOVEI   CH,15
        IDPB    CH,T1
        SETZ    CH,
        IDPB    CH,T1
        SKIPE   ERRFLG
        JRST    CIRGON
        SETOM   REQ
        SETOM   PREQ    ;SEND THE COMMAND
        SETZ    A,      ;SLEEP TIME
HOSWAI: SKIPN   REQ
        JRST    HOSRCV  ;WAIT FOR REPLY
        SLEEP   A,
        JRST    HOSWAI
HOSRCV: SKIPE   ERRFLG
        JRST    CIRGON  ;ERROR
        HRL     A,PRBIBP
        HRRI    A,HOSBUF
        BLT     A,HBEND
	SETOM	XSUSR
        SETOM   XSYNC   ;RELEASE SEMAPHORE
        SRET
CIRGON: SETOM	XSUSR
        SETOM   XSYNC
        SKIPGE  SSLP
        JRST    SPDEAD
        MOVEI   A,5
        SLEEP   A,
        JRST    HOSX3
        OUTSTR  [ASCIZ /
Giving up - too many errors.
/]
        RET

;GET OCTAL NUMBER FROM HOST BUFFER
HOSGON: ILDB    CH,HOSPTR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
        CAIG    CH,"7"
        CAIGE   CH,"0"
        JRST    HOSGON
        SETZ    N,
HOSGO1: SUBI    CH,"0"
        IMULI   N,10
        ADD     N,CH
        ILDB    CH,HOSPTR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
        CAIL    CH,"0"
        CAILE   CH,"7"
        RET
        JRST    HOSGO1

;GET DECIMAL NUMBER FROM HOST BUFFER
HOSGDN: ILDB    CH,HOSPTR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
        CAIL    CH,"0"
        CAILE   CH,"9"
        JRST    HOSGDN
HOSGD0: SETZ    N,
HOSGD1: SUBI    CH,"0"
        IMULI   N,^D10
        ADD     N,CH
        ILDB    CH,HOSPTR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
        CAIL    CH,"0"
        CAILE   CH,"9"
        RET
        JRST    HOSGD1

;GET LIST OF HOST NAMES
GHOST:  CKINCH                  ;CK FOR INPUT CHAR
        MOVE    A,[21477,,175306] ;PPN FOR FILE
        MOVEM   A,HOSPPN
        OPEN    HOS,HOSBLK
        JRST    HOSNG
        LOOKUP  HOS,HOSNAM
        JRST    HOSNG
        INPUT   HOS,HOSIB       ;READ THE FILE
HOSNG:  RELEASE HOS             ;DONE, ALSO HERE ON ERRORS
        RET

HOSBLK: 16              ;DUMP RECORDS MODE
        SIXBIT  /DSK/
        0

HOSNAM: SIXBIT  /BISYNC/
        SIXBIT  /MAP/
        0

HOSPPN: 21477,,175306

HOSIB:  IOWD    2*HOS.SZ,HOSTAB ;INPUT COMMAND LIST
        0
        0

;SAVE UPDATED HOST NAME LIST
SVHOST: MOVE    A,[21477,,175306] ;PPN FOR THE FILE
        MOVEM   A,HOSPPN
        OPEN    HOS,HOSBLK
        JRST    HOSNG
        LOOKUP  HOS,HOSNAM
        JRST    HOSNG
        ENTER   HOS,HOSNAM      ;OPEN FOR OUTPUT, EXISTING FILE
        JRST    HOSNG
        OUTPUT  HOS,HOSIB       ;COMMAND LIST SAME AS FOR INPUT
        RELEASE HOS
        RET

;ADD NAME TO LIST OF HOSTS
HADD:   OUTSTR  [ASCIZ /Number: /]
        PJ      GETDEC          ;GET DECIMAL HOST NUMBER
        CAIG    N,HOS.SZ        ;CHECK FOR IN RANGE
        CAIGE   N,1
        JRST    CMDERR
        ADD     N,N             ;DOUBLE TO GET TABLE INDEX
        ADD     N,HOS.PT        ;ADD BYTE POINTER
        SKIPN   (N)
        AOS     HOS.NO          ;INC COUNT OF HOSTS IF THIS SLOT EMPTY
        OUTSTR  [ASCIZ /Name: /]
        MOVEI   X,^D9           ;NAME NO MORE THAN 9 CHARS LONG
HADGCH: PJ      INCHED          ;GET NEXT CHAR OF NAME
        CAIN    CH,15
        JRST    HADEND
        IDPB    CH,N
        SOJG    X,HADGCH
HADEND: SETZ    CH,             ;TERM STRING WITH NULL CHAR
        IDPB    CH,N
        PJ      SVHOST          ;SAVE UPDATED LIST
        JRST    PCM0

;DELETE HOST FROM LIST
HDEL:   OUTSTR  [ASCIZ /Number: /]
        PJ      GETDEC          ;GET HOST NUMBER
        CAIG    N,HOS.SZ        ;CHECK FOR LEGAL HOST NUMBER
        CAIGE   N,1
        JRST    CMDERR
        ADD     N,N             ;CONVERT TO TABLE INDEX
        SKIPE   HOSTAB(N)       ;DEC COUNT IF
        SOS     HOS.NO          ;THIS SLOT NOT ALREADY EMPTY
        SETZM   HOSTAB(N)       ;ZERO OUT SLOT
        AOJ     N,
        SETZM   HOSTAB(N)
        PJ      SVHOST
        JRST    PCM0
	>;NETCON
SUBTTL	"E" -- EXCEPTION DISPLAY

;	GET THE EXCEPTIONS FROM THE SUPERVISOR
EXCEPT: CKINCH                  ;CK FOR INPUT CHAR
       	AXINFO			;GO INPUT THE EXCEPTIONS
;	NODES WITHOUT BOTH-ENDS-REPORTED ARE ASSUMED DOWN
EXC2:	MOVE	A,NNDOWN	;GET NUMBER OF NODES DOWN
	JUMPE	A,EXC4		;SKIP IF NONE
	HRLZI	T1,400000	;ELSE SET FLAGS IN ALL DOWN NODES
	SETZM	C
EXC3:	IORM	T1,NODDWN+1(C)
	MOVEI	C,2(C)
	SOJG	A,EXC3
EXC4:	SETZM	A		;INDEX FOR LINE TABLE
	MOVE	BP,LBER		;BOTH-ENDS-REPORTED
	MOVE	B,NDES		;DESTINATION NODE
	JRST	EXC9		;AND SKIP TO BUMP ALL POINTERS BEFORE STARTING
EXC5:	MOVE	N,BUFFER(A)	;FIRST TEST IF ENTRY IS NULL
	JUMPE	N,EXC9		;SKIP IF SO
	MOVEM	N,BUFFER	;ELSE SAVE WORD
	LDB	N,BP		;GET FLAG
	JUMPN	N,EXC9		;SKIP IF FLAG WAS SET
        LDB     N,LOOC          ;CHECK OUT/CHAN BIT
        JUMPN   N,EXC9          ;SET..SO GET OUT OF IT
	LDB	N,B		;NOT SET...GET NODE NUMBER
	MOVE	C,NNDOWN	;SET UP COUNTER
	JUMPE	C,EXC7		;SKIP IF NONE THERE
	SETZM	D
EXC6:	CAMN	N,NODDWN(D)	;SCAN NODE-DOWN TABLE FOR MATCH
	JRST	[ANDCAM	T1,NODDWN+1(D)	;SUCCESS...REMOVE FLAG
		JRST	EXC8]		;AND SKIP
	MOVEI	D,2(D)
	SOJG	C,EXC6
EXC7:	AOS	C,NNDOWN	;NEW DOWN-NODE
	IMULI	C,2		; *2
	MOVEM	N,NODDWN-2(C)	;MAKE NEW ENTRY
	MOVE	N,TIME
	MOVEM	N,NODDWN-1(C)	;WHEN
EXC8:   LDB     N,LSHU
        SKIPE   N
        SOS     NSHUT
        SETZM	BUFFER(A)	;REMOVE LINE ENTRY
        SOS     NOUT            ;DON'T COUNT LINE AS DOWN
EXC9:	AOS	BP		;BUMP POINTERS
	AOS	B
	AOS	A
	CAMG	A,LIN.NO
	JRST	EXC5

;	NOW BRING UP NODES AGAIN
	MOVE	A,NNDOWN	;GET NUMBER OF NODES DOWN
	JUMPE	A,EXC20		;SKIP IF NONE
	SETZB	B,C		;SOURCE INDEX, DESTINATION INDEX
EXC10:	MOVE	N,NODDWN(B)
	MOVE	T1,NODDWN+1(B)
	JUMPL	T1,EXC11	;SKIP IF WE DIDN'T REMOVE FLAG
	MOVEM	N,NODDWN(C)	;ELSE REDUCE THE LIST
	MOVEM	T1,NODDWN+1(C)
	MOVEI	C,2(C)
	JRST	EXC12		;AND SKIP

;	ADD ENTRY IN <N> TO NODE-UP QUEUE
EXC11:	MOVEI	D,NU.SIZ-3	;COPY THE QUEUE TO MAKE ROOM
	MOVE	T1,NODUP(D)
	MOVEM	T1,NODUP+2(D)
	SOJGE	D,.-2
	MOVEM	N,NODUP		;PUT IN NEW ENTRY
	MOVE	T1,TIME		;ADD THE TIME
	MOVEM	T1,NODUP+1
	SOS	NNDOWN		;ONE LESS NODE DOWN NOW
EXC12:	MOVEI	B,2(B)		;DONE...DO ANOTHER
	SOJG	A,EXC10

;	ALL DONE...NOW DO DISPLAY
EXC20:	HEADER			;OUTPUT THE HEADER
	CHANGE	1,WCOL,6,NLINES,1,TAB1
	TLZ	F,FL.OUT+FL.SHU+FL.OOC	;CLEAR OUT, SHUT, AND NO-CHAN FLAGS
        JRST    BBMOD           ;GO OUTPUT NODES DOWN BEFORE LINES
BBMOD1: SKIPN   LIN.NO          ;DID WE GET ANYTHING?
	JRST	EXC27		;SKIP IF NOT

;	PROCESS ALL LINES OUT
	MOVEI	C,1
EXCO1:	MOVE	A,BUFFER(C)	;GET AN ENTRY
	JUMPE	A,EXCO2		;SKIP IF NULL
	MOVEM	A,BUFFER	;ELSE SAVE ENTRY
	LDB	N,LOUT		;TEST IF LINE OUT
	JUMPE	N,EXCO2		;SKIP IF NOT
	TLON	F,FL.OUT	;DO HEADER IF FIRST ONE
	PJ	[CAPTION (        LINES OUT)
		RET]
	LINPRN			;PRINT THE LINE
	SETZM	BUFFER(C)	;CLEAR OUT THE ENTRY
EXCO2:	AOS	C		;DO FOR ALL ENTRIES
	CAMG	C,LIN.NO
	JRST	EXCO1
BBMOD2: JRST    EUP             ;GO DO NODES REPORTING AGAIN (BB)

;	NOW DO LINES SHUT
BBMOD4: MOVEI   C,1             ;BB MODIFICATION
EXCS1:	MOVE	A,BUFFER(C)
	JUMPE	A,EXCS2		;IGNOR NULL ENTRIES
	MOVEM	A,BUFFER	;ELSE SAVE ENTRY
	LDB	N,LOOC		;TEST IF OUT OF CHANNELS
	JUMPN	N,EXCS2		;SKIP IF SO...ALTERNATE REPORT
	LDB	N,LSHU		;TEST IF LINE SHUT
	JUMPE	N,EXCS2		;SKIP IF NOT
	TLON	F,FL.SHU	;DO HEADER IF NECESSARY
	PJ	[CAPTION (        LINES SHUT)
		RET]
	LINPRN			;OUTPUT LINE
	SETZM	BUFFER(C)	;CLEAR ENTRY
EXCS2:	AOS	C		;DO ALL
	CAMG	C,LIN.NO
	JRST	EXCS1

;NOW REPORT LINES OUT, SHUT IF NONE
EXC27:	TLNN	F,FL.OUT
	PJ	[CAPTION ( -NO LINES OUT-)
		RET]
	TLNN	F,FL.SHU
	PJ	[CAPTION ( -NO LINES SHUT-)
		RET]
        JRST    EXC29     ;FINALLY,GO DO OUT OF CHAN. (BB)
;	NOW REPORT NODES DOWN
BBMOD:  MOVE    D,NNDOWN        ;BB MODIFICATION
	JUMPE	D,HOSDIS                ;SKIP IF NOT TO BISYNC HOSTS SHUT
	CAPTION	(  NODES NOT REPORTING)
	SETZM	J		;INITIALIZE INDEX
EXC28:	MOVE	N,NODDWN(J)	;OUTPUT TABLE
	NODPRN
	TAB
	MOVE	A,NODDWN+1(J)
	TCKTIM			;FLAG IT WITH TIME FIRST WENT DOWN
	CRLF
	ADDI	J,2		;BUMP INDEX
	SOJG	D,EXC28		;DO FOR ALL ENTRIES
BIHDWN: JRST    HOSDIS          ;GO DO BISYNC HOSTS SHUT

;	NOW DO LINES OUT OF CHANNELS
EXC29:  MOVEI   C,1             ;OK..OUT/CHAN W/ NO NODES DOWN
EXCOC1:	MOVE	A,BUFFER(C)
	JUMPE	A,EXCOC2	;IGNOR NULL ENTRIES
	MOVEM	A,BUFFER	;ELSE SAVE ENTRY
	LDB	N,LOOC		;TEST IF OUT OF CHANNELS SET
	JUMPE	N,EXCOC2	;SKIP IF NOT
	TLON	F,FL.OOC	;DO HEADER IF NECESSARY
	PJ	[CAPTION (  NO CHANNELS)
		RET]
	LINPRN			;OUTPUT LINE
	SETZM	BUFFER(C)	;CLEAR ENTRY
EXCOC2:	AOS	C		;DO ALL
	CAMG	C,LIN.NO
	JRST	EXCOC1
BBMOD6: JRST    FINIS           ;DONE!  (BB)
;	CHECK FOR NODES-UP, PRINT IF THERE
EUP:	SKIPN	NODUP		;ANY IN LIST?
BBMOD3: JRST    BBMOD4          ;GO DO LINES SHUT (BB)
	CAPTION	(  NODES REPORTING AGAIN)
	SETZM	D		;NOW PRINT ALL NODES
	MOVE	N,NODUP		;GET FIRST ENTRY
EUP1:	NODPRN
	TAB
	MOVE	A,NODUP+1(D)	;OUTPUT TIME
	TCKTIM
	CRLF
	ADDI	D,2		;BUMP INDEX
	MOVE	N,NODUP(D)	;GET NEXT ENTRY
	CAIGE	D,NU.SIZ	;DO FOR ALL ENTRIES
	JUMPN	N,EUP1		;...UNLESS NEXT ENTRY IS NULL
BBMOD5: JRST    BBMOD4          ;GO DO LINES SHUT (BB)
SUBTTL "L" - LOGGER
LOGLOG: XCT     OERASE  ;CLEAR SCREEN
LOG0:   RESET
        MOVE    P,PDP
        PJ      INIT1
        OUTSTR  [ASCIZ /
Type escape to return to Probe.
/]
        MOVE    A,[2,,INTVEC]
        INTADR  A,
        JRST    LERR            ;SET UP INTERRUPT TO GET OUT OF THIS
        MOVE    A,[1002,,-1]
        TINASS  A,
        JRST    LERR
        MOVE    A,[4,,1]
        INTASS  A,
        JRST    LERR
        MOVE    A,[1,,1]
        SETTIM  A,
        JRST    LERR
        CLRBFI
        HRLZI   A,700000
        INTENB  A,
        JRST    LERR
        OUTSTR  [ASCIZ /
Building circuit to logger.
/]
LOGINT: MOVEI   X,NLOGR
LOGLP:  SOJL    X,LERR          ;BOMB IF WE CAN'T GET ANY OF THEM
        MOVE    AX,LOGSTR(X)
        CREAUX  AX,
        JRST    LOGLP
        HRL     AX,AX
        HRRI    AX,51
        AUXCAL  AX,15   ;SEND CR (PROJECT CODE)
	HLLZ	B,AX		;PORT # TO B
	LSH	B,11		;MOVE IT OVER
	IOR	B,[141,,10]	;MAKE HIBER ARG
	HIBER	B,		;WAIT FOR CIRCUIT TO CLEAR
	JRST	LOGFAI
	HRRI	AX,6		;CLEAR INPUT BUFFER IN CASE ANY EXTRANEOUS GARBAGE
	AUXCAL	AX,
        HRRI    AX,52
        AUXCAL  AX,[ASCIZ /GO NCSLOG/]
        HRRI    AX,51
	AUXCAL	AX,15
	MOVEI	A,"@"		;SCAN FOR LOG HERALD
	PJ	SCAN
	HRRI	AX,0
	AUXCAL	AX,CH		;GET '#' OR '?' (CONSOLIDATOR STATE)
	JRST	LOGFAI
	ANDI	CH,177
        CAIE    CH,"#"
        JRST    LOGFAI
;SEND NODE NUMBERS
	MOVEI	D,2*NN.SIZ
LOGNN:	SOJ	D,
	SOJLE	D,LOGNND	;DONE? (ENTRY 0 IS SPECIAL, DON'T SEND)
	SKIPN	N,NNTBL(D)	;THIS ENTRY VALID?
	JRST	LOGNN		;THIS SLOT EMPTY, DO NEXT
	TRNE	N,1		;MUST BE UNRESTRICTED
	JRST	LOGNN
	MOVE	N,D		;NODE IS OK, CONVERT TO NODE NUMBER AND SEND
        LSH     N,-1
        JFCL
        JFCL
	PJ	LOGONO		;SEND NUMBER
        AUXCAL  AX,15           ;D.SCHMIDT -9/20/79 SEND .CR TO TERMINATE
                                ;EACH NODE NUMBER, CHANGE TO REFLECT IMMEDIATE
                                ;AUXCAL SET IN CALL  TO LOGONO ABOVE
	JRST	LOGNN
LOGNND:	HRRI	AX,51		;ZERO TERMINATES LIST
	AUXCAL	AX,"0"
	AUXCAL	AX,15
        HLLZ    AX,AX   ;GET "*" (OK) OR "?" (NO CONSOLIDATOR, ETC.)
GETOK:  AUXCAL  AX,CH
        JRST    LOGFAI
        ANDI    CH,177
        CAIE    CH,"*"
	JRST	LOGFAI
LOGLUP: AUXCAL  AX,CH
        JRST    LOGZAP  ;LOST CIRCUIT
        OUTCHR  CH      ;LOOPLOOPLOOPLOOP...
        JRST    LOGLUP
LOGZAP: HRROI   AX,-1
        ZAPCIR  AX,
        OUTSTR  [ASCIZ /
Circuit to logger lost - rebuilding.
/]
        JRST    LOGINT

LOGFAI: HRROI   AX,-1   ;KILL OFF CIRCUIT
        ZAPCIR  AX,
        JRST    LOGLP   ;TRY THE NEXT ONE IN THE LIST

LOGINC:	INCHRS	A
	DISMIS
	CAIE	A,33		;WAS IT AN ESCAPE?
	DISMIS			;NO, IGNORE
LOGEX:  HRLZI   A,4
        INTADR  A,
        SKIP
        HRROI   A,-1
        ZAPCIR  A,      ;KILL OFF LOGGER
        JRST    PROBE

LERR:   OUTSTR  [ASCIZ /
Can't get logger - try again later.
/]
        JRST    LOGEX

;BEEP IF MESSAGE OR LINK WAITING
MSGBEL: PUSH    P,X
	MOVEI	X,1		;MAKE SURE COMMAND PORT IS STILL THERE
	HIBER	X,
	JRST	ZAPPED		;WE'VE BEEN HUNG UP ON
        SKIPG   RUNFLG          ;PRBCOM STILL ALIVE?
        JRST    PRBDED          ;NO
        MOVE    X,ISLOT
	SKIPN	LOGTAB(X)
	JRST	LOGEX
        SKIPL   LINKED(X)
        OUTCHI  7
	SETZM	CHKTAB(X)
        MOVE    X,[1,,1]
        SETTIM  X,
        SKIP
        POP     P,X
        DISMIS

;SCAN FOR CHAR IN A
SCAN:	HLLZ   AX,AX
SCOL1:  AUXCAL  AX,CH
        JRST    LOGFAI
        ANDI    CH,177
        CAME    CH,A
        JRST    SCOL1
        RET

;OUTPUT OCTAL NUMBER TO AUX CIRCUIT
LOGONO:	HRRI	AX,4
LOGON0:	IDIVI	N,10
	HRLM	N1,(P)
	SKIPE	N
	PUSHJ	P,LOGON0
	HLRZ	CH,(P)
	AUXCAL	AX,"0"(CH)	;SEND NEXT DIGIT
	POPJ	P,
SUBTTL SUBROUTINES FOR CHAR AND PAGE HANDLING


;STUFF ONE CHAR INTO OUTPUT BUFFER, DUMP IF FULL
SUBR    COUT
        IDPB    CH,OBP          ;STUFF CHAR
        SOSG    OBCOUN          ;ROOM LEFT IN BUFFER?
        DUMP                    ;NO
        RET

;DUMP OUTPUT BUFFER TO SCREEN
SUBR    DUMP
        MOVEI   N,^D400         ;400 IS MAX NUMBER OF CHARS IN BUFFER
        SUBB    N,OBCOUN
        JUMPLE  N,DMPDUN        ;MUST BE AT LEAST ONE CHAR
        MOVE    N,[-1,,34]      ;INIT BLOCK I/O MODE
        AUXCAL  N,
        JRST    IOERR
        HRRI    N,37            ;DO IT
        AUXCAL  N,OBUF
        PJ      IOERR
        HRRI    N,42            ;TERMINATE BLOCK I/O MODE
        AUXCAL  N,
DMPDUN: MOVEI   N,^D400
        MOVEM   N,OBCOUN        ;RESET COUNT
        MOVE    OBP,OBFIP       ;RESET POINTER
        RET
IOERR:  OUTSTR  [ASCIZ "
Error in block I/O.
"]
        EXIT    1,


;	SET UP HEADER
SUBR	HEADER
        CKINCH                  ;CK FOR INPUT CHAR
        MOVEI   CH,BELL          ;GET A BELL FOR BAILEY..SO HE KNOWS ITS RUNNING
        OUTCHR  CH              ;RING HIS BELL...HEE HEE HEE
	SET	1,WIDTH-1,1,5,0,TAB4	;SET UP WINDOW ON SCREEN
        MOVEI   M,[ASCIZ / TMS SYS# /]
        MOVE    N,SYSNO         ;PDP10 MACHINE NO.
        CAIN    N,^O40
        JRST    SYS38
        JRST    NOT38
SYS38:  MOVEI   M,[ASCIZ/ TMS SYS# 38 /]
        MSG
        JRST    .+3
NOT38:  MSG
        OCTPRN
	MOVEI	M,[ASCIZ / SUPERVISOR /]
        MOVE    N,SUPNUM        ;SUPERVISOR NUMBER
        MSG
        OCTPRN
	MOVEI	M,[ASCIZ /  DF: /]
	MSG
	MOVE	N,SUPDF		;DROUSINESS FACTOR
	OCTPRN
	MOVEI	M,[ASCIZ /  GOT: /]
	MOVE	N,SUPSTA	;GOT N
	MSGDEC
	MOVEI	A,1		;DO REST OF STATES
HEAD1:	SPACE
	MOVE	N,SUPSTA(A)
	DECPRN
	AOJ	A,
	CAIGE	A,7
	JRST	HEAD1
	MOVEI	M,[ASCIZ ! / !]
	MOVE	N,NNODES
	MSGDEC
	CRLF			;GO TO NEW LINE
	PDATIM			;DATE AND TIME
	MOVEI	M,[ASCIZ / Z/]
	MSG
	MOVE	N,NLOGIN
	JUMPE	N,HEAD2		;SKIP IF NONE
	SKIPLE	REJOK		;SKIP IF BOTH NODES NON-OK
	JRST	HEAD2
	MOVEI	M,[ASCIZ /  REJECTED: /]
	MSGDEC
	SPACE
	MOVE	N,FLOGIN	;FROM
	NODPRN
	MOVEI	M,[ASCIZ /---/]
	MSG
	MOVE	N,TLOGIN	;TO
	NODPRN
HEAD2:	CRLF			;GO TO NEW LINE
	MOVEI	M,[ASCIZ /LINES:  SHUT=/]
	MOVE	N,NSHUT
        LSH     N,-1    ;DIV BY 2 TO GET RIGHT NUMBER
	MSGDEC
	MOVEI	M,[ASCIZ /  OUT=/]
	MOVE	N,NOUT
        LSH     N,-1            ;DIV BY 2 TO GET RIGHT NUMBER
	MSGDEC
	MOVE	N,NOOC		;GET NUMBER OF OUT OF CHANNEL LINES
	JUMPE	N,DSKCK		;SKIP IF NONE
        LSH     N,-1            ;CONVERT # NODES TO # LINES (DIV BY 2)
	MOVEI	M,[ASCIZ /  NO CHAN=/]
	MSGDEC
;       SEE IF DISK ERROR HAS OCCURRED.
DSKCK:  MOVE    M,DSKERR
        CAIN    M,0
        JRST    HEAD3
        MOVEI   M,[ASCIZ/ ***********DISK ERROR /]
        MSG
        MOVEI   M,DSKMSG
        MSG
        MOVEI   M,DSKMS1
        MSG
HEAD3:	MOVEI	M,[ASCIZ /
USERS:: /]
	MOVE	N,TERM
        LSH     N,-1    ;DIVIDE BY 2 FOR NO. OF USERS
        MOVEM   N,TERM
	MSGDEC
        MOVEI   N1,0
        JSA     16,ANS
        ARG     N1,PASS
        ARG     N1,TERM
BBFLG1: MOVEI   M,[ASCIZ /  ALU= /]
        MOVE    N,PASS
        MSGDEC
        MOVE    N,TERM
        CAIL    N,^D10
        JRST    .+5
        MOVEI   M,[ASCIZ /.0/ ]
        MSG
        DECPRN
        JRST    .+3
        MOVEI   M,[ASCIZ /./ ]
        MSGDEC
	MOVEI	M,[ASCIZ /  NODES OUT: /]
	MOVE	N,NNDOWN
	MSGDEC
	MOVE	N,NOD.NO	;GET NUMBER OF NODES IN LIST
	MOVEI	M,[ASCIZ /   NODE LIST: /]
	MSGDEC
	JRST	CRLF		;BLANK OUT REST OF WINDOW



;	H E A D I N G
;	OUTPUT THE HEADING SPECIFIED IN <M>
SUBR	HEADING
	LDB	CH,PTOP		;TEST IF WE'RE AT THE TOP
	CAMN	CH,LINE
	JRST	HEADG2		;SKIP IF SO
	SKIPGE	CH,LINE		;CHECK IF AT END OF PAGE
	RET			;RETURN IF SO
	ADDI	CH,3		;IS THERE ROOM THIS CLOSE TO THE BOTTOM?
	CAMG	CH,BOTTOM
	JRST	HEADG1		;SKIP IF SO
	CRLF			;NO...BLANK OUT REST OF SCREEN
	JRST	HEADING
HEADG1: CRLF            ;ROOM IN THIS COLUMN...LEAVE BLANK LINE
HEADG2:	MOVE	M,N
	MSG			;NOW OUTPUT THE TITLE AND GO TO NEXT LINE

;	C R L F
;	OUTPUT CARRIAGE-RETURN/LINE-FEED
SUBR	CRLF
	MOVEI	M,[ASCIZ /
/]
SUBR	MSG
	HRLI	M,440700
MSG1:	ILDB	CH,M
	JUMPE	CH,[RET ]
	TYO
	JRST	MSG1

;	OUTPUT MESSAGE WHICH MAY TERMINATE IN BLANKS
SUBR	MSGB
	HRLI	M,440700
MSGB1:	ILDB	CH,M
	JUMPE	CH,[RET]	;QUIT IF NULL
	CAIN	CH," "		;TEST FOR BLANK
	RET			;RETURN IF SO
	TYO
	JRST	MSGB1

SUBR	COLON
	MOVEI	CH,":"
	JRST	TYO

SUBR	MSGDEC
	MSG
	JRST	DECPRN

SUBR	TAB
	SKIPA	CH,[11]
SUBR	SPACE
	MOVEI	CH," "

;	OUTPUT A CHAR IN <CH>
;	SPECIAL CHARS:
;	C/R	CLEAR REMAINDER OF LINE, RESET TO BEGINNING
;	L/F
;	TAB
SUBR	TYO
	TLNN	F,FL.SUP
	SKIPGE	LINE		;DO NOTHING IF OUT OF ROOM
	RET
	ANDI	CH,177
	CAIN	CH,15
	JRST	TYCR		;SIMULATE CAR. RET.
	CAIN	CH,12
	JRST	TYLF		;SIMULATE LINE FEED
	SKIPGE	COL		;IGNORE LINE TOO WIDE
	RET
	CAIN	CH,11
	JRST	TYTAB		;SIMULATE TAB
	PJ	GETCH
	CAME	CH,T2
	TRO	CH,200		;NOT THE SAME AS LAST TIME
	DPB	CH,T1
	AOS	T1,COL		;INCREMENT COLUMN COUNT
	CAMLE	T1,RTEND
	SETOM	COL		;LINE TOO WIDE
	RET

;	BLANK THE REMAINDER OF THE LINE
TYCR:	SPACE			;CLEAR REMAINDER OF LINE
	SKIPL	COL
	JRST	TYCR
	MOVE	T1,LTEND	;MOVE TO LEFT EDGE OF WINDOW
	MOVEM	T1,COL
	MOVE	T1,LTTEND
	MOVEM	T1,TABCTR
	RET

GETCH:	MOVE	T1,LINE
	IMULI	T1,WIDTH
	ADD	T1,COL		;CALC. CHAR POSITION IN BUF
	IDIVI	T1,4
	ADD	T1,BPTAB(T2)	;MAKE BYTE POINTER TO CHAR
	LDB	T2,T1		;GET THE CHAR
	RET			;RETURN

TYLF:	AOS	T1,LINE		;INCREMENT LINE COUNT
	CAMG	T1,BOTTOM
	RET			;SPACE LEFT
	LDB	T2,PCONT
	JUMPN	T2,TYLF2	;CONTINUATION COLUMN?
TYLF1:	SETOM	LINE		;NO ROOM LEFT
	RET
TYLF2:	ADD	T2,LTEND	;ADD SPACE BETWEEN COLUMNS
	LDB	T1,PWIDTH	;MOVE OVER A FULL COLUMN WIDTH
	ADD	T2,T1
	MOVEM	T2,COL
	EXCH	T2,LTEND
	ADD	T1,LTEND
	CAILE	T1,WIDTH
	JRST	TYLF1		;COLUMN WON'T FIT
	MOVEM	T1,RTEND
	AOS	T1,TABCTR
	MOVEM	T1,LTTEND
	MOVE	T1,TAB0(T1)
	CAMG	T1,LTEND
	JRST	.-4
	LDB	T1,PTOP		;GO TO TOP OF NEW COLUMN
	MOVEM	T1,LINE
	RET

TYTAB:	MOVE	T2,COL
	AOS	T2
	MOVE	T1,TABCTR	;GET NEXT TAB POSITION
	AOS	TABCTR		;UPDATE TAB COUNTER
	SUB	T2,TAB0(T1)	;CALCULATE # OF SPACES NEEDED
	PUSH	P,T2
TYTAB1:	SPACE			;OUTPUT SPACES
	AOSGE	(P)
	JRST	TYTAB1
	POP	P,T1
	RET

;SUBROUTINES TO CLEAR SCREEN, FOR EACH TERMINAL TYPE
OEADM1: OUTCHI  33
        OUTCHI  "Y"
        RET
CEADM3: MOVEI   CH,ERASE
        COUT
        RET
CEADM1: MOVEI   CH,33
        COUT
        MOVEI   CH,"Y"
        COUT
        RET
PLTEND:	POINT	7,WINDOW,6
PWIDTH:	POINT	7,WINDOW,13
PTOP:	POINT	5,WINDOW,18
PBOTTO:	POINT	5,WINDOW,23
PCONT:	POINT	2,WINDOW,25
PTABST:	POINT	10,WINDOW,35


SETUP:	MOVE	T1,@(P)		;PICK UP INFO WORD
	MOVEM	T1,WINDOW
	LDB	T1,PLTEND	;UNPACK NECESSARY DATA
	MOVEM	T1,LTEND
	MOVEM	T1,COL
	LDB	T2,PWIDTH
	ADD	T1,T2
	MOVEM	T1,RTEND
	LDB	T1,PTOP
	MOVEM	T1,LINE
	LDB	T1,PBOTTO
	MOVEM	T1,BOTTOM
	LDB	T1,PTABST
	MOVEM	T1,LTTEND
	MOVEM	T1,TABCTR
	SRET			;SKIP OVER INFO WORD
SUBR	HOME
	MOVEI	CH,HOMEUP

SUBR	DPYOUT
        OUTCHR  CH
	RET


;	SUBROUTINE TO PRINT THE DATE AND TIME
SUBR	PDATIM
	DATE	A,		;GET THE DATE
	MOVEM	A,DATE
	TIMER	A,		;GET THE TIME
	MOVEM	A,TIME
	MOVEI	A,DATE
	DATUUO	A,		;CONVERT TO GMT
	SKIP			;IGNOR ERROR RETURN
	MOVE	A,DATE		;GET BACK THE DATE
	IDIVI	A,^D31
	MOVE	D,B		;SAVE THE DAY OF MONTH
	MOVEI	N,1(B)
	PJ	DECPR2
	IDIVI	A,^D12
	ADD	D,DAYTAB(B)	;BUILD DAY OF YEAR
	MOVE	B,MONTAB(B)
	MOVEI	C,0		;SET STRING TERMINATOR FON ASCIZ MONTH
	MOVEI	M,B
	MOVEI	N,^D64(A)
	MSGDEC			;PRINT MESSAGE FOLLOWED BY DECIMAL NO.
	MOVE	N,D		;COMPUTE THE DAY
	MOVEI	M,[ASCIZ /  DAY: /] 
	MSGDEC
	SPACE
	SPACE
	MOVE	A,TIME		;GET THE TIME.

;	SUBROUTINE TO PRINT THE TIME
SUBR	TCKTIM
	IDIV	A,TCKSEC	;JUNK JIFFIES
	IDIVI	A,^D60*^D60
	MOVE	N,A
	PJ	DECPR2
	COLON
	IDIVI	B,^D60
	MOVE	N,B
DECPR2:	MOVEI	CH,"0"
	CAIG	N,11
	TYO
;	PRINT (A) AS A DECIMAL NUMBER
SUBR	DECPRN
	SKIPA	R,[12]

;	PRINT OCTAL
SUBR	OCTPRN
	MOVEI	R,10		;SET RADIX 10

;	USES <R> FOR RADIX TO CONVERT NUMBER IN <N>
	JUMPGE	N,RADIX1	;TEST IF TO OUTPUT SIGN
	MOVEI	CH,"-"		;YES
	TYO
	MOVMS	N
RADIX1:	IDIVI	N,(R)
	HRLM	N1,0(P)
	SKIPE	N
	PJ	RADIX1
	HLRZ	CH,0(P)		;NOW OUTPUT THE DIGITS
	ADDI	CH,60
	JRST	TYO
SUBTTL CODE TO GET NODE-NAME LIST

SUBR	GETNN
        CKINCH                  ;CK FOR INPUT CHAR
	OPEN	NAM,NAMBLK	;OPEN THE NAME FILE
	JRST	GNNG		;SKIP IF FAILED
	PJ	INITB		;INIT LOOKUP/ENTER INFO
	LOOKUP	NAM,NAMNAM	;CHECK IT
	JRST	GNNG		;ABORT IF NON-EXISTANT
	UGETF	NAM,A		;HOW BIG IS FILE?
	HRRZ	A,A
	JUMPE	A,GNNG		;EMPTY...ABORT
	INPUT	NAM,NAMIB	;OK...GET THE FILE
	SKIP
        RELEASE NAM
        HRLZI   X,-2*NN.SIZ+2   ;COUNT ACTIVE NODES IN LIST
        SETZ    A,
        SKIPE   NNTBL+2(X)
        AOJ     A,
        AOBJP   X,
        AOBJN   X,.-3
        MOVEM   A,NOD.NO
        SRET                    ;SKIP RETURN IF SUCCESSFUL
GNNG:	RELEASE NAM             ;ALL DONE...CLOSE THE FILE
	RET			;AND RETURN

NAMIB:	IOWD	2*NN.SIZ,NNTBL  ;INPUT BLOCK
	IOWD	2*NCMD,CMDVAL
	0
	0

;INIT LOOKUP/ENTER INFO FOR NODE FILE
INITB:	MOVE	A,USRNAM
	MOVEM	A,NAMNAM
	MOVE	A,[SIXBIT /MAP/]
	MOVEM	A,NAMNAM+1
	IFN	DEBUG,<MOVE	A,[21477,,175306]>
	IFE	DEBUG,<MOVE	A,[21477,,175306]>
	MOVEM	A,NAMPPN
	RET

;CHECK FOR LEGAL NODE, INCREMENT RSTRCT IF RESTRICTED NODE
SUBR    CHKNOD
        CAIL    N,2500  ;CHECK RANGE
        RET
        SKIPG   N       ;MUST ALSO BE >0
        RET
        MOVE    J,N    ;SAVE NUMBER
        JFCL
        JFCL
        LSH     J,1
        SKIPN   J,NNTBL(J) ;IS NODE IN TABLE?
        RET             ;NO
        TRNE    J,1     ;RESTRICTED?
        AOS     RSTRCT  ;YES
        SRET            ;SKIP RETURN - SUCCESS

SUBR	LINPRN
	LDB	N,NSOR		;OUTPUT SOURCE NODE
	NODPRN
	COLON
	LDB	N,LSOR		;OUTPUT SOURCE LINE NO
	DECPRN
	MOVEI	M,[ASCIZ /---/]	;EXPECT LINE OUT
	LDB	N,LSHU
	SKIPE	N		;SKIP IF TRUE
	MOVEI	M,[ASCIZ /-S-/]	;ELSE SET SHUT FLAG
	MSG
	LDB	N,NDES		;OUTPUT DESTINATION NODE
	NODPRN
	LDB	N,LBER		;WERE BOTH ENDS REPORTED?
	JUMPE	N,CRLF		;ABORT IF NOT
	COLON
	LDB	N,LDES		;OUTPUT DESTINATION LINE
	DECPRN
	JRST	CRLF		;AND FINISH OFF LINE


;	PRINT THE NODE NAME AND NUMBER, NUMBER IN <N>
SUBR	NODPRN
	MOVE	CH,N		;COPY NODE NUMBER
        JFCL
        JFCL
	CAIL	CH,NN.SIZ	;TEST RANGE
	JRST	NDPRN1		;ABORT IF OUT OF RANGE
        IMULI   CH,2            ;CONVERT TO TABLE INDEX
	MOVEI	M,NNTBL(CH)	;AND MAKE POINTER
	SKIPN	NNTBL(CH)	;SKIP IF NAME IS NOT NULL
NDPRN1:	MOVEI	M,[ASCIZ /???/]	;NO MATCH...SET DEFAULT NAME
	MSGB
	MOVEI	CH,"("
	TYO
	OCTPRN			;PRINT "(NUMBER)"
	MOVEI	CH,")"
	JRST	TYO

;PRINT HOST NAME AND NUMBER, NUMBER IN N
HOSPRN: CAIL    N,HOS.SZ
        JRST    HSPRN1
        MOVEM   N,BI.TMP                ;STORE N FOR LATER
        MOVE    CH,N
        LSH     CH,1
        MOVEI   M,HOSTAB(CH)
        MOVEM   M,BI.T1               ;STORE M
        MOVEM   CH,BI.T2              ;STORE CH
        SKIPN   HOSTAB(CH)
        RET
        MOVE    N1,BI.FLAG
        SKIPN   N1
        PJ      [CAPTION (  BISYNC HOSTS SHUT)
                RET]
        MOVE    N,BI.TMP                ;RESTORE N TO ORIG. STATE
        MOVE    M,BI.T1               ;RESTORE M
        MOVE    CH,BI.T2              ;RESTORE CH
        MOVEI   N1,1
        MOVEM   N1,BI.FLAG
        MOVEI   CH,"("
        TYO
        DECPRN
        MOVEI   CH,")"
        TYO
        MOVEI   CH," "
        TYO
        MSGB
        MOVEI   CH," "
        TYO
        LDB     N,HNODE
        MOVEI   CH," ("
        TYO
        OCTPRN
        MOVEI   CH,")"
        TYO
        MOVEI   CH," "
        TYO
        LDB     N,HPOS
        OCTPRN
        CRLF
HSPRN1: RET
SUBTTL AUXILIARY CIRCUIT CODE

;GET PROBE COMMUNICATOR
SUBR    GETPRB
        CKINCH                  ;CK FOR INPUT CHAR
        MOVEI   A,[SIXBIT /DSK/
                SIXBIT /PRBCOM/
                SIXBIT /SWR/
                0,,0
        IFE     DEBUG,<21477,,175306>
        IFN     DEBUG,<21477,,175306>
                0,,0]
        GETSEG  A,      ;GET SHARABLE PROG AND DATA
        PJ      GETPER
        SETZ    A,      ;MAKE IT WRITABLE
        SETUWP  A,
        PJ      GETPER
;CHECK TO SEE IF IT'S RUNNING
        MOVE    A,RUNFLG
        CAIN    A,1
        JRST    CHKSWR
SYSLOG: MOVEI   A,LOGIST                ;MAKE AUX CIRCUIT
        CREAUX  A,
        PJ      AUXERR
        HRL     A,A
        HRRI    A,52    ;(OUTPUT STRING)
        AUXCAL  A,[ASCIZ /
RUN PRBCOM
/]
        LSH     A,11    ;MOVE PORT NUMBER OVER
        AND     A,[777000,,0] ;MASK OFF ANY GARBAGE
        IOR     A,[141,,^D10] ;WAIT FOR OUTPUT TO FINISH
        HIBER   A,
        PJ      GETPER
        SETO    A,
        ZAPCIR  A,
;CHECK TO SEE IF IT'S RUNNING
        MOVEI   A,^D10
        SLEEP   A,      ;GIVE IT TIME TO GET STARTED
        SKIPLE  RUNFLG
        RET
        PJ      SUPLER          ;OUTPUT SUPERVISOR LOGIN ERROR FROM PRBCOM

;CHECK TO SEE IF ITS **REALLY** RUNNING
CHKSWR: MOVE    A,NEWCNT
        MOVEM   A,OLDCNT
        MOVEI   A,5
        SLEEP   A,
        MOVE    A,OLDCNT
        CAME    A,NEWCNT
        RET
        JRST    SYSLOG


;       D. SCHMIDT - 7/2/79 - AUXERR AND SUPLER ADDED - CALLS @ SYSLOG+2
;                               AND CHKSWR-1

AUXERR: OUTSTR  [ASCIZ  /
UNABLE TO BUILD AUXILARY CIRCUIT TO SELF - CAN'T RUN PRBCOM - ABORTING
/]
        EXIT    1,

SUPLER: OUTSTR  [ASCIZ  /
PRBCOM WAS UNABLE TO LOG INTO ACTIVE SUPERVISOR - ABORTING
/]
        EXIT    1,

GETPER: OUTSTR  [ASCIZ /
Can't get Probe communicator.
/]
        EXIT 1,

;LOGIN TO PRBCOM
SUBR    LOG
BBFLAG:	MOVE	A,[2,,INTLOG]
	INTADR	A,
	JFCL
	SETZ	A,
	SETTIM	A,
	JFCL
	MOVE	A,[4,,1]	;SET TWO MINUTE TIMEOUT
	INTASS	A,
	JFCL
        MOVE    A,[1,,30]
	SETTIM	A,
	JFCL
	MOVSI	A,(1B0+1B1)
	INTENB	A,
	JFCL
        MOVEI   B,SYNC  ;GET POINTER TO SEMAPHORE
        SYNCL           ;SYNCHRONIZE WITH OTHER USERS
        SETOM   LOGFLG
	SETZ	A,
TLOG:   SKIPN   LOGFLG
        JRST    LOGOK
        SLEEP   A,
        JRST    TLOG
LOGOK:  MOVE    A,SLOT  ;GET OUR SLOT INDEX
        JUMPL   A,LOGBAD        ;IF INDEX <0, FAILURE
        MOVEM   A,ISLOT ;SAVE IT
        MOVE    B,USRNAM
        MOVEM   B,NAMTAB(A)     ;SAVE OUR NAME FOR SPYING, ETC
	SETOM	SYNUSR
        SETOM   SYNC    ;RELEASE SEMAPHORE
        RET
LOGBAD: XCT     OERASE  ;CLEAR SCREEN
        OUTSTR  [ASCIZ  /NOT ENOUGH SLOTS - UNABLE TO MULTIPLEX - ABORTING
/]
	SETOM	SYNUSR
        SETOM   SYNC
        EXIT    1,

;       D. SCHMIDT - 7/2/79 - ADDED TO DISTINGUISH BETWEEN TIMER INTERUPT
;                               AND THE MSG FOR TOO MANY SLOTS ALREADY TAKEN

LGTOUT: OUTSTR  [ASCIZ  /UNABLE TO MULTIPLEX DUE TO TIMER INTERUPT
/]
        SETOM   SYNUSR
        SETOM   SYNC
        EXIT    1,





;WAIT AND SET SEMAPHORE
SUBR    SYNCP
        SETZ    A,              ;INIT SLEEP TIME
        MOVE    X,ISLOT         ;GET INDEX INTO PRBCOM'S USER TABLES
TSYNCP: AOSN    SYNCTB(X)         ;TRY
        RET                     ;GOT IT - RETURN
        SETOM   SYNCTB(X)
        SKIPG   RUNFLG  ;PRBCOM STILL THERE?
        JRST    PRBDED  ;NO
        SLEEP   A,
        JRST    TSYNCP          ;TRY AGAIN


;WAIT AND SET SEMAPHORE FOR LOGIN
SUBR    SYNCL
        SETZ    A,      ;INIT SLEEP TIME
TSYNCL: AOSN    0(B)    ;SEMAPHORE IS CLEAR IF=-1
	JRST	TSYNC9		;WE'VE GOT IT
        SOS     0(B)    ;RESET SO WE DON'T TIE UP EVERYBODY ELSE
        SKIPG   RUNFLG  ;PRBCOM STILL THERE?
        JRST    PRBDED  ;NO
        SLEEP   A,
        JRST    TSYNCL   ;TRY AGAIN
TSYNC9:	MOVE	A,ISLOT
	MOVEM	A,1(B)		;SET UP SYNUSR OR XSUSR
	RET


;GET NEW SCREENFUL OF STUFF FROM PROBE
SUBR    AXINFO
        CKINCH                  ;CK FOR INPUT CHAR
        SYNCP
        SKIPE   DPYERR          ;ERROR IN INPUT?
        JRST    NOCIRC          ;CIRCUIT LOST
        MOVE    X,ISLOT
        SETOM   SYNCTB(X)
        MOVE    A,PBUFP
        MOVEM   A,PRBP          ;INIT STRING POINTER
;       ***********************
        SKIPN   SENDNG
        JRST    AXINF2
        MOVEI   A,1
        SLEEP   A,0
        JRST    .-4
AXINF2:
        AXSTAT
        AXVER
        AXCOUN
        AXEXC
        RET
NOCIRC: MOVE    X,ISLOT
        SETOM   SYNCTB(X)       ;RELEASE SEMAPHORE
        SKIPGE  SSLP
        JRST    SPDEAD
        SOSE    TRY             ;RETRY 3 TIMES
        JRST    RETRY
        XCT     OERASE  ;CLEAR SCREEN
        OUTSTR  [ASCIZ /
Circuit to Probe lost, please wait.
/]
        HRRZI   A,5
        SLEEP   A,
        JRST    RESTRT
RETRY:  MOVE    P,PDP
        MOVEI   A,4             ;GIVE PRBCOM TIME TO RECOVER
        SLEEP   A,
        JRST    @PROGRM         ;GO TRY AGAIN

;CHECK FOR INPUT CHAR.IF SO, GO PROCESS.
SUBR    CKINCH
        MOVEM   C,SAVC
        INCHRS  C
        JRST    .+2
        JRST    FINX            ;CHAR PRESENT,GO HANDLE IT
        MOVE    C,SAVC
        RET


;THIS ROUTINE CHECKS TO SEE IF PRBCOM IS UPDATING NEWCNT.
;IF NOT IN FIVE SECONDS,CK AGAIN.STILL NO UPDATE
;THEN PARTIAL RESTART OF PROGRAM.
SUBR    CKPCRN
        MOVEM   C,SAVC
        MOVE    C,NEWCNT
        CAME    C,OLDCNT
        JRST    RUNNIN
        OUTCHI  ERASE
        OUTSTR  [ASCIZ /PRBCOM MALFUNCTION,PLEASE WAIT/ ]
        MOVEI   C,5
        SLEEP   C,
        MOVE    C,NEWCNT
        CAME    C,OLDCNT
        JRST    RUNNIN
        MOVE    C,SAVC
        JRST    START1
RUNNIN: MOVEM   C,OLDCNT
        MOVE    C,SAVC
        RET


;	DO "COUNT" COMMAND
SUBR	AXCOUN
	AXSCDD			;GET START OF NUMBER OF NODES
	AXGDN			;GET NUMBER
	MOVEM	N,NNODES
	AXSCDD				;GET TERMINATIONS
	AXGDN
	MOVEM	N,TERM
	AXSCDD			;GET PASSTHROUGHS
	AXGDN
	MOVEM	N,PASS
	AXSCCN			;NOW SCAN FOR TERMINAL ^D
	RET			;AND RETURN

;       DO "VERSION " COMMAND
SUBR    AXVER
        AXSCDD                  ;GET PASS 'PROBE'
        AXGDN                   ;GET THE PROBE VER NUMBER
        MOVEM   N,PROVER        ;AND SAVE IT..FOR SOMETHING..
        AXSCDD                  ;GET PASS 'KERNAL' NOW..
        AXGDN                   ;GET KERNAL VER NUMBER
        MOVEM   N,KERVER        ;AND SAVE IT..MORE GARBAGE
        AXSCDD                  ;GET PASS 'SUPER'
        AXGDN                   ;GET THE SUPER NUMBER (VER)
        MOVEM   N,SUPVER        ;AND SAVE THAT TOO..THIS WE CAN USE..
        AXSCCN                  ;LOOK FOR THE OLD ^D..SO WE CAN LEAVE
        RET                     ;AND GET THE HELL OUT OF HERE

;	DO "STAT" COMMAND
SUBR	AXSTAT
;*** THIS SECTION OF CODE ENABLES NETDPY
;*** TO MOVE WITH SUPERVISOR
STATCK: MOVEM   A,SAVA
        MOVE    A,SSLP
        JUMPN   A,SPDEAD
        MOVEM   B,SAVB
        MOVEM   C,SAVC
LOOP1:  MOVEI   B,0
        MOVEM   B,DSKERR
        MOVEI   B,0
        MOVE    C,DIAGTB(B)
        CAME    C,COMPWD
        JRST    .+4
        CAME    C,[ASCII /DISK /]
        JRST    SPDEAD
        MOVEM   C,DSKERR
        AOJ     B,
        CAIE    B,6
        JRST    LOOP1+3
        MOVE    A,COMPWD
        LSH     A,7
        MOVEM   A,COMPWD
        ILDB    B,PRBP
        ANDI    B,177
        CAIN    B,":"
        JRST    AXST0
        LSH     B,1
        IORB    B,COMPWD
        JRST    LOOP1+2
;HERE IF SUPERVISOR SLEEPING OR HAS CRASHED
SPDEAD: OUTCHR  [HOMEUP]
        XCT     OERASE  ;CLEAR SCREEN
        OUTSTR [ASCIZ /
**************  SUPERVISOR MALFUNCTION ************** /]
        MOVEI   N,15
        TTCALL  1,N
        MOVEI   N,12
        TTCALL  1,N
        OUTCHR  [BELL]
        INCHRS  C               ;IF CHAR PRESENT,GO RESTRT
        JRST    .-2
;LOOP UNTIL PRBCOM HAS RECOVERED
        MOVEI   N,5
        SLEEP   N,
        SKIPE   SSLP
        JRST    .-3
        MOVE    N,SUPNUM        ;GET ACTIVE SUPER
        JUMPE   N,.-1
        OUTSTR  [ASCIZ /SUPERVISOR  /]
        ADDI    N,^O60
        TTCALL  1,N
        OUTSTR  [ASCIZ/  TAKING OVER/]
        MOVEI   N,15
        TTCALL  1,N
        MOVEI   N,12
        TTCALL  1,N
        MOVEI   N,PROBE
        MOVEM   N,PROGRM
        JRST    SYSTT0
;*** END OF NETDPY MOVE CODE
AXST0:  MOVE    A,PBUFP         ;REINIT POINTER
        MOVEM   A,PRBP
	MOVEI	C,0		;NOW GET STATES
AXSTA1:	AXSCDD
	AXGDN
	MOVEM	N,SUPSTA(C)
	AOS	C
	CAIGE	C,5
	JRST	AXSTA1
        AXSCDD                  ;DISREGARD WHATS FOUND
        AXGDN                   ;ETC
        AXSCDD                  ;ETC
        AXGDN                   ;ETC
        MOVE    A,DSKERR
        CAIE    A,0
        JRST    D.ERR
GETDF:	AXSCOD			;NOW GET DF
	AXGON
	MOVEM	N,SUPDF
	AXSCDD			;FINALLY GET REJECTS
	AXGDN
	MOVEM	N,NLOGIN
	SETOM	RSTRCT
	AXSCOD
	AXGON
        CHKNOD
	AOS	RSTRCT		;INC FLAG (MUST BE ONE UNRESTRICTED)
	MOVEM	N,FLOGIN	;REJECTED SOURCE
	AXSCOD
	AXGON
        CHKNOD                  ;IGNORE IF NOT LEGAL NODE
	AOS	RSTRCT
	MOVEM	N,TLOGIN	;REJECTED DESTINATION
	MOVE	N,RSTRCT
	MOVEM	N,REJOK		;SAVE FLAG VALUE FOR LATER
	AXSCCN			;NOW SCAN FOR TERMINAL ^D
	RET			;DONE...RETURN


;       GET THE SUPERVISOR DISK ERROR CODE AND STORE FOR FURTHER DISPLAY

D.ERR:  MOVEM   A,SAVA
        MOVEM   B,SAVB
;REINIT DISK ERROR POINTERS
        MOVE    A,SAVDP1
        MOVEM   A,DERPTR
        MOVE    A,SAVDP2
        MOVEM   A,DERPTR+1
        ILDB    CH,PRBP
        ANDI    CH,177
        CAIE    CH,"D"
        JRST    .-3
;HERE CH=D,NOW EAT "ISK ERROR "
        MOVEI   A,^D10
        SOJL    A,.+3
        ILDB    CH,PRBP
        JRST    .-2
        MOVEI   A,0
        MOVEI   B,8
D.LOOP: SOJL    B,D.DONE
        ILDB    CH,PRBP
        ANDI    CH,177
        DPB     CH,DERPTR(A)
        IBP     DERPTR(A)
        CAIG    B,4
        MOVEI   A,1
        JRST    D.LOOP
D.DONE: MOVE    A,SAVA
        MOVE    B,SAVB
        JRST    GETDF

;	GET THE EXCEPTIONS FROM THE SUPERVISOR
SUBR	AXEXC
	SETZM	NSHUT		;INITIALIZE COUNTERS
	SETZM	NOUT
	SETZM	NOOC
	SETZM	LIN.NO		;THE NUMBER OF ENTRIES WE'LL GET
	ILDB	CH,PRBP			;GET THE FIRST CHAR
	ANDI	CH,177
        CAIN    CH,0
        JRST    .-3
        CAIN    CH,"D"-100      ;ABORT IF EOT
	RET
	MOVEI	B,1		;SET A BIT FOR SETTING VALUES

;	GET AN EXCEPTION REPORT OF THE FORM: [S] L [D]
EXC.1:	SETZM	BUFFER		;INITIALIZE THE CURRENT SAVE WORD
        SETOM   RSTRCT          ;INIT RESTRICTED NODE FLAG
	AXGON			;GET THE SOURCE NODE NUMBER
        CHKNOD                  ;IS THIS NODE IN SUBNET?
        JRST    EXC.7           ;NO, SKIP
	DPB	N,NSOR		;SAVE NUMBER
	AXSCDD			;NEW ENTRY...CARRY ON
	AXGDN			;GET LINE NUMBER
	DPB	N,LSOR		;AND SAVE
	AXSCOD			;NOW GET DESTINATION NODE
        AXGON
        CHKNOD                  ;NODE IN SUBNET?
        JRST    EXC.7           ;NO
        SKIPLE  RSTRCT          ;WE MUST HAVE AT LEAST ONE UNRESTRICTED
        JRST    EXC.7           ;ELSE NO GOOD
	DPB	N,NDES		;SAVE NODE NUMBER
	ILDB	CH,PRBP			;SKIP ONE CHAR AND LOOK AT NEXT
	ANDI	CH,177
        CAIN    CH,0
        JRST    .-3
	CAIE	CH,"O"		;"O"UT?
	JRST	EXC.2		;NO...SKIP
	ILDB	CH,PRBP			;YES...SKIP "U"
	ILDB	CH,PRBP			;"T"
	ILDB	CH,PRBP			;" "
	ILDB	CH,PRBP			;GET NEXT CHARACTER
	ANDI	CH,177
        CAIN    CH,0
        JRST    .-3
	CAIN	CH,"O"		;"OUT O"F CHANNELS?
	JRST	[AOS	NOOC		;YES...COUNT IT
		DPB	B,LOOC		;SET THE FLAG
		JRST	EXC.3]		;AND SKIP
	AOS	NOUT		;NO...COUNT THE LINE OUT
	DPB	B,LOUT		;SET FLAG AND SKIP CHARS...
EXC.2:	CAIE	CH,"S"		;TEST FOR "S"HUT
	JRST	EXC.3		;NO...SKIP
	DPB	B,LSHU		;YES...FLAG IT
	AOS	NSHUT		;AND COUNT ANOTHER LINE SHUT
EXC.3:	MOVE	A,BUFFER	;GOT A NEW ENTRY...SAVE IT
	MOVE	C,LIN.NO
	MOVEM	A,BUFFER+1(C)
	JUMPE	C,EXC.6		;SKIP IF THERE ARE NONE

;	TEST IF THE [S],[D] CORRESPONDS TO A PREVIOUS [D],[S]
	LDB	N,LSOR		;COPY BACK THE NUMBERS
	LDB	T1,NSOR
	LDB	T2,NDES
EXC.4:	MOVE	A,BUFFER(C)	;COPY AN ENTRY ALREADY GOTTEN
	MOVEM	A,BUFFER
	LDB	A,NSOR		;GET A PREVIOUS SOURCE NODE
	CAMGE	A,T2		;SOURCE NUMBERS INCREASE WITH INDEX...
	JRST	EXC.6		; WHEN COUNT DOWN TO SOURCE THAT'S LESS NO HOPE OF MATCH
	CAME	A,T2		;HAVE WE THE OTHER END?
	JRST	EXC.5		;NO...SKIP
	LDB	A,NDES		;HAVE WE BOTH ENDS?
	CAME	A,T1
	JRST	EXC.5		;NO...SKIP
	DPB	B,LBER		;YES...SET FLAG FOR BOTH-ENDS-REPORTED
	DPB	N,LDES		;SAVE OTHER END LINE NUMBER
	MOVE	A,BUFFER	;PUT OLD ENTRY BACK
	MOVEM	A,BUFFER(C)
	JRST	EXC.7		;AND GO TO END OF THIS ENTRY
EXC.5:	SOJG	C,EXC.4		;DO FOR ALL ENTRIES
EXC.6:	AOS	LIN.NO		;SCAN FAILED...SET NEW ENTRY
EXC.7:	CAIE	CH,12		;DONE...SCAN FOR L/F
	JRST	[ILDB	CH,PRBP
		ANDI	CH,177
		CAIN	CH,0
		JRST	.-3
		JRST	EXC.7]
	ILDB	CH,PRBP			;GOT TO NEW LINE...TEST IF DONE
	ANDI	CH,177
        CAIN    CH,0
        JRST    .-3
	CAIE	CH,":"		;IS THIS A NEW PROMPT?
	JRST	EXC.1		;NO...DO ANOTHER
	RET			;YES...RETURN


;SCAN FOR OCTAL DIGIT
SUBR    AXSCOD
SCOD1:  ILDB    CH,PRBP    ;GET A CHAR
	ANDI	CH,177
        CAIN    CH,0
        JRST    .-3
        CAIG    CH,"7"
        CAIGE   CH,"0"
        JRST    SCOD1
        RET


;SCAN FOR DECIMAL DIGIT
SUBR    AXSCDD
SCDD1:  ILDB    CH,PRBP    ;GET A CHAR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
        CAIG    CH,"9"
        CAIGE   CH,"0"
        JRST    SCDD1
        RET



;GET AN OCTAL NUMBER FROM PROBE BUFFER
;EXPECTS <CH> TO CONTAIN THE FIRST DIGIT
;RETURNS <CH> FIRST NON-DIGIT, <N>=NUMBER
SUBR    AXGON
        MOVEI   N,0     ;INIT VALUE
AXGON1: SUBI    CH,"0"   ;TURN CHAR INTO NUMBER
        IMULI   N,10    ;SCALE NUMBER
        ADD     N,CH
        ILDB    CH,PRBP    ;GET ANOTHER CHAR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
        CAIL    CH,"0"  ;IS IT A DIGIT?
        CAILE   CH,"7"
        RET             ;RETURN IF NOT
        JRST    AXGON1



;GET DECIMAL NUMBER FROM PROBE BUFFER
;EXPECTS <CH> TO CONTAIN FIRST DIGIT,
;RETURNS <CH>=FIRST NON DIGIT, <N>=NUMBER
SUBR    AXGDN
        MOVEI   N,0     ;INIT VALUE
AXGDN1: SUBI     CH,"0"  ; TURN CHAR INTO NUMBER
        IMULI   N,^D10  ;SCALE NUMBER
        ADD     N,CH
        ILDB    CH,PRBP    ;GET ANOTHER CHAR
        ANDI    CH,177
        CAIN    CH,0
        JRST    .-3
        CAIL    CH,"0"  ;TEST RANGE
        CAILE   CH,"9"
        RET
        JRST    AXGDN1


;SCAN PROBE BUFFER FOR COLON
SUBR    AXSCCN
CLN1:   ILDB    CH,PRBP
	ANDI	CH,177
        CAIN    CH,0
        JRST    .-3
        CAIE    CH,"D"-100
        JRST    CLN1    ;NOT EOT, GET NEXT ONE
        RET             ;GOT ONE, RETURN

SUBTTL "PROBE" COMMAND SECTION

;MAIN LOOP
PROBE:  CLRBFI
        RESET
        MOVE    P,PDP
        PJ      INIT1
        XCT     OERASE  ;CLEAR SCREEN
        OUTSTR  [ASCIZ /Probe:/]
        MOVE    A,[-1,,-31]     ;TURN ON ECHO
        GETTAB  A,
	JFCL
        TRZ     A,1B28
        SETMOD  A,
        SETO    A,
        GETLCH  A
        TLO     A,20
        SETLCH  A
        SETOM   ISUP            ;INIT TO RUNNING SUP
PCM0:   OUTSTR  [ASCIZ /
:/]
PCMD:   MOVE    A,[40,,^D5000]
        HIBER   A,
	JRST	ZAPPED		;COMMAND PORT IS GONE - LOG OUT
        LEVDEF          ;GET OUT OF DEFERRED ECHO MODE
        MOVE    X,ISLOT
        SKIPL   LINKED(X)
        JRST    RCVLNK
	SKIPN	LOGTAB(X)	;HAVE WE BEEN ZAPPED?
	JRST	RCVZAP		;YES
	SETZM	CHKTAB(X)	;TELL PRBCOM WE'RE STILL HERE
        SETOM   RSTRCT          ;INIT COUNTER FOR RESTRICTED NODES
        MOVE    A,EDBFRS
        MOVEM   A,EDBIN
        MOVEM   A,EDBOUT
        TLZ     F,FL.BCS
        PJ      REC             ;GET COMMAND
        JRST    @CMD

NOSUP:  OUTSTR  [ASCIZ /
Supervisor circuit not built yet, wait? /]
        INCHWL  CH
        CLRBFI          ;GET Y OR N, THROW AWAY REST
        CAIN    CH,"N"
        EXIT    1,
        CAIE    CH,"Y"
        JRST    NOSUP
        MOVEI   A,5
        SLEEP   A,      ;SLEEP FOR A WHILE TO LET PRBCOM GET GOING
        JRST    START2  ;TRY IT AGAIN

;COME HERE AFTER COMMAND APPROVED, TO EAT REST OF INPUT
CMDOK:  CAIN    CH,15
        JRST    CMDXCT
        PJ      INCHED
        IDPB    CH,INSP
        JRST    CMDOK

CMDXCT: PJ      PRBXMT
        JRST    PCMD

;COME HERE FOR ALL ERRORS IN COMMAND TYPEIN
CMDERR: CLRBFI
        OUTCHI  "?"
        MOVE    P,PDP           ;REINIT STACK
        JRST    PCM0

;HERE IF WE GET ZAPPED
RCVZAP:	XCT	OERASE		;CLEAR SCREEN
	OUTSTR	[ASCIZ /
Forced exit - goodbye.
/]
	JRST	ALLD2

;GET 2 NODE NUMBERS, CHECK FOR LEGAL
NODNOD: CAIE    CH," "
        JRST    CMDERR
        GETOCT
        CHKNOD
        JRST    CMDERR
        CAIE    CH," "          ;NODE NUMBERS MUST BE SEPARATED BY SPACE
	JRST	CMDERR
        GETOCT
        CHKNOD
        JRST    CMDERR
        SKIPLE  RSTRCT          ;BOTH LEGAL, ONE UNRESTRICTED (NODES)
        JRST    CMDERR
        JRST    CMDOK           ;FINISH UP, SEND IT ALONG

;GET ONE NODE NUMBER, CHECK FOR LEGAL
CNODE:  CAIE    CH," "
        JRST    CMDERR
        GETOCT
        CHKNOD
        JRST    CMDERR
        SKIPL   RSTRCT
        JRST    CMDERR          ;ERROR IF NOT LEGAL OR RESTRICTED
        JRST    CMDOK

;TEMPORARILY IGNORE NODE
IGNO:   GETOCT
        CAIG    N,2500   ;CHECK RANGE
        CAIGE   N,1
        JRST    CMDERR
        JFCL
        JFCL
        LSH     N,1     ;CONVERT TO TABLE INDEX
        SETZM   NNTBL(N)
        AOJ     N,
        SETZM   NNTBL(N)
        JRST    PCM0

;ADD NODE TO LIST
ADDNL:  GETNN
        JRST    CMDERR  ;IF UNABLE TO GET NODE LIST
        OUTSTR  [ASCIZ /Number: /]
        SETZ    A,
        PJ      SCOD
        CAIN    B,"-"   ;RESTRICTED IF DASH IN FRONT
        TRO     A,1
        SETZ    N,
        PJ      GETO1
        CAIG    N,2500  ;CHECK RANGE
        CAIGE   N,1
        JRST    CMDERR
        JFCL
        JFCL
        LSH     N,1     ;CONVERT TO TABLE INDEX
        ADD     N,NLPTR
        SKIPN   (N)
        AOS     NOD.NO  ;INC COUNT IF NO NODE ALREADY IN THIS SLOT
	SETZM	(N)
	SETZM	1(N)
        MOVEM   A,(N)
        OUTSTR  [ASCIZ /Name: /]
        MOVEI   X,^D9
ADDGCH: PJ      INCHED  ;GET NODE NAME
        CAIN    CH,15
        JRST    ADDEND
        IDPB    CH,N
        SOJG    X,ADDGCH
ADDEND: SETZ    CH,     ;TERM WITH NULL CHAR
        IDPB    CH,N
        PJ      WRITNL
        JRST    PCM0

;DELETE NODE FROM LIST
DELNL:  GETNN
        JRST    CMDERR
        OUTSTR  [ASCIZ /Number: /]
        GETOCT
        CAIG    N,2500
        CAIGE   N,1
        JRST    CMDERR
        JFCL
        JFCL
        LSH     N,1     ;CONV. TO TBL INDEX
        SKIPE   NNTBL(N)
        SOS     NOD.NO  ;DEC COUNT OF NODES
        SETZM   NNTBL(N)
        AOJ     N,
        SETZM   NNTBL(N)
        PJ      WRITNL  ;SAVE UPDATED LIST
        JRST    PCM0

;SAVE NODE LIST ON FILE
WRITNL:	OPEN    NAM,NAMBLK      ;OPEN CHANNEL
        JRST    WROPER
	PJ	INITB		;SET UP LOOKUP/ENTER STUFF
        LOOKUP  NAM,NAMNAM
        JRST    WRLKER
	PJ	INITB
        ENTER   NAM,NAMNAM
        JRST    WRENER
        OUTPUT  NAM,NAMIB       ;WRITE OUT DATA
        RELEASE NAM
        RET
WROPER:	OUTSTR	[ASCIZ /Open error /]
	JRST	WRITNG
WRLKER:	OUTSTR	[ASCIZ /Lookup error /]
	SKIPA
WRENER:	OUTSTR	[ASCIZ /Enter error /]
WRITNG:	HRRZ	N,NAMNAM+1	;PRINT OUT OCTAL ERROR CODE
	PJ	OUTOCT
	OUTSTR	[ASCIZ / - change not saved./]
	RELEASE	NAM
	RET

;LOG ANY COMMAND WHICH CHANGES NETWORK STATE
SPYLOG: MOVE    X,SPYCUR        ;GET POINTER INTO RING BUFFER
        CAIN    X,NSPY-1
        SETO    X,
        AOJ     X,
        MOVEM   X,SPYCUR
        MOVE    A,ISLOT
        MOVEM   A,SPYBUF(X)
        MOVE    A,NAMTAB(A)
        MOVEM   A,SPYNAM(X)
        RET

;PRINT USERS CURRENTLY LOGGED IN
NCWHO:  MOVEI   B,SYNC
        SYNCL
        MOVE    X,[-<NSLOTS+1>,,-1]
NCLUP:  AOBJP   X,[SETOM SYNUSR
        SETOM   SYNC
                JRST    PCM0]
        SKIPN   LOGTAB(X)
        JRST    NCLUP
        HRRZ    N,X
        CAMN    N,ISLOT
        OUTCHI  "*"
        PJ      OUTOCT
        OUTCHI  40
        MOVE    B,NAMTAB(X)
        PJ      PRIN6
        OUTCHI  15
        OUTCHI  12
        JRST    NCLUP

;SET NUMBER FOR SUPER TO TALK TO
SUPSET: GETOCT
        JUMPE   N,[SETOM        ISUP    ;SET TO CUR IF 0
                JRST            PCM0]
        MOVEI   X,NSUPS
        SOJL    X,CMDERR
        CAME    N,SUPN(X)
        JRST    .-2
        MOVEM   X,ISUP
        JRST    PCM0

;PRINT LIST OF USERS WHO HAVE EXECUTED OPERATOR COMMANDS
NCSPY:  MOVE    X,SPYCUR
NC1:    MOVE    N,SPYBUF(X)
        JUMPE   N,PCM0		;STOP AT FIRST NULL ENTRY
        PJ      OUTOCT
        OUTCHI  40
        MOVE    B,SPYNAM(X)
        PJ      PRIN6
        OUTCHI  15
        OUTCHI  12
        SOSGE   X
        MOVEI   X,NSPY-1
        CAME    X,SPYCUR        ;DONE ALL?
        JRST    NC1             ;NO
        JRST    PCM0

;RECEIVE LINK
RCVLNK: MOVE    P,PDP
        OUTCHI  7
        OUTCHI  7
        OUTCHI  7
        MOVE    X,ISLOT
        MOVE    N,LINKED(X)
	JUMPL	N,LNKABT	;HERE IF THEY ABORTED LINK BEFORE WE GOT TO IT
	MOVEM	X,LINKED(N)	;TELL THEM WE'VE GOTTEN THE MESSAGE
        OUTSTR  [ASCIZ /Link from /]
        PJ      OUTOCT
        OUTCHI  " "
        MOVE    N,LINKED(X)
        MOVE    B,NAMTAB(N)
        PJ      PRIN6           ;TELL THEM WHO'S LINKING
        OUTCHI  "."
        OUTCHI  15
        OUTCHI  12
        JRST    LNKLP0

;SEND LINK
;DISABLE ESCAPES FOR LINK LOGIC
SNDLNK: MOVEM   A,SAVA
        HRLZI   A,-1
        GETTAB  A,
        JRST    [OUTSTR [ASCIZ /ERROR - TRYING TO TURN OFF ESCAPES/]
                EXIT     1,]
        TRO     A,100000
        SETJAL  A,
        JRST    [OUTSTR [ASCIZ /ERROR DISABLING ESCAPES./]
                EXIT 1,]
        MOVE    A,SAVA          ;RESTORE AC
        GETOCT
        CAIG    N,NSLOTS-1
        CAIGE   N,0
        JRST    CMDERR
        SKIPN   LOGTAB(N)       ;ARE THEY LOGGED IN?
	JRST	[OUTSTR [ASCIZ /No login on /]
                PJ      OUTOCT
                OUTCHI  "."
                JRST    PCM0]
        SKIPL   LINKED(N)
	JRST	[OUTSTR  [ASCIZ /Already linked./]
                JRST    PCM0]
        MOVE    X,ISLOT
        MOVEM   X,LINKED(N)
SLWAIT:	SKIPL	LINKED(X)	;WAIT FOR THEM TO RECEIVE
	JRST	LNKOK		;THEY'VE GOT IT - CONTINUE
	MOVE	A,[10,^D500] ;WAIT 1/2 SEC OR UNTIL USER TYPES A CHAR
	HIBER	A,
	JRST	ZAPPED		;USER HAS HUNG UP - LOG OUT
	SETZM	CHKTAB(X)	;TELL PRBCOM WE'RE STILL ALIVE
	INCHRS	CH		;GIVE USER A CHANCE TO ABORT
	JRST	SLWAIT
	CAIE	CH,33		;IGNORE ALL BUT ESCAPES
	JRST	SLWAIT
	JRST	BRKLNK
LNKOK:  OUTSTR  [ASCIZ /Link complete.
/]
LNKLP0:	SETZ	A,
LNKLUP: SKIPGE  LINKED(X)
        JRST    LNKGON          ;LINK HAS BEEN BROKEN
        SKIPE   LNKDAT(N)       ;IS THEIR BUFFER EMPTY?
        JRST    LNKL1
        INCHRS  CH
        JRST    LNKL1
	LEVDEF
        CAIN    CH,33   ;ESCAPE?
        JRST    BRKLNK  ;YES, BREAK LINK
        MOVEM   CH,LNKBUF(N)    ;STUFF CHAR INTO THEIR BUFFER
        SETOM   LNKDAT(N)
LNKL1:  SKIPN   LNKDAT(X)       ;ANYTHING IN OURS?
        JRST    LNKLND
        OUTCHR  LNKBUF(X)
        SETZM   LNKDAT(X)
LNKLND: SLEEP	A,		;LET OTHER SIDE RUN
	SETZM	CHKTAB(X)
        JRST    LNKLUP
LNKGON: OUTSTR  [ASCIZ /
Link broken./]
;RE-ENABLE ESCAPES.EXIT ON FAILURE
ESCON:  MOVEM   A,SAVA          ;SAVE AC
        HRLZI   A,-1
        GETTAB  A,
        EXIT    1,
        TRZ     A,100000
        SETJAL  A,
        EXIT    1,
        MOVE    A,SAVA
        JRST    PCM0
BRKLNK: SETOM   LINKED(N)
        SETOM   LINKED(X)
        JRST    ESCON

LNKABT:	OUTSTR	[ASCIZ /<aborted>/]
	JRST	ESCON

;ZAP A USER
ZAPM:	GETOCT			;GET JOB NUMBER
	CAIG	N,NSLOTS-1	;CHECK FOR LEGAL JOB NUMBER
	CAIGE	N,0
	JRST	CMDERR
	SETZM	LOGTAB(N)	;LOG THEM OUT
	JRST	PCM0

;REBUILD CIRCUIT
MOVSUP: SETOM   SSLP    ;TELL PRBCOM TO REBUILD CIRCUIT
        JRST    PCM0

;SET TERMINAL TYPE FOR THIS USER
SETTRM: GETNN           ;READ IN NEW COPY OF NODE FILE
        JRST    CMDERR
        OUTSTR  [ASCIZ /types are:
0 - LSI ADM3
1 - LSI ADM1
Enter type #: /]
        PJ      GETDEC  ;READ NUMBER FROM TERMINAL
        CAIL    N,0     ;CHECK RANGE
        CAILE   N,1
        JRST    CMDERR
        DPB     N,TTYPE
        MOVE    A,OEINS(N) ;CHANGE SCREEN CLEAR INSTRUCTIONS
        MOVEM   A,OERASE
        MOVE    A,CEINS(N)
        MOVEM   A,CERASE
        PJ      WRITNL  ;SAVE UPDATED NODE FILE
        JRST    PCM0

;GO TO DISPLAY
PRBDIS: INCHRS  CH
        SKIP
        CLRBFI
        JRST    REST0

;KILL PRBCOM AND QUIT TO MONITOR
HALTP:  MOVEI   X,NSLOTS        ;CHECK THAT NO ONE ELSE IS ON
HA1:    SOJL    X,HAOK          ;OK, NOOBODY ELSE ON
        SKIPN   LOGTAB(X)
        JRST    HA1
        CAMN    X,ISLOT         ;IGNORE IF IT'S US
        JRST    HA1
        OUTSTR  [ASCIZ /
Someone else is still logged in./]
HA2:    OUTSTR  [ASCIZ /
Proceed? /]
        INCHWL  CH      ;GET "Y" OR "N"
HA3:    INCHWL  A
        CAIE    A,15    ;EAT REST OF LINE
        JRST    HA3
        INCHWL  A       ;EAT LF
        CAIL    CH,"Z"  ;MAP CASE
        SUBI    CH,40
        CAIN    CH,"N"
        JRST    PCM0    ;ABORT
        CAIE    CH,"Y"
        JRST    HA2
HAOK:   SETOM   RUNFLG  ;TELL PRBCOM TO GO AWAY
        JRST    ALLD2

;KLUDGE TO PREVENT SPURIOUS CHARS FROM GETTING TO "LOG"
PRBLOG: INCHSL  CH
        SKIP
        CLRBFI
        INCHRS  CH
        SKIP
        JRST    LOG0

;GET COMMAND FROM TERMINAL, SET UP TRANSFER LOC, DO OTHER NEAT STUFF
REC:    TLZ     F,FL.REC        ;INIT "RECOGNIZED" FLAG
        MOVE    A,[POINT 7,INSTR]
        MOVEM   A,INSP
        HRLZI   B,400000        ;INIT CONTROL BITS
        SETZM   CMDCTL
        MOVE    A,[CMDCTL,,CMDCTL+1]
        BLT     A,ECTL-1
        SETZM   INSTR
        SETZM   INSTR1
	MOVN	X,NVCMD
	HRLZ	X,X
        MOVE    A,[POINT 7,CMDTAB+1]
        MOVEM   A,CMDPTR(X)
        ADDI    A,3
        AOBJN   X,.-2
        MOVEI   A,CMDERR
        MOVEM   A,CMD
INCH:   MOVE    X,NVCMD
	SUBI	X,1
        SETOM   NMAT
INCH1:  MOVE    A,[10,,^D3000]
        MOVE    CH,ISLOT
INCH2:  HIBER   A,
	JRST	ZAPPED		;USER HAS HUNG UP - LOG OUT
        SKIPG   RUNFLG          ;PRBCOM STILL ALIVE?
        JRST    PRBDED          ;NO
        SKIPL   LINKED(CH)
        JRST    RCVLNK
	SKIPN	LOGTAB(CH)
	JRST	RCVZAP		;SOMEBODY ZAPPED US
	SETZM	CHKTAB(CH)
	INCHRS	CH
        JRST    INCH2
        CAIN    CH,"?"
        JRST    HELPM
        CAIN    CH,"A"-100
        JRST    BACKUP
        CAIN    CH,"Q"-100      ;BACK UP TO BEGINNING
        JRST    BAKALL
        CAIN    CH,33           ;ESCAPE FOR RECOGNITION
        JRST    RECREC
        IDPB    CH,INSP
        CAIL    CH,"A"
        CAILE   CH,"Z"
        SKIPA
        ADDI    CH,40           ;MAP UPPERCASE TO LOWER
        CAIL    CH,"a"
        CAILE   CH,"z"
        JRST    TERMC
NEX0:   LSH     B,-1            ;SHIFT CONTROL BIT
NEX1:   SKIPE   CMDCTL(X)       ;IS THIS ONE STILL ALIVE?
        JRST    NEXT            ;NO, DO NEXT
        ILDB    A,CMDPTR(X)     ;GET NEXT CHAR FROM TABLE
        CAME    A,CH            ;SAME?
        JRST    NOMAT           ;NO
        AOS     NMAT            ;YES, INC COUNTER
        MOVEM   X,MATCH         ;SAVE INDEX FOR FUTURE REF
        SKIPA
NOMAT:  MOVEM   B,CMDCTL(X)     ;FLAG THIS ONE AS DEFUNCT
NEXT:   SOJGE   X,NEX1
        SKIPGE  NMAT            ;ANY MATCHES?
        JRST    CMDERR          ;NO, FAIL
        SKIPE   NMAT            ;MULTIPLE MATCHES?
        JRST    INCH            ;YES, GET ANOTHER CHAR FROM TERMINAL
        TLOE    F,FL.REC        ;SET FLAG FOR COMMAND RECOGNIZED
        JRST    INCH
        MOVE    X,MATCH
        IMULI   X,3             ;GET INDEX INTO ADDR TABLE
        MOVE    A,CMDTAB(X)
        MOVEM   A,CMD
        SKIPE   CH              ;WAS THIS A TERM CHAR?
        JRST    INCH
TERMC:  CAIN    CH,15           ;EAT LINEFEED IF CR
	INCHRS	C
	JFCL
        TLNE    F,FL.REC        ;ONLY ONE?
        JRST    TERM0           ;YES
        MOVE    C,CH            ;SAVE
        SETZ    CH,
        JRST    NEX0
TERM0:  SKIPE   CH
        RET
        MOVE    CH,C
        RET

;INPUT CHAR WITH EDITING
INCHED: TLNE    F,FL.BCS
        JRST    INCHE0
INCHE1: MOVE    C,[10,,^D3000]
        MOVE    X,ISLOT
INCHE4: HIBER   C,
	JRST	ZAPPED		;USER HAS HUNG UP - LOG OUT GRACEFULLY
        SKIPG   RUNFLG          ;PRBCOM STILL ALIVE?
        JRST    PRBDED          ;NO
        SKIPL   LINKED(X)       ;ANYONE LINKING TO US?
        JRST    RCVLNK
	SKIPN	LOGTAB(X)
	JRST	RCVZAP		;WE'VE BEEN ZAPPED!
	SETZM	CHKTAB(X)
	INCHRS	CH
        JRST    INCHE4
        CAIN    CH,"Q"-100
        JRST    PCM0
        CAIN    CH,"A"-100
        JRST    INCHE2
        MOVE    M,EDBIN
        CAMN    M,EDBLIM
        MOVE    M,EDBFRS
        IDPB    CH,M
        MOVEM   M,EDBIN
        CAIN    CH," "
        JRST    INCHBR
        CAIE    CH,15
        JRST    INCHE1
	INCHRS	C
	JFCL
INCHBR: TLO     F,FL.BCS
INCHE0: MOVE    M,EDBOUT
        CAMN    M,EDBLIM
        MOVE    M,EDBFRS
        ILDB    CH,M
        MOVEM   M,EDBOUT
        CAIN    CH," "
        TLZ     F,FL.BCS
        CAIN    CH,15
        TLZ     F,FL.BCS
        RET

INCHE2: MOVE    M,EDBIN
        CAME    M,EDBOUT
        JRST    INCHE3
        OUTCHI  7
        JRST    INCHE1
INCHE3: MOVEI   CH,M
        PJ      DBP
        CAMGE   M,EDBFRS
        MOVE    M,EDBLIM
        MOVEM   M,EDBIN
        OUTCHI  "H"-100
        JRST    INCHE1

HELPM:  SKIPE   CMDCTL(X)
        JRST    HELP0
        OUTSTR  [ASCIZ /
/]
        OUTSTR  INSTR
        MOVE    M,CMDPTR(X)
        PJ      STROUT
HELP0:  SOJGE   X,HELPM
        OUTSTR  [ASCIZ /
:/]
        OUTSTR  INSTR
        JRST    INCH

RECREC: TLNN    F,FL.REC
	JRST	[OUTCHI	BELL
	        JRST    INCH]
        MOVE    X,MATCH
RECOUT: ILDB    CH,CMDPTR(X)
        CAIE    CH,0
        JRST    RECO1
        MOVEI   CH,CMDPTR
        ADD     CH,X
        PJ      DBP
        JRST    INCH
RECO1:  IDPB    CH,INSP
        LSH     B,-1
	OUTCHR	CH
        JRST    RECOUT

BAKALL: OUTSTR  [ASCIZ /
:/]
        JRST    REC

BACKUP: JUMPL   B,BACK0
        OUTCHI	"H"-100
        SETZ    CH,
        DPB     CH,INSP
        MOVEI   CH,INSP
        PJ      DBP
        MOVEI   CH,CMDPTR-1
	ADD	CH,NVCMD
BACKTS: SKIPN   CMDCTL(X)
        JRST    BACK1
        TDNN    B,CMDCTL(X)
        JRST    BACKNX
        SETZM   CMDCTL(X)
BACK1:  PJ      DBP
BACKNX: SOJ     CH,
        SOJGE   X,BACKTS
        TLZ     F,FL.REC
        MOVEI   A,CMDERR
        MOVEM   A,CMD
        LSH     B,1
        JRST    INCH
BACK0:  OUTCHR  [BELL]
        JRST    INCH

;OUTPUT STRING, POINTER IN M
STROUT: ILDB    CH,M
        SKIPN   CH
        RET
        OUTCHR  CH
        JRST    STROUT

;DECREMENT BYTE POINTER (NOT GENERAL)
DBP:    LDB     A,POS
        LDB     C,SIZ
        ADD     A,C
        CAILE    A,^D36
        JRST	[HRRZI   A,1
	        SOS     0(CH)
		JRST	.+1]
        DPB     A,POS
        RET

;GET OCTAL NUMBER FROM TERMINAL, STUFF INTO BUFFER TO SEND TO PROBE
SUBR    GETOCT
        SETZ    N,              ;INIT VALUE
        PJ      SCOD            ;SCAN FOR OCTAL DIGIT
GETO1:  CAIL    CH,"0"
        CAILE   CH,"7"
        RET
        SUBI    CH,60           ;TURN CHAR INTO NUMBER
        IMULI   N,10
        ADD     N,CH
        PJ      INCHED
        IDPB    CH,INSP
        JRST    GETO1

;SCAN FOR OCTAL DIGIT
SCOD:   PJ      INCHED
        MOVE    B,CH
        IDPB    CH,INSP
        CAIN    CH,15           ;BARF IF CR
        JRST    CMDERR
        CAIL    CH,"0"
        CAILE   CH,"7"
        JRST    SCOD
        RET

;GET DECIMAL NUMBER FROM TERMINAL
GETDEC: SETZ    N,      ;INIT VALUE
GETDC1: PJ      INCHED  ;GET NEXT CHAR FROM TERMINAL
        IDPB    CH,INSP ;SAVE IN PROBE BUFFER
        CAIN    CH,15   ;BARF IF FIRST CHAR IS CR
        JRST    CMDERR
        CAIL    CH,"0"
        CAILE   CH,"9"
        JRST    GETDC1
GETDC2: CAIL    CH,"0"
        CAILE   CH,"9"
        RET
        SUBI    CH,"0"  ;CONVERT CHAR TO NUMBER
        IMULI   N,^D10  ;SCALE NUMBER
        ADD     N,CH
        PJ      INCHED  ;GET NEXT CHAR
        IDPB    CH,INSP
        JRST    GETDC2

;PRINT OCTAL NUMBER IN N
OUTOCT: PUSH    P,[0]
OUTOC0: IDIVI   N,10
        ADDI    N1,60
        PUSH    P,N1
        JUMPN   N,OUTOC0
OUTOC1: POP     P,CH
        JUMPE   CH,[RET]
        OUTCHR  CH
        JRST    OUTOC1

;PRINT WORD OF SIXBIT CHARS
PRIN6:  MOVEI   M,6
PRIN61: SETZ    A,
        LSHC    A,6
        JUMPE   A,[RET]
        ADDI    A,40
        OUTCHR  A
        SOJG    M,PRIN61
        RET

;SEND STRING TO PROBE
PRBXMT: MOVEI   B,XSYNC
        SYNCL
        SKIPGE  ISUP
        JRST    PRBX1
        MOVE    A,ISUP          ;GET # OF SUP TO SEND TO (-1 FOR CUR)
        MOVEM   A,PSUP
PRBX1:  MOVE    X,MATCH
        IMULI   X,3
        SKIPG   CMDTAB(X)
        PJ      SPYLOG
        MOVE    M,[POINT 7,INSTR] ;GET STRING POINTER
        MOVE    T1,PRBOBP    ;GET POINTER TO BUFFER IN PRBCOM'S MEMORY
XMT1:   ILDB    CH,M
        ANDI    CH,177
        IDPB    CH,T1
        CAIE    CH,15           ;COPY UP TO CR
        JRST    XMT1
        SETZ    CH,
        IDPB    CH,T1
        SKIPGE  SSLP
        JRST    SPDEAD
        SKIPE   ERRFLG
        JRST    NOCIRP
        SETOM   REQ             ;TELL PRBCOM WE HAVE SOMETHING FOR IT
        SETOM   PREQ            ;TELL CLOCK INT TO RUN PRBCOM
        SETZ    A,              ;SET UP SLEEP TIME (1 JIFFY)
XMTT:   SKIPN   REQ             ;WAIT FOR REPLY
        JRST    XMTDUN
        SKIPG   RUNFLG          ;PRBCOM STILL THERE?
        JRST    PRBDED          ;NO
        SLEEP   A,
        JRST    XMTT
XMTDUN: SKIPE   ERRFLG          ;CIRCUIT STILL THERE?
        JRST    NOCIRP
        MOVE    T1,PRBIBP       ;COPY REPLY BACK
XMTCOP: ILDB    CH,T1
	ANDI	CH,177
        CAIN    CH,0
        JRST    .-3
        OUTCHR  CH
        CAIE    CH,"D"-100      ;DO UNTIL EOT
        JRST    XMTCOP
        SETOM   XSUSR
        SETOM   XSYNC
        RET
NOCIRP:	SETOM	XSUSR
        SETOM   XSYNC
        SKIPGE  SSLP
        JRST    SPDEAD
        OUTSTR  [ASCIZ /
Circuit to Probe lost - try again./]
        JRST    PCM0
SUBTTL CONSTANTS AND DATA

;POINTER TO TERMINAL TYPE CODE (0=ADM3, 1=ADM1)
TTYPE:  POINT   3,NNTBL+1,35
;INSTRUCTIONS FOR SCREEN CLEAR, INDEXED BY TERMINAL TYPE
OEINS:  OUTCHI  ERASE
        PJ      OEADM1
CEINS:  PJ      CEADM3
        PJ      CEADM1

;POINTERS FOR EDIT FUNCTION
EDBFRS: POINT   7,EDBUF
EDBLIM: POINT   7,EDBEND

;SPACE FOR PRBCOM LOGIN STRING
LOGIST: BLOCK   4
;TABLE OF LOGIN STRINGS FOR LOGGER
	IFE DEBUG,<
LOGSTR: [ASCIZ /NETCON:1;/]
        [ASCIZ /NETCON:10;/]
	>
	IFN DEBUG,<
LOGSTR:	[ASCIZ /NETCON:1;/]
	[ASCIZ /NETCON:10;/]
	>

;INTERRUPT VECTOR FOR "LOG" COMMAND
INTVEC:	EXP	0,MSGBEL,0,LOGINC
INTLOG:	EXP	0,LGTOUT

;CONSTANTS FOR PROBE COMMAND PROCESSOR
ICMDTB: CMDATA  n,CNODE
        CMDATA  node,CNODE
        CMDATA  who
        CMDATA  stat
        CMDATA  sys
        CMDATA  zap,ZAPM
	CMDATA	move,MOVSUP
        CMDATA  log,PRBLOG
        CMDATA  version
        CMDATA  count
        CMDATA  ct,CNODE
        CMDATA  cp,CNODE
        CMDATA  cl,CNODE
        CMDATA  neighbor,CNODE
        CMDATA  eshut,NODNOD,1
        CMDATA  rshut,NODNOD,1
        CMDATA  clear,CNODE,1
        CMDATA  send
	IFN	NETCON,<CMDATA	hadd,HADD>
	IFN	NETCON,<CMDATA	hdelete,HDEL>
	CMDATA	add,ADDNL
	CMDATA	delete,DELNL
        CMDATA  ignore,IGNO
	CMDATA	ncspy,NCSPY
	CMDATA	link,SNDLNK
	CMDATA	users,NCWHO
	CMDATA	supnum,SUPSET
	CMDATA	halt,HALTP
        CMDATA  quit,ALLD1
        CMDATA  exit,ALLD1
        CMDATA  display,PRBDIS
        CMDATA  terminal,SETTRM
        CMDATA  time
        CMDATA  etime,,1
        CMDATA  host
        CMDATA  an
        CMDATA  ad
        CMDATA  exc
        CMDATA  df,,1
        CMDATA  awake,,1
        CMDATA  spy
        CMDATA  tree
        CMDATA  freeze,,1
        CMDATA  thaw,,1
        CMDATA  sleep,,1
        CMDATA  unsnip,CNODE,1
        CMDATA  retake,CNODE,1
        CMDATA  bori,CNODE,1
        CMDATA  lshut
        CMDATA  nshut,CNODE,1
        CMDATA  extract
        CMDATA  hang
        CMDATA  list
        CMDATA  enter
ECMDTB=.
NCMD=<.-ICMDTB>/3
POS:    POINT   6,0(CH),5
SIZ:    POINT   6,0(CH),11

;CONSTANTS FOR GETTAB UUO

DPYTMC:	XWD	0,440000	;DPY TERMINAL CHARACTERISTICS

MONTAB:	ASCII	/-JAN-/
	ASCII	/-FEB-/
	ASCII	/-MAR-/
	ASCII	/-APR-/
	ASCII	/-MAY-/
	ASCII	/-JUN-/
	ASCII	/-JUL-/
	ASCII	/-AUG-/
	ASCII	/-SEP-/
	ASCII	/-OCT-/
	ASCII	/-NOV-/
	ASCII	/-DEC-/

;	DAYS TO BEGINNING OF MONTH TABLE
DAYTAB:	DEC	1,32,60,91,121,152,182,213,244,274,305,335

;	TAB SETTINGS
TAB0:	DEC	4,16,23,26,33
TAB1:	DEC	20,33,59,72
TAB4:	DEC	15,21,28,35,42,49,56,63,70

;	INITIALIZED BYTE POINTERS
NLPTR:  POINT   7,NNTBL
HOS.PT: POINT   7,HOSTAB        ;CHAR POINTER FOR HADD AND HDEL
OBFIP:  POINT   8,OBUF+1
IPRBP:  POINT   8,PRBBUF      ;POINTER TO PROBE BUFFER
IHOSPT: POINT   8,HOSBUF        ;POINTER TO HOSBUF
BPTAB:	POINT	9,DBUF,8
	POINT	9,DBUF,17
	POINT	9,DBUF,26
	POINT	9,DBUF,35

NSOR:	POINT	11,BUFFER,10	;SOURCE NODE FIELD
NDES:	POINT	11,BUFFER,21	;DESTINATION NODE FIELD
LSOR:	POINT	5,BUFFER,26	;SOURCE LINE NUMBER
LDES:	POINT	5,BUFFER,31	;DESTINATION LINE NUMBER
LSHU:	POINT	1,BUFFER,32	;SHUT FLAG
LOUT:	POINT	1,BUFFER,33	;OUT FLAG
LOOC:	POINT	1,BUFFER,34	;LINE OUT OF CHANNELS FLAG
LBER:	POINT	1,BUFFER,35	;LINE BOTH ENDS REPORTED

HHOST:	POINT	11,HOSTS,10	;HOST FIELD
HNODE:	POINT	11,HOSTS,21	;NODE FIELD
HPOS:	POINT	3,HOSTS,24	;POSITION FIELD
HAS:	POINT	1,HOSTS,25	;ANSWERED FIELD
HDS:	POINT	1,HOSTS,26	;DOWN FIELD
HSS:	POINT	1,HOSTS,27	;SHUT FIELD

;POINTER FOR DISK ERROR CODE,DO NOT REORDER!

DERPTR: POINT   7,DSKMSG,6
        POINT   7,DSKMS1,6

SAVDP1: 0
SAVDP2: 0

DSKERR: 0
        
DSKMSG: 0
DSKMS1: 0

;POINTER FOR PASSWORD.MUST NOT BE REORDERED!
PTR:    POINT   7,PWORD,6
        POINT   7,PWORD1,6
CHAR:   0


SYSNO:  0

PWORD:  0
PWORD1: 0
RESULT: 0

OLDCNT: 0
SAVA:   0
SAVB:   0
SAVC:   0

COMPWD: 0

DIAGTB: ASCII   /NAME/
        ASCII   /INITI/
        ASCII   /DISK /
        ASCII   /SLEEP/
        ASCII   /FROZE/
        ASCII   /ENTER/


;TEMPORARIES
ISLOT:	-1		;PRBCOM SLOT #

;	BLOCK FOR CONVERSION TO GMT
DATE:	0		;THE DATE
TIME:	0		;THE TIME
        0,,20           ;CONVERT FROM USER TIME TO GMT

NAMBLK:	16			;NODE NAME FILE BLOCK (16= DUMP RECS)
	SIXBIT	/DSK/
	0

;	PUSH-DOWN POINTERS
PDP:    -77,,.
ZER:!		;START OF AREA TO ZERO
        BLOCK   100      ;STACK

USRNAM:	0			;SIXBIT USER NAME
NAMNAM:	EXP	0,0,0
NAMPPN:	EXP	0,0
EDBIN:  0       ;EDIT BUFFER IN POINTER
EDBOUT: 0       ;EDIT BUFFER OUT POINTER
EDBUF:  BLOCK   20 ;EDIT BUFFER
EDBEND=.
INSTR:  0       ;SAVED INPUT STRING
INSTR1: BLOCK   20
INSP:   0
CMD:    0       ;ADDRESS TO TRANSFER TO
NVCMD:	0			;NUMBER OF VALID COMMANDS FOR THIS USER
CMDTAB:	BLOCK	NCMD*3		;COMMAND STRINGS AND ADDRESSES
CMDCTL: BLOCK   NCMD		;CONTROL BITS FOR ^A LOGIC
ECTL=.
CMDPTR: BLOCK   NCMD		;POINTERS TO CMDTAB STRINGS
NMAT:   0
MATCH:  0

OERASE: 0               ;CLEAR SCREEN (DIRECT) INSTRUCTION
CERASE: 0               ;CLEAR SCREEN (COUT) INSTRUCTION

OLDCUR: Z               ;SAVED CURSOR
OBUF:   BLOCK   ^D101          ;OUTPUT BUFFER
OBCOUN=OBUF                      ;WORD FOR BYTE COUNT
DBUF:	BLOCK	^D24*^D80/4
DBFEND=.-1

NNTBL:	BLOCK	2*NN.SIZ	;NODE-NAME TABLE
CMDVAL:	BLOCK	2*NCMD		;STRING VALUES OF VALID COMMANDS (MUST FOLLOW NNTBL)
HOSTAB: BLOCK   2*HOS.SZ        ;HOST NAME TABLE

NOD.NO: 0               ;NUMBER OF NODES IN SUBNET
REJOK:	0		;REJECTED LOGIN FLAG WORD (SET FROM RSTRCT)
RSTRCT: 0               ;RESTRICTED NODE FLAG WORD

LIN.NO:	0		;THE NUMBER OF LINES IN THE LINE TABLE
BUFFER:	BLOCK	BUF.SZ	;SPACE FOR ACCUMULATING LINE DESCRIPTORS

ISUP:   0       ;NUMBER OF SUP TO SEND STUFF TO
PRBBUF: BLOCK   PBF.SZ  ;SPACE FOR COLLECTING REPLIES FROM PROBE

HOS.NO:	0		;THE NUMBER OF HOSTS IN THE HOST TABLE
HOSTS:	BLOCK	HOS.SZ	;SPACE FOR ACCUMULATING HOST DISCRIPTORS
HOSTRY: 0               ;RETRY COUNTER
HOSPTR: 0               ;BYTE POINTER TO HOSBUF
HOSBUF: BLOCK   ^D4000  ;D.SCHMIDT -9/15/79 INCREASED FROM 2000 FOR HOST CMD
HBEND=.-1

NODUP:	BLOCK	NU.SIZ	;THE QUEUE OF NODES-UP
			;FIRST WORD = NODE NUMBER, SECOND WORD = TIME

NNDOWN:	0		;NUMBER OF NODES DOWN
NODDWN:	BLOCK	ND.SIZ	;TABLE OF NODES DOWN
			;FIRST WORD = NODE NUMBER, SECOND WORD = TIME

REPS:	0

PRBP:   0

THED:	BLOCK	3

SUPVER:	0		;SUPERVISOR VERSION NUMBER
KERVER: 0               ;KERNAL VERSION NUMBER
PROVER: 0               ;PROBE VERSION NUMBER (LAROY??)
SUPDF:	0		;SUPERVISOR DROUSINESS FACTOR
SUPSTA:	BLOCK	7	;SUPERVISOR TAKEOVER STATES
NNODES:	0		;NUMBER OF NODES IN THE NETWORK
TERM:	0		;NUMBER OF TERMINATIONS
PASS:	0		;NUMBER OF PASSTHROUGHS

NSHUT:	0		;NUMBER OF SHUT LINES
NOUT:	0		;NUMBER OF LINES OUT
NOOC:	0		;NUMBER OF LINES OUT OF CHANNELS
NLOGIN:	0		;NUMBER OF LOGINS REJECTED
FLOGIN:	0		;FROM LOGIN REJECTED
TLOGIN:	0		;TO LOGIN REJECTED

HANS:	0		;NUMBER OF HOSTS ANSWERED
HSHUT:	0		;NUMBER OF HOSTS SHUT
HDOWN:	0		;NUMBER OF HOSTS DOWN


TRY:    0               ;RETRY COUNTER FOR DISPLAY
TCKSEC:	0

LINE:	0		;CURRENT LINE ON SCREEN
COL:	0		;CURRENT COLUMN ON SCREEN
BOTTOM:	0		;BOTTOM LINE OF WINDOW
WINDOW:	0		;THE WINDOW DISCRIPTOR
LTEND:	0		;LEFT EDGE COLUMN OF WINDOW
LTTEND:	0		;LEFT EDGE OF TABS
RTEND:	0		;RIGHT EDGE COLUMN OF WINDOW
TABCTR:	0		;COUNTER OF TABS IN THIS LINE SO FAR
PROGRM:	0		;WHICH DISPLAY PROGRAM
			;LH=N1 TO OFFSET FOR THE DESIRED JOB
BI.FLAG:0
BI.TMP: 0
BI.T1:  0
BI.T2:  0

LZER==.-1

	XLIST		;AVOID PRINTING LITERALS
	LIT
	LIST

	END	START

 XX