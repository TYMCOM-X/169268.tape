
************************************************************************
*                                                                      *
*                        SUBROUTINE:  CPATH                            *
*                                                                      *
*       THIS SUBROUTINE FINDS THE LEAST COST PATH FROM EVERY           *
*       NODE TO A SPECIFIED NODE. IT IS USED ONLY TO CHECK FOR         *
*       CONNECTIVITY OF THE NETWORK DUE TO A NODE DELETION.            *
*                                                                      *
*       THE CODE IGNORES THE DIFFERENCES BETWEEN TYMNET-I AND II       *
*       TECHNOLOGIES, I.E. A PATH SUCH AS TYMNET-II NODE,TYMNET-       *
*       I NODE,TYMNET-II NODE IS PERMISSIBLE.                          *
*                                                                      *
************************************************************************

        SUBROUTINE CPATH(NMAX,IBMAX,IHMAX,MHMAX,LMAX,NUMACT,NUMBPS,
     +  ISIXTN,ISPEC,IDOWN,ID0,ICIND,MLIST,MNEXT,MCOST,MLINE,
     +  IDATA,IERR,IDISC)

        INTEGER BASENO,BPTR,HOSTNO,HPTR,HSTAT,HSTATE,HBASES

        DIMENSION NODENO(850),NPTR(850),NSTATE(850),
     +       NTYPE(850),NNEI(850),NEIGH(13600),NTYPS(10),IBASE(500),
     +       BASENO(500),BPTR(500),NHOSTS(500),HOSTNO(750),
     +       HPTR(750),HSTATE(750),HBASES(750),LNODE1(1600),
     +       LNODE2(1600),LSPEED(1600),LGRPS(1600),LSTATE(1600),
     +       LFREQ(15),LCFREQ(15),NBPS(7),BPS(7),
     +       ICONST(7),NTREE(850),LTREE(1600),NACTV(4000)
        DIMENSION NSTAT(850,2),NPEAK(850,2),NODEIO(850,3),LINKO(850,
     +       2),NPASS(10,2),NTNAME(10,3),NTERM(500,2),LINKT(500,2),
     +       IHOST(500,5),HSTAT(750,2),MBASES(5,5),LINNAM(1600,4),
     +       LSTAT(1600,2),LINEIO(1600,3),NNAME(850,2)

        COMMON/NODES/NODENO,NPTR,NNAME,NSTATE,NTYPE,NNEI,
     +         NSTAT,NPEAK,NODEIO,LINKO,NTREE
        COMMON/NMISC/NEIGH,NACTV,BASENO,BPTR,IBASE,
     +         NTERM,LINKT,NHOSTS,IHOST,HOSTNO,HPTR,HSTATE,
     +         HSTAT,HBASES,MBASES
        COMMON/LINES/LINNAM,LNODE1,LNODE2,LSPEED,LGRPS,LSTATE,
     +         LSTAT,LINEIO,LTREE
        COMMON/LMISC/LFREQ,LCFREQ
        COMMON/NUM/NAMAX,IBAMAX,IHAMAX,LAMAX,NDMAX,IBDMAX,IHDMAX,LDMAX,
     +         NCMAX,IBCMAX,IHCMAX,LCMAX
        COMMON/INIT/NBPS,BPS,ICONST,NTYPS,NPASS,NTNAME

        DIMENSION MLIST(1),MCOST(1),MNEXT(1),MLINE(1),IDATA(1)

        IERR=0
C
C  INITIALISE MASTER LIST AND ITS ASSOCIATED ARRAYS
C  BE CAREFUL ABOUT MAPPING BETWEEN NODE NUMBERS AND NUMBER OF NODES
C
        DO 10 I=1,NCMAX
        MLIST(I)=0
        MCOST(I)="3777
        MLINE(I)=0
        MNEXT(I)=0
 10     CONTINUE
C
C  MAKE THE SPECIFIED NODE AS THE ONLY AVAILABLE
C  NODE IN MASTER LIST FOR SELECTION
C
        MLIST(ISPEC)=-ISPEC
        MCOST(ISPEC)=0
C
C  ITERATIVE PROCEDURE BEGINS HERE
C  REMOVE AN ELIGIBLE NODE FROM MASTER LIST
C
 15     DO 20 I=1,NCMAX
        IF (MLIST(I).LT.0) GO TO 25
 20     CONTINUE
C
C  LIST EMPTY HERE
C
        GO TO 150
C
C  ONCE REMOVED, MAKE IT +VE TO DELETE FROM MASTER LIST
C
 25     MLIST(I)=-MLIST(I)
C
C  COST OF GETTING TO DESTINATION
C
        ICOST=MCOST(I)
C
C  NO. OF NEIGHBORS
C
        IND=NPTR(I)
        K=NNEI(IND)
        IF (K.LE.0) GO TO 15
C
C  FIRST, GET STARTING LOC OF NEIGHBORS
C
        ILOC=(IND-1)*ISIXTN+1
C
C  CONSIDER EACH NEIGHBOR AND SEE IF DIRECTION NEEDS TO BE CHANGED
C
        DO 100 J=1,K
C
C  GET LINE POSITION LEADING TO NEIGHBOR
C
        LPOS=NEIGH(ILOC+J-1)
C
C  FIND INDEX OF NEIGHBOR
C
        ITEMP=LNODE1(LPOS)
        CALL SEARCH(NODENO,ITEMP,NCMAX,L)
        IF (L.LE.NCMAX) GO TO 38
C
C  ERROR HERE
C
 36     WRITE(ID0,37) ITEMP
 37     FORMAT(1X,'CAN''T FIND NODE NO. ',I4,' DURING ENUMERATIVE ',
     +  'SEARCH FOR CONNECTIVITY CHECK')
        IERR=1
        RETURN
C
C  KEEP TRACK OF A FLAG TO BE USED IN SPECIAL CHECK FOR MULTIPLE LINES
C
 38     MFLAG=1
        IF (L.NE.I) GO TO 40
        MFLAG=2
        ITEMP=LNODE2(LPOS)
        CALL SEARCH(NODENO,ITEMP,NCMAX,L)
        IF (L.GT.NCMAX) GO TO 36
C
C  L IS NOW THE INDEX OF NEIGHBOR
C
 40     JND=NPTR(L)
        IF (L.EQ.IDOWN) GO TO 100
C
C  CHECK IF BOTH ENDS ARE TYMNET II NODES
C
        IF (NTYPE(IND).NE.9.OR.NTYPE(JND).NE.9) GO TO 55
C
C  THIS PORTION UNTIL STM 55 IS A SPECIAL CHECK FOR MULTIPLE
C  LINES BETWEEN TYMNET II NODES
C
        IF (J.GE.K) GO TO 55
        MCOUNT=1
        IDATA(1)=LPOS
        ITMP=LSPEED(LPOS)
        DO 41 II=1,NUMBPS
        IF (ITMP.EQ.NBPS(II)) GO TO 42
 41     CONTINUE
        GO TO 57
 42     BAND=BPS(II)
C
C  LOOK AT SUBSEQUENT PORTS
C
        DO 45 II=J+1,K
        LPOS1=NEIGH(ILOC+II-1)
        ITEMP1=LNODE1(LPOS1)
        IF (MFLAG.EQ.2) ITEMP1=LNODE2(LPOS1)
        IF (ITEMP1.NE.ITEMP) GO TO 46
C
C  MULTIPLE LINES HERE, KEEP TRACK OF THEIR NUMBER
C
        MCOUNT=MCOUNT+1
        IDATA(MCOUNT)=LPOS1
C
C  IF LINE IS UP, DETERMINE COMBINED BANDWIDTH
C
        IF (LSTATE(LPOS1).EQ.1) GO TO 45
        ITMP=LSPEED(LPOS1)
        DO 43 KK=1,NUMBPS
        IF (ITMP.EQ.NBPS(KK)) GO TO 44
 43     CONTINUE
        GO TO 57
 44     BAND=BAND+BPS(KK)
 45     CONTINUE
C
C  CHECK NO. OF MULTIPLE LINES TO ADVANCE POINTER FOR NEIGHBOR
C
 46     IF (MCOUNT.LE.1) GO TO 55
        J=J+MCOUNT-1
C
C  CHECK METHOD OF PATH SELECTION
C
        ILCOST=1
        IF (ICIND.EQ.2) GO TO 60
C
C  LEAST COST SELECTION BASED ON COMBINED BANDWIDTH
C
        IF (BAND.GE.56.) ILCOST=1
        IF (BAND.GT.50..AND.BAND.LT.56.) ILCOST=2
        IF (BAND.GE.9.6.AND.BAND.LE.50.) ILCOST=5
        IF (BAND.GE.4.8.AND.BAND.LT.9.6) ILCOST=9
        IF (BAND.LE.2.4) ILCOST=19
        GO TO 60
C
C  CHECK METHOD OF PATH SELECTION
C
 55     ILCOST=1
        IF (ICIND.EQ.2) GO TO 60
C
C  LEAST COST SELECTION HERE
C
        ITMP=LSPEED(LPOS)
        DO 56 II=1,NUMBPS
        IF (ITMP.EQ.NBPS(II)) GO TO 59
 56     CONTINUE
C
C  ERROR, INVALID BAUD RATE
 57     WRITE(ID0,58) ITMP,NODENO(I),NODENO(L)
 58     FORMAT(1X,'INVALID BAUD RATE ',A5,' FOR LINE BETWEEN ',I4,
     +  ' AND ',I4)
        IERR=1
        RETURN
C
C  GET COST COEFFICIENT
C
 59     ILCOST=ICONST(II)
C
C  GET NEIGHBOR COST
C
 60     ICOS=MCOST(L)
C
C  SEE IF COST COULD BE IMPROVED
C
        IF (ICOS.LE.ICOST+ILCOST) GO TO 100
C
C  IS NEIGHBOR UP
C
        IF (NSTATE(JND).EQ.1) GO TO 100
C
C  IS THE LINE UP
C
        IF (LSTATE(LPOS).EQ.1) GO TO 100
C
C  ADJUST COST AND DIRECTION OF NEIGHBOR
C  INCLUDE HIM IN THE MASTER LIST
C
        MCOST(L)=ICOST+ILCOST
        MNEXT(L)=I
        MLINE(L)=LPOS
        MLIST(L)=-L
C
 100    CONTINUE
C
C  GO GET ANOTHER NODE FROM MASTER LIST
C
        GO TO 15
C
C  CHECK NOW FOR CONNECTIVITY
C
 150    DO 155 JJ=1,NCMAX
        IF (JJ.EQ.ISPEC.OR.JJ.EQ.IDOWN) GO TO 155
        IF (MNEXT(JJ).EQ.0) GO TO 160
 155    CONTINUE
C
        RETURN
C
 160    IERR=-1
        IDISC=JJ
        RETURN
        END
