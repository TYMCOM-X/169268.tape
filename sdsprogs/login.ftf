
************************************************************************
*                                                                      *
*                        SUBROUTINE:  LOGIN                            *
*                                                                      *
*       THIS SUBROUTINE PROCESSES A LOGIN. IF THE LEAST COST PATH      *
*       BETWEEN EVERY NODE AND THE PRESENT BASE IS NOT YET BUILT,      *
*       THEN AN ENUMERATIVE SEARCH IS PERFORMED TO BUILD IT. OTHER-    *
*       WISE, JUST RETRIEVE THE LABELS FROM A FILE AND BACKTRACK       *
*       TO UPDATE DIFFERENT COUNTERS.                                  *
*                                                                      *
************************************************************************

        SUBROUTINE LOGIN(NMAX,IBMAX,IHMAX,MHMAX,LMAX,NUMACT,NUMBPS,
     +  MAXSC,ISIXTN,IFOUR,MAXLNK,LINMAX,ISTART,IEND,IGN,ID0,INDIC,
     +  ICIND,ITID,NSUP,MLIST,MNEXT,MCOST,MLINE,IDATA,IOUT,IERR)

        INTEGER BASENO,BPTR,HOSTNO,HPTR,HSTAT,HSTATE,HBASES

        DIMENSION NODENO(850),NPTR(850),NSTATE(850),
     +       NTYPE(850),NNEI(850),NEIGH(13600),NTYPS(10),IBASE(500),
     +       BASENO(500),BPTR(500),NHOSTS(500),HOSTNO(750),
     +       HPTR(750),HSTATE(750),HBASES(750),LNODE1(1600),
     +       LNODE2(1600),LSPEED(1600),LGRPS(1600),LSTATE(1600),
     +       LFREQ(15),LCFREQ(15),NBPS(7),BPS(7),
     +       ICONST(7),NTREE(850),LTREE(1600),NACTV(4000)
        DIMENSION NSTAT(850,2),NPEAK(850,2),NODEIO(850,3),LINKO(850,
     +       2),NPASS(10,2),NTNAME(10,3),NTERM(500,2),LINKT(500,2),
     +       IHOST(500,5),HSTAT(750,2),MBASES(5,5),LINNAM(1600,4),
     +       LSTAT(1600,2),LINEIO(1600,3),NNAME(850,2)

        COMMON/NODES/NODENO,NPTR,NNAME,NSTATE,NTYPE,NNEI,
     +         NSTAT,NPEAK,NODEIO,LINKO,NTREE
        COMMON/NMISC/NEIGH,NACTV,BASENO,BPTR,IBASE,
     +         NTERM,LINKT,NHOSTS,IHOST,HOSTNO,HPTR,HSTATE,
     +         HSTAT,HBASES,MBASES
        COMMON/LINES/LINNAM,LNODE1,LNODE2,LSPEED,LGRPS,LSTATE,
     +         LSTAT,LINEIO,LTREE
        COMMON/LMISC/LFREQ,LCFREQ
        COMMON/NUM/NAMAX,IBAMAX,IHAMAX,LAMAX,NDMAX,IBDMAX,IHDMAX,LDMAX,
     +         NCMAX,IBCMAX,IHCMAX,LCMAX
        COMMON/INIT/NBPS,BPS,ICONST,NTYPS,NPASS,NTNAME
        COMMON/ISIM/NACIR,NACLIN,NTCIR,NTLIN,ISUC,IFAIL,NSELF,KNACIR,
     +         KNTCIR,KNACLI,KNTLIN,KNSELF,KNTCOS,KNACOS

        DIMENSION MLIST(1),MCOST(1),MNEXT(1),MLINE(1),IDATA(1),NSUP(1)

        IERR=0
C
C  CHECK ISTART AGAINST ARRAY HOSTNO
C
        CALL SEARCH(HOSTNO,ISTART,IHCMAX,IND)
        IF (IND.LE.IHCMAX) GO TO 18
C
C  ERROR, NO SUCH HOST NO.
C
        WRITE(ID0,14) ISTART
 14     FORMAT(1X,'THERE IS NO HOST WITH NUMBER ',I4)
 15     WRITE(ID0,17) IEND,ISTART,INDIC
 17     FORMAT(1X,'REJECTED NODE ',I4,' TO HOST ',I4,' SESSION ',I6,/)
        IERR=-1
        RETURN
C
C  SEE IF HOST IS DOWN
C
 18     IND=HPTR(IND)
        IF (HSTATE(IND).EQ.1) GO TO 80
C
C  GET BASE NO. FOR HOST
C
        IORI=HBASES(IND)
C
C  CHECK IF HOST IS CONNECTED TO MULTIPLE BASES
C
        IF (IORI.NE.-1) GO TO 25
C
C  IF SO, LOOK AT ARRAY MBASES
C
        DO 19 I=1,MHMAX
        ITEMP=MBASES(I,1)
        IF (ITEMP.EQ.ISTART) GO TO 21
 19     CONTINUE
C
C  ERROR HERE, CAN'T FIND THIS MULTI-BASE HOST
C
        WRITE(ID0,20) ISTART
 20     FORMAT(1X,'CAN''T FIND MULTI-BASE HOST ',I4)
        GO TO 94
C
C  TRY TO RETRIEVE THE FIRST BASE WHICH IS UP
C
 21     ITEMP=MBASES(I,2)
        DO 22 J=1,ITEMP
        IORI=MBASES(I,2+J)
        CALL SEARCH(NODENO,IORI,NCMAX,IND1)
        IF (IND1.GT.NCMAX) GO TO 23
        IF (NSTATE(NPTR(IND1)).EQ.0) GO TO 26
 22     CONTINUE
        GO TO 92
C
C  ERROR HERE, MULTIPLE BASES ARE SCREWED UP
C
 23     WRITE(ID0,24) ISTART
 24     FORMAT(1X,'MULTIPLE BASES FOR HOST ',I4,' ARE SCREWED UP')
        GO TO 94
C
C  CHECK TO SEE IF IORI IS DOWN, IF SO NO NEED FOR PATH SELECTION
C
 25     CALL SEARCH(NODENO,IORI,NCMAX,IND1)
        IF (IND1.GT.NCMAX) GO TO 86
        IF (NSTATE(NPTR(IND1)).EQ.1) GO TO 82
C
C  SAME HERE FOR IEND
C
 26     CALL SEARCH(NODENO,IEND,NCMAX,IND2)
        IF (IND2.GT.NCMAX) GO TO 90
        IF (NSTATE(NPTR(IND2)).EQ.1) GO TO 84
C
C  IF ORIGNODE AND TERMNODE ARE SAME, NO NEED FOR PATH SELECTION
C
        IF (IND1.NE.IND2) GO TO 27
        MCOST(IND2)=0
        MLINE(IND2)=0
        MNEXT(IND2)=IND1
        NSELF=NSELF+1
        KNSELF=KNSELF+1
        ICIRCO=0
        CALL SEARCH(BASENO,IORI,IBCMAX,JNDX)
        IF (JNDX.GT.IBCMAX) GO TO 88
        JNDX=BPTR(JNDX)
        GO TO 140
C
C  CHECK IF ALL PATHS FROM THIS BASE HAVE BEEN BUILT
C
 27     CALL SEARCH(BASENO,IORI,IBCMAX,JNDX)
        IF (JNDX.GT.IBCMAX) GO TO 88
        JNDX=BPTR(JNDX)
        IF (IBASE(JNDX).EQ.0) GO TO 28
C
C  IF SO, GET LABELS MNEXT, MLINE AND MCOST FROM THE FILE ISESFI
C
        READ(25#JNDX) (MNEXT(I),I=1,NCMAX),(MLINE(I),I=1,NCMAX),
     +  (MCOST(I),I=1,NCMAX)
        GO TO 140
C
C  INITIALISE MASTER LIST AND ITS ASSOCIATED ARRAYS
C  BE CAREFUL ABOUT MAPPING BETWEEN NODE NUMBERS AND NUMBER OF NODES
C
 28     DO 30 I=1,NCMAX
        MLIST(I)=0
        MCOST(I)="3777
        MLINE(I)=0
        MNEXT(I)=0
 30     CONTINUE
C
C  MAKE IORI AS THE ONLY AVAILABLE NODE IN MASTER LIST FOR SELECTION
C
        MLIST(IND1)=-IND1
        MCOST(IND1)=0
C
C  ITERATIVE PROCEDURE BEGINS HERE
C  REMOVE AN ELIGIBLE NODE FROM MASTER LIST
C
 35     DO 40 I=1,NCMAX
        IF (MLIST(I).LT.0) GO TO 45
 40     CONTINUE
C
C  LIST EMPTY HERE
C
        GO TO 77
C
C  ONCE REMOVED, MAKE IT +VE TO DELETE FROM MASTER LIST
C
 45     MLIST(I)=-MLIST(I)
C
C  COST OF GETTING TO DESTINATION
C
        ICOST=MCOST(I)
C
C  NO. OF NEIGHBORS
C
        INDEX=NPTR(I)
        K=NNEI(INDEX)
        IF (K.LE.0) GO TO 35
C
C  FIRST, GET STARTING LOC OF NEIGHBORS
C
        ILOC=(INDEX-1)*ISIXTN+1
C
C  CONSIDER EACH NEIGHBOR AND SEE IF DIRECTION NEEDS TO BE CHANGED
C
        DO 75 J=1,K
C
C  GET LINE POSITION LEADING TO NEIGHBOR
C
        LPOS=NEIGH(ILOC+J-1)
C
C  FIND INDEX OF NEIGHBOR
C
        ITEMP=LNODE1(LPOS)
        CALL SEARCH(NODENO,ITEMP,NCMAX,L)
        IF (L.LE.NCMAX) GO TO 48
C
C  ERROR HERE
C
 46     WRITE(ID0,47) ITEMP
 47     FORMAT(1X,'CAN''T FIND NODE NO. ',I4,' DURING ENUMERATIVE ',
     +  'SEARCH FOR LOGIN')
        IERR=1
        RETURN
C
C  KEEP TRACK OF A FLAG TO BE USED IN SPECIAL CHECK FOR MULTIPLE LINES
C
 48     MFLAG=1
        IF (L.NE.I) GO TO 50
        MFLAG=2
        ITEMP=LNODE2(LPOS)
        CALL SEARCH(NODENO,ITEMP,NCMAX,L)
        IF (L.GT.NCMAX) GO TO 46
C
C  L IS NOW THE INDEX OF NEIGHBOR
C
 50     JND=NPTR(L)
C
C  DO NOT ALLOW SUP NODES AS PASSTHROUGHS
C
        DO 51 KK=1,IFOUR
        IF (L.EQ.NSUP(KK)) GO TO 75
 51     CONTINUE
C
C  CHECK IF BOTH ENDS ARE TYMNET II NODES
C
        IF (NTYPE(INDEX).NE.9.OR.NTYPE(JND).NE.9) GO TO 65
C
C  THIS PORTION UNTIL STM 65 IS A SPECIAL CHECK FOR MULTIPLE
C  LINES BETWEEN TYMNET II NODES
C
        IF (J.GE.K) GO TO 65
        MCOUNT=1
        IDATA(1)=LPOS
        ITMP=LSPEED(LPOS)
        DO 53 II=1,NUMBPS
        IF (ITMP.EQ.NBPS(II)) GO TO 54
 53     CONTINUE
        GO TO 67
 54     BAND=BPS(II)
C
C  LOOK AT SUBSEQUENT PORTS
C
        DO 57 II=J+1,K
        LPOS1=NEIGH(ILOC+II-1)
        ITEMP1=LNODE1(LPOS1)
        IF (MFLAG.EQ.2) ITEMP1=LNODE2(LPOS1)
        IF (ITEMP1.NE.ITEMP) GO TO 58
C
C  MULTIPLE LINES HERE, KEEP TRACK OF THEIR NUMBER
C
        MCOUNT=MCOUNT+1
        IDATA(MCOUNT)=LPOS1
C
C  IF LINE IS UP, DETERMINE COMBINED BANDWIDTH
C
        IF (LSTATE(LPOS1).EQ.1) GO TO 57
        ITMP=LSPEED(LPOS1)
        DO 55 KK=1,NUMBPS
        IF (ITMP.EQ.NBPS(KK)) GO TO 56
 55     CONTINUE
        GO TO 67
 56     BAND=BAND+BPS(KK)
 57     CONTINUE
C
C  CHECK NO. OF MULTIPLE LINES TO ADVANCE POINTER FOR NEIGHBOR
C
 58     IF (MCOUNT.LE.1) GO TO 65
        J=J+MCOUNT-1
C
C  CHECK METHOD OF PATH SELECTION
C
        ILCOST=1
        IF (ICIND.EQ.2) GO TO 70
C
C  LEAST COST SELECTION BASED ON COMBINED BANDWIDTH
C
        IF (BAND.GE.56.) ILCOST=1
        IF (BAND.GT.50..AND.BAND.LT.56.) ILCOST=2
        IF (BAND.GE.9.6.AND.BAND.LE.50.) ILCOST=5
        IF (BAND.GE.4.8.AND.BAND.LT.9.6) ILCOST=9
        IF (BAND.LE.2.4) ILCOST=19
        GO TO 70
C
C  CHECK METHOD OF PATH SELECTION
C
 65     ILCOST=1
        IF (ICIND.EQ.2) GO TO 70
C
C  LEAST COST SELECTION HERE
C
        ITMP=LSPEED(LPOS)
        DO 66 II=1,NUMBPS
        IF (ITMP.EQ.NBPS(II)) GO TO 69
 66     CONTINUE
C
C  ERROR, INVALID BAUD RATE
C
 67     WRITE(ID0,68) ITMP,NODENO(I),NODENO(L)
 68     FORMAT(1X,'INVALID BAUD RATE ',A5,' FOR LINE BETWEEN ',I4,
     +  ' AND ',I4)
        IERR=1
        RETURN
C
C  GET COST COEFFICIENT
C
 69     ILCOST=ICONST(II)
C
C  GET NEIGHBOR COST
C
 70     ICOS=MCOST(L)
C
C  SEE IF COST COULD BE IMPROVED
C
        IF (ICOS.LE.ICOST+ILCOST) GO TO 75
C
C  IS NEIGHBOR UP
C
        IF (NSTATE(JND).EQ.1) GO TO 75
C
C  IS THE LINE UP
C
        IF (LSTATE(LPOS).EQ.1) GO TO 75
C
C  ADJUST COST AND DIRECTION OF NEIGHBOR
C  INCLUDE HIM IN THE MASTER LIST
C
        MCOST(L)=ICOST+ILCOST
        MNEXT(L)=I
        MLINE(L)=LPOS
        MLIST(L)=-L
C
 75     CONTINUE
C
C  GO GET ANOTHER NODE FROM MASTER LIST
C
        GO TO 35
C
C  WRITE OUT LABELS MNEXT, MLINE AND MCOST TO FILE ISESFI
C
 77     WRITE(25#JNDX) (MNEXT(I),I=1,NCMAX),(MLINE(I),I=1,NCMAX),
     +  (MCOST(I),I=1,NCMAX)
        IBASE(JNDX)=1
        GO TO 140
C
C  ERROR, HOST DOWN
C
 80     WRITE(ID0,81) ISTART
 81     FORMAT(1X,'HOST ',I4,' IS DOWN')
        GO TO 15
C
C  ERROR, TERMNODE DOWN
C
 82     WRITE(ID0,83) IORI
 83     FORMAT(1X,'TERMINATING NODE ',I4,' IS DOWN')
        GO TO 15
C
C  ERROR, ORIGNODE DOWN
C
 84     WRITE(ID0,85) IEND
 85     FORMAT(1X,'ORIGINATING NODE ',I4,' IS DOWN')
        GO TO 15
C
C  ERROR, CAN'T FIND BASE
C
 86     WRITE(ID0,87) ISTART
 87     FORMAT(1X,'CAN''T FIND BASE FOR HOST ',I4)
        GO TO 94
C
C  ERROR, ARRAY BASENO IS SCREWED UP
C
 88     WRITE(ID0,89) IORI
 89     FORMAT(1X,'CAN''T FIND BASE NO. ',I4)
        GO TO 94
C
C  ERROR, CAN'T FIND IEND
C
 90     WRITE(ID0,91) IEND
 91     FORMAT(1X,'CAN''T FIND ORIGINATING NODE ',I4)
        GO TO 15
C
C  ERROR, CAN'T FIND ONE BASE UP FOR MULTI-BASE HOST
C
 92     WRITE(ID0,93) IEND
 93     FORMAT(1X,'CAN''T FIND ONE BASE UP FOR MULTI-BASE HOST ',I4)
        GO TO 15
C
C  ERROR, SOMETHING GOES WRONG
C
 94     IERR=1
        RETURN
C
C  UPDATE DIFFERENT COUNTERS EXCEPT FOR CONNECT MINS, ICHARS
C  AND OCHARS WHICH WILL BE UPDATED AT THE LOGOUT TIME
C
 140    ITEMP=MAXLNK*2+3
        DO 142 KK=1,ITEMP
        IDATA(KK)=0
 142    CONTINUE
        ITMP1=MAXLNK*3
        ITMP2=MAXLNK*5
        DO 143 KK=ITMP1,ITMP2
        IDATA(KK)=0
 143    CONTINUE
        JND2=NPTR(IND2)
C
C  FIND OPEN SPOT IN ACTIVE CIRCUITS ARRAY
C
        IF (MOD(INDIC,2).EQ.0) GO TO 146
        DO 144 KK=1,MAXSC
        IF (NACTV(KK).EQ.0) GO TO 147
 144    CONTINUE
C
C  ERROR, LIMIT MAXSC EXCEEDED
C
        WRITE(ID0,145) MAXSC
 145    FORMAT(1X,'MAX NO. OF ',I4,' ACTIVE CIRCUITS IS EXCEEDED')
        IERR=1
        RETURN
C
 146    DO 141 KK=MAXSC,1,-1
        IF (NACTV(KK).EQ.0) GO TO 147
 141    CONTINUE
C
        WRITE(ID0,145) MAXSC
        IERR=1
        RETURN
C
C  SET INITIAL NO. OF LINKS
C
 147    KLINKS=0
C
C  ZERO OUT INITIAL COST OF CIRCUIT
C
        ICIRCO=0
C
C  ZERO OUT FLAG FOR LINE OUT OF CHANNELS OR NODE OUT OF PASSTHRU
C
        IOUT=0
C
C  BACKTRACKING OF PATH
C
        I=IND2
 148    J=MLINE(I)
        K=MNEXT(I)
        L=MCOST(I)
        IF (K.NE.IND2) GO TO 150
        IDATA(2)=NODENO(I)
        IDATA(3)=J
        IDATA(4)=NODENO(K)
        GO TO 165
 150    KLINKS=KLINKS+1
        IDATA(2*KLINKS)=NODENO(I)
        IDATA(2*KLINKS+1)=J
        IDATA(2*KLINKS+2)=NODENO(K)
        ICIRCO=ICIRCO+L
C
C  SEE IF LINE HAS CAPACITY TO HANDLE ANOTHER CIRCUIT
C
        IF (IGN.EQ.1) GO TO 153
        ITMP=LGRPS(J)*16-LTREE(J)
        IF (ITMP.LE.0) GO TO 195
        IF (LSTAT(J,1).LT.ITMP) GO TO 153
C
C  OTHERWISE SET FLAG FOR OUT OF CHANNELS AND UNDO ALL UPDATINGS
C
        IOUT=1
        LSTAT(J,1)=-LSTAT(J,1)
        GO TO 185
C
C  ADJUST LINE CAPACITY HERE
C
 153    LSTAT(J,1)=LSTAT(J,1)+1
        IF (LSTAT(J,1).LE.LSTAT(J,2)) GO TO 154
        IDATA(ITMP1+KLINKS-1)=LSTAT(J,2)
        LSTAT(J,2)=LSTAT(J,1)
C
C  CHECK PASSTHRU LIMIT FOR NODE
C
 154    IF (K.EQ.IND1) GO TO 165
        K1=NPTR(K)
        IF (IGN.EQ.1) GO TO 160
        ITMP=NTYPE(K1)
        DO 155 II=1,NUMACT
        IF (ITMP.EQ.NTYPS(II)) GO TO 157
 155    CONTINUE
C
C  ERROR, INVALID NODE TYPE
C
        WRITE(ID0,156) ITMP,NODENO(K)
 156    FORMAT(1X,'INVALID NODE TYPE ',I3,' ON NODE ',I4)
        IERR=1
        RETURN
C
C  GET MAX PASSTHRU FOR NODE
C
 157    ITMP=NPASS(II,1)
        IF (NSTAT(K1,2).LT.ITMP) GO TO 160
C
C  SET FLAG FOR OUT OF PASSTHRU AND UNDO ALL UPDATINGS SO FAR
C
        IOUT=1
        NSTAT(K1,2)=-NSTAT(K1,2)
        GO TO 185
C
C  ADJUST NODE PASSTHRU
C
 160    NSTAT(K1,2)=NSTAT(K1,2)+1
        IF (NSTAT(K1,2).LE.NPEAK(K1,2)) GO TO 161
        IDATA(ITMP1+KLINKS)=NPEAK(K1,2)
        NPEAK(K1,2)=NSTAT(K1,2)
C
C  GO GET NEXT NODE IN THE PATH
C
 161    I=K
        GO TO 148
C
C  STORE NO. OF LINKS AND TERMINATING HOST
C
 165    IDATA(1)=KLINKS
        IF (KLINKS) 166,166,167
 166    IDATA(5)=ISTART
        GO TO 170
 167    IDATA(2*KLINKS+3)=ISTART
C
C  CHECK THE NO. OF LINKS
C
        IF (KLINKS.LE.MAXLNK) GO TO 170
        WRITE(ID0,168) INDIC,MAXLNK
 168    FORMAT(1X,'NO. OF LINKS FOR SESSION ',I6,' EXCEEDS MAX OF ',I2)
        IERR=1
        RETURN
C
C  EVERYTHING IS READY HERE TO WRITE OUT TO PATH FILE
C
 170    WRITE(20#KK,171) (IDATA(JJ),JJ=1,ITEMP)
 171    FORMAT(I2,32(1X,I4))
C
C  ADJUST NOW ORIGINATIONS AND PEAK ORIGINATIONS IF NECESSARY
C
        NSTAT(JND2,1)=NSTAT(JND2,1)+1
        IF (NSTAT(JND2,1).LE.NPEAK(JND2,1)) GO TO 172
        NPEAK(JND2,1)=NSTAT(JND2,1)
C
C  SET TERMINATIONS AND PEAK TERMINATIONS FOR HOST
C
 172    HSTAT(IND,1)=HSTAT(IND,1)+1
        IF (HSTAT(IND,1).LE.HSTAT(IND,2)) GO TO 173
        HSTAT(IND,2)=HSTAT(IND,1)
C
C  SET TERMINATIONS AND PEAK TERMINATIONS FOR BASE
C
 173    NTERM(JNDX,1)=NTERM(JNDX,1)+1
        IF (NTERM(JNDX,1).LE.NTERM(JNDX,2)) GO TO 175
        NTERM(JNDX,2)=NTERM(JNDX,1)
C
C  STORE THE SESSION NO.
C
 175    NACTV(KK)=INDIC
C
C  ADJUST CIRCUIT DATA
C
        NTCIR=NTCIR+1
        KNTCIR=KNTCIR+1
        NTLIN=NTLIN+KLINKS
        KNTLIN=KNTLIN+KLINKS
        KNTCOS=KNTCOS+ICIRCO
C
C  ADJUST LINKS DATA
C
        LINKO(JND2,1)=LINKO(JND2,1)+1
        LINKO(JND2,2)=LINKO(JND2,2)+KLINKS
        LINKT(JNDX,1)=LINKT(JNDX,1)+1
        LINKT(JNDX,2)=LINKT(JNDX,2)+KLINKS
C
C  ADJUST AUX CIRC DATA
C
        IF (ITID.NE.0) GO TO 176
        NACIR=NACIR+1
        KNACIR=KNACIR+1
        NACLIN=NACLIN+KLINKS
        KNACLI=KNACLI+KLINKS
        KNACOS=KNACOS+ICIRCO
C
C  SET FREQUENCIES OK LINKS
C
 176    IF (KLINKS.LE.0) RETURN
        LFREQ(KLINKS)=LFREQ(KLINKS)+1
        LCFREQ(KLINKS)=LCFREQ(KLINKS)+1
C
C  REPORT LINKS IF GT MAX SPECIFIED
C
        IF (KLINKS.LE.LINMAX) RETURN
        WRITE(ID0,178) IDATA(2)
 178    FORMAT(1X,I4,'-',$)
        DO 180 II=1,KLINKS
        WRITE(ID0,179) IDATA(2*II+2)
 179    FORMAT(1H+,I4,'-',$)
 180    CONTINUE
        WRITE(ID0,181) ISTART,ICIRCO
 181    FORMAT(1H+,'** ',I4,' COST =',I3,/)
        RETURN
C
C  UNDO HERE ALL UPDATINGS MADE SO FAR
C
 185    I=IND2
        KLINKS=0
 186    J=MLINE(I)
        K=MNEXT(I)
        K1=NPTR(K)
        KLINKS=KLINKS+1
        IF (LSTAT(J,1).LE.0) GO TO 192
C
C  DECREMENT NO. OF CHANNELS FOR LINE
C
        LSTAT(J,1)=LSTAT(J,1)-1
        IF (IDATA(ITMP1+KLINKS-1).LE.0) GO TO 188
        LSTAT(J,2)=IDATA(ITMP1+KLINKS-1)
C
C  DECREMENT NO. OF PASSTHRU FOR NODE
C
 188    IF (NSTAT(K1,2).LE.0) GO TO 193
        NSTAT(K1,2)=NSTAT(K1,2)-1
        IF (IDATA(ITMP1+KLINKS).LE.0) GO TO 190
        NPEAK(K1,2)=IDATA(ITMP1+KLINKS)
C
C  GO GET NEXT NODE IN THE PATH
C
 190    I=K
        GO TO 186
C
 192    LSTAT(J,1)=-LSTAT(J,1)
        RETURN
 193    NSTAT(K1,2)=-NSTAT(K1,2)
        RETURN
C
C  ERROR HERE, NO MORE USER CHANNELS FOR LINE
C
 195    WRITE(ID0,196) LNODE1(J),LNODE2(J)
 196    FORMAT(1X,'NO MORE USER CHANNELS FOR LINE BETWEEN NODE ',I4,
     +  ' AND ',I4)
        IERR=1
        RETURN
C
        END
