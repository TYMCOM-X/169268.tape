

*       ********** MSGCRE.F4 VER.1 J.JOELS AUGUST,1977 **********
*               THIS PROGRAM CONVERTS VARIABLE LENGTH MESSAGE
*               SWITCHER ACCOUNTING RECORDS TO FIXED LENGTH
*               RECORDS. IT ALSO DOES VARIOUS CHECKS FOR VALID
*               RECORDS AND COMPUTES TOTAL NUMBER OF CONNECT
*               MINUTES.

        INTEGER ALPHA(6),CHAR,FMT(12),DATA(19),DATE,FLENAM(2)
     X  ,OUTNAM(2),SCR(6),ERRNAM(2),NDAY,SCR2(4),MONTBL(12),L(2)
     X  ,BIGNAM(2),BIGCNT
       IPNT1=0
       IPNT2=0
        ICOUNT=0
        BIGCNT=0


        DATA MONTBL/31,28,31,30,31,30,31,31,30,31,30,31/

*       ** OPEN THE CONTROL FILE AND READ THE DAY TO PROCESS
       OPEN (21,'MSG.CTL',INPUT,ERR=690)
       READ (21,100) DATE
       CLOSE (21)

*      BUILD THE INPUT AND OUTPUT FILE NAMES

100    FORMAT (I6)
110    FORMAT (I6)
111    FORMAT (6I1)
112    FORMAT (I1)
113    FORMAT (6I1,4H.SES)
114    FORMAT (2HMS,4I1,1H.,2I1)
115     FORMAT (2HMS,4I1,4H.ERR)
116     FORMAT (2I2)
117     FORMAT (4I1)
118     FORMAT (2HMS,4I1,4H.BIG)

       ENCODE (6,110,L)DATE
       DECODE (6,111,L) (SCR(I),I=1,6)
       ENCODE (10,113,FLENAM) (SCR(I),I=1,6)
       ENCODE (9,114,OUTNAM)(SCR(I),I=1,6)

*      ARRAY: FLENAM  NOW CONTAINS NAME OF INPUT FILE
*      ARRAY: OUTNAM  NOW CONTAINS NAME OF OUTPUT FILE

*       ** BUILD THE ERROR FILE NAME. SINCE THE BILLING MONTH FOR THE
*       ** MESSAGE SWITCHER IS FROM THE 16TH TO THE 15TH, AND THUS
*       ** CROSSES A MONTH BOUNDARY, THE MONTHY ERROR FILE IS GIVEN
*       ** THE MONTH NUMBER OF THE SECOND HALF OF THE BILLING PERIOD.
*       ** (I.E. IF THE BILLING PERIOD IS FROM OCT 16TH- NOV. 15TH
*       ** THEN THE ERROR FILE WOULD BE MS7711.ERR) THIS NAMING PRO-
*       ** CEDURE IS FOLLOWED THROUGHOUT THE MESSAGE SWITCHER BILLING
*       ** SYSTEM

*       ** PLACE THE YEAR,MONTH,AND DAY TO PROCESS INTO VARIABLES
*          IYR,IMO,IDAY RESPECTIVELY.

        IYR=SCR(1)*10+SCR(2)
        IMO=SCR(3)*10+SCR(4)
        IDAY=SCR(5)*10+SCR(6)
        IYR2=IYR
        IMO2=IMO

*       ** IF DAY TO PROCESS IS LESS THAN 16 THEN THE DAY IS
*          IN THE 2ND HALF OF THE BILLING PERIOD. SO, USE THE
*          CURRENT MONTH TO BUILD THE ERROR FILE NAME.
        IF (IDAY.LT.16) GO TO 120

*       ** IF DAY TO PROCESS IS.GE. 16 THEN THE DAY IS IN THE
*          1ST HALF OF THE BILLING PERIOD. SO, INCREMENT THE CURRENT
*          MONTH AND USE THAT NUMBER TO BUILD THE ERROR FILE NAME
        IMO2=IMO2+1
        IF (IMO2.LE.12) GO TO 120
        IMO2=1
        IYR2=IYR2+1

*       ** PLACE THE ERROR FILE NAME INTO ARRAY: ERRNAM
120     ENCODE (4,116,L)IYR2,IMO2
        DECODE (4,117,L)(SCR2(I),I=1,4)
        ENCODE (10,115,ERRNAM) (SCR2(I),I=1,4)
        ENCODE (10,118,BIGNAM) (SCR2(I),I=1,4)

*       ** OPEN THE VARIOUS INPUT AND OUTPUT FILES
       OPEN (21,FLENAM,INPUT,ERR=670)
       OPEN (22,OUTNAM,OUTPUT)
        OPEN (23,ERRNAM,RANDOUT)
        OPEN (24,BIGNAM,RANDOUT)

*       ** INITIALIZE ARRAYS: DATA AND ALPHA TO BLANKS
150     DO 152 I=1,6
        DATA(I)='     '
        ALPHA(I)='     '
152     CONTINUE

*       ** READ THE 1ST 30 CHARACTERS OF THE RECORD INTO ARRAY: ALPHA.
*          SINCE THE MAX LENGTH OF THE ACCOUNT CODE AND THE USER CODE
*          IS 12, AND EACH FIELD IS PRECEEDED BY A BLANK, THEN
*          THE MAX # OF CHARACTERS YOU HAVE TO READ TO INSURE READING
*          THE ACCOUNT CODE AND USER CODE IS 26 (1BLANK+12+1BLANK
*          +12). MIGHT AS WELL, JUST READ 6 WORDS OR 30 CHARACTERS.

       READ (21,160,END=600) (ALPHA(I),I=1,6)
160    FORMAT (1X,6A5)

*       ** INCREMENT THE RECORD COUNTER
       ICOUNT=ICOUNT+1

*       ** SCAN THE ARRAY: ALPHA - DISREGARDING THE 1ST BLANK (IT PRE-
*          CEEDS THE ACCOUNT CODE). USE VARIABLES IPNT1 AND 
*          IPNT2 TO POINT TO THE NEXT TWO BLANKS WHICH SEPARATE THE
*          ACCOUNT CODE FROM THE USER CODE AND THE USER CODE FROM THE 
*          STARTTIME.

       DO 300 I=1,26
       CALL RTC(CHAR,ALPHA,I)
       IF (CHAR.NE.' ') GO TO 300
       IF (IPNT1.NE.0) GO TO 200
       IPNT1=I
       GO TO 300
200    IPNT2=I
       GO TO 310
300    CONTINUE

*       ** USING 'IPNT1' BUILD THE ACCOUNT CODE INTO THE
*          1ST 3 WORDS OF THE ARRAY: DATA
310    K=0
       DO 400 I=1,3
       DO 400 J=1,5
       K=K+1
       CALL RTC(CHAR,ALPHA,K)
       CALL STC(CHAR,DATA(I),J)
       IF (K.EQ.IPNT1-1) GO TO 410
400    CONTINUE

*       ** USING 'IPNT2' BUILD THE USER CODE INTO WORDS 4-6 OF
*          ARRAY: DATA
410    K=K+1
       DO 450 I=4,6
       DO 450 J=1,5
       K=K+1
       CALL RTC (CHAR,ALPHA,K)
       CALL STC (CHAR,DATA(I),J)
       IF (K.EQ.IPNT2-1) GO TO 460
450    CONTINUE

*       ** INCREMENT 'IPNT2' SO THAT IT NOW POINTS TO THE
*          STARTING LOCATION OF FIELD: STARTTIME
460     IPNT2=IPNT2+1

*       ** USE 'IPNT2' TO CREATE A FORMAT STATEMENT THAT WILL RE-
*          READ THE CURRENT RECORD STARTING WITH FIELD: STARTTIME
       ENCODE (56,470,FMT)IPNT2
470    FORMAT (1H(,I2,2HX,,45H4(I6,1X),2(I7,1X,I5,1X),I8,1X,I2,1X,
     XI4,1X,2I))

*       ** REREAD THE RECORD- PLACING THE REMAINING FIELDS INTO
*          ARRAY: DATA
       REREAD FMT,(DATA(I),I=7,19)

*       ** USE SUBROUTINE: TIME  TO CONVERT STARTTIME AND 
*          ENDTIME FROM FORMAT: HHMMSS TO FORMAT: HHMM
        CALL TIME(DATA(7),HR,AMIN)
        STIME=HR*60+AMIN
        CALL TIME(DATA(9),HR,AMIN)
        ETIME=HR*60+AMIN

*       ***** CHECK FOR INVALID RECORDS *****

*       ** IF THE MESSAGE SWITCHER IS BROUGHT UP AND WORK DONE BEFORE
*          THE OPERATOR SET THE DATE AND TIME, THEN SESSION RECORDS ARE
*          GENERATED WITH ONLY THE YEAR AS THE STARTDATE (I.E. 770000)
*          OUTPUT THESE RECORDS TO THE ERROR FILE.
        ID=MOD(DATA(8),10000)
        IF (ID.GT.0000) GO TO 471
        TYPE 473,(ERRNAM(I),I=1,2)
473     FORMAT(1X,'ERROR: BAD STARTDATE!! SEE FILE ',2A5,' FOR DETAILS')
        CALL ERROR(DATA,IPNT1,IPNT2)
        GO TO 150

*       ** IF STARTDATE GT ENDDATE THEN OUTPUT RECORD TO
*          ERROR FILE
471     IF (DATA(8).LT.DATA(10)) GO TO 480
        IF (DATA(8).EQ.DATA(10)) GO TO 475
        TYPE 472,ERRNAM(1),ERRNAM(2)
472     FORMAT (1X,'ERROR: STARTDATE GT ENDDATE!!  SEE FILE
     X: ',2A5,' FOR DETAILS')
        CALL ERROR(DATA,IPNT1,IPNT2)
        GO TO 150

*       ** IF STARTDATE EQ ENDDATE, BUT STARTTIME GT ENDTIME, THEN
*       ** OUTPUT RECORD TO ERROR FILE
475     IF (DATA(7).LE.DATA(9)) GO TO 477
        TYPE 476
476     FORMAT (1X,'ERROR: STARTIME GT ENDTIME FOR SAME DAY!! SEE
     X ERROR FILE')
        CALL ERROR(DATA,IPNT1,IPNT2)
        GO TO 150

*       ** CALCULATE TOTAL CONNECT MINUTES
477     TOTMIN=ETIME-STIME
        GO TO 490

*       ** IF STARTDATE NE ENDDATE THEN TOTAL CONNECT MINUTES =
*          (NUMBER OF MINUTES IN 1ST DAY) + (1440*# OF DAYS BETWEEN 1ST
*          AND LAST DAY) + (# OF MINUTES IN LAST DAY)
*          (NOTE: THERE ARE 1440 MINUTES IN ONE DAY)

*       ** USE VARIABLE: NDAY - TO HOLD THE NUMBER OF DAYS BETWEEN THE
*          STARTDATE AND ENDDATE. SET NDAY TO WHAT IT SHOULD BE IF THE
*          STARTDATE AND ENDDATE ARE WITHIN THE SAME MONTH.
480     NDAY=DATA(10)-DATA(8)-1

*       ** EXTRACT THE STARTING MONTH AND DAY FROM THE STARTDATE
        ID=DATA(8)/100
        IMO1=MOD(ID,100)
        IDAY1=MOD(DATA(8),100)

*       ** EXTRACT THE ENDING MONTH AND DAY FROM THE ENDDATE
        ID=DATA(10)/100
        IMO2=MOD(ID,100)
        IDAY2=MOD(DATA(10),100)


*       ** IF STARTDATE AND ENDDATE ARE NOT WITHIN THE SAME MONTH
*          THE RECALCULATE NDAY
482     IF (IMO1.EQ.IMO2) GO TO 487
        IN=MONTBL(IMO1)
485     NDAY=(IN-IDAY1)+(IDAY2-1)

*       ** CALCULATE TOTAL CONNECT MINUTES
487     TIME1=1440-STIME
        TIME2=1440*(NDAY)
        TOTMIN=TIME1+TIME2+ETIME

*       ** IF CONNECT TIME IS GT 24 HRS, MAKE A NOTE OF THIS
*          SESSION IN THE '.BIG' FILE.

490     IF (TOTMIN.LE.1440) GO TO 495

        JS=SIZE(24)
        JS=JS+1
        WRITE (24#JS,500)(DATA(I),I=1,15),TOTMIN,(DATA(I),I=16,19)
        BIGCNT=BIGCNT+1

*       ** IF ORIGNODE = 7171, THEN THIS SESSION WAS A DIAL-OUT
*          CALL MADE BY THE MESSAGE SWITCH. SUBSTITUTE NODE # 1777
*          FOR 7171 AND SUBSTITUTE 77 FOR THE TERMINAL ID AND
*          THE PORT NUMBER.  THIS WILL ALLOW THE CALL TO BE CODED
*          AS A WATS CALL.

495     IF (DATA(17).NE.7171) GO TO 497
        DATA(16)=77
        DATA(17)=1777
        DATA(18)=77

*       ** OUTPUT THE RECORD TO THE OUTPUT FILE
497    WRITE (22,500) (DATA(I),I=1,15),TOTMIN,(DATA(I),I=16,19)
500    FORMAT (2(2A5,A2),4I6,2(I7,I5),I8,F9.3,I2,I4,I3,I8)

*       ** SET THE 'BLANK' POINTERS BACK TO 0 AND GO READ ANOTHER
*          RECORD
        IPNT1=0
        IPNT2=0


       GO TO 150

*       ** END-OF-FILE    CLOSE ALL INPUT AND OUTPUT FILES
600    CLOSE (21)
        CLOSE (23)
 
*       ** OUTPUT TO THE TERMINAL THE # OF SESSIONS PROCESSED
       TYPE 660,DATE,ICOUNT,BIGCNT
660    FORMAT (//,5X,'-----',I6,'-----',/,5X,'SESSIONS PROCESSED
     X= ',I5//,5X,'NUMBER OF SESSIONS CONNECTED OVER 1440 MINUTES=
     X ',I5)
        TYPE 661,(BIGNAM(I),I=1,2)
661     FORMAT(15X,'SEE FILE: ',2A5,' FOR DETAILS',//)
        TYPE 662
662     FORMAT (//,1X,'MSGCRE - END OF JOB')

*       ** INCREMENT VARIABLE: IDAY - TO OBTAIN NEXT DAY TO PROCESS
        IDAY=IDAY+1
        IF (IDAY.LE.MONTBL(IMO)) GO TO 665
        IDAY=1
        IMO=IMO+1
        IF (IMO.LE.12) GO TO 665
        IMO=1
        IYR=IYR+1

*       ** OPEN CONTROL FILE AND OUTPUT NEXT DAY TO PROCESS
665     OPEN (21,'MSG.CTL',OUTPUT)
        WRITE (21,667)IYR,IMO,IDAY
667     FORMAT (3I2)
        CLOSE(21)

        GO TO 700

*       ** UNABLE TO OPEN A INPUT OR OUTPUT FILE
670    TYPE 680,FLENAM(1),FLENAM(2)
680    FORMAT (//,5X,'UNABLE TO OPEN FILE: ',2A5)
        GO TO 700

*       ** UNABLE TO OPEN CONTROL FILE
690     TYPE 695
695     FORMAT (//,5X,'UNABLE TO OPEN FILE: MSG.CTL')
        
700    END


*       *******************SUBROUTINE TIME********************
*       THIS SUBROUTINE CONVERTS THE TIME EXPRESSED AS HHMMSS
*       INTO TWO VARIABLES HR(HOURS) AND MIN(MINUTES).  THE
*       SECONDS ARE CONVERTED TO THE DECIMAL FRACTION OF A MINUTE.

        SUBROUTINE TIME(ITIME,HR,AMIN)


        TIME1=ITIME
        TC1=AMOD(TIME1,100.)
        TC2=AINT(TIME1/100.)
        TC3=TC1/60

        HR=AINT(TC2/100.)
        AMIN=AMOD(TC2,100.)+TC3
10      RETURN
        END


*       *******************SUBROUTINE ERROR********************
*       THIS SUBROUTINE WRITES A RECORD OUT TO A MONTHLY ERROR
*       FILE, APPENDING TO THE END. THEN SETS THE 'BLANK' POINTERS
*       BACK TO 0 AND RETURNS TO THE MAIN PROGRAM.

        SUBROUTINE ERROR(DATA,IPNT1,IPNT2)

        INTEGER DATA(19)

        IS=SIZE(23)
        IS=IS+1
        WRITE (23#IS,474) (DATA(I),I=1,19)
474    FORMAT (2(2A5,A2),4I6,2(I7,I5),I8,I2,I4,I3,I8)
        IPNT1=0
        IPNT2=0
        RETURN
        END

