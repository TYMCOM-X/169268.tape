
************************************************************************
*                                                                      *
*                          SUBROUTINE:  RDTOP                          *
*                                                                      *
*       THIS SUBROUTINE READS THE NETWORK TOPOLOGY AS DESCRIBED        *
*       IN THE LISTS OF NODES AND LINES. THESE ARE 2 SYMBOLIC          *
*       FILES PRODUCED FOR EXAMPLE, BY RUNNING THE 'PRTOP' PRO-        *
*       GRAM IN THE CASE OF TYMNET. THE LIST OF NODES HAS THE          *
*       FOLLOWING FORMAT :                                             *
*               NODE NO. , NAME , TYPE                                 *
*                       HOST NO. 1 , HOST NO. 2 , ...                  *
*       THE FORMAT OF THE LIST OF LINES IS AS FOLLOWS :                *
*               NODE NO.1,PRT1,NODE NO.2,PRT2,LINENAME,BAUD,GRPS       *
*       WITH THE CONVENTION  NODE NO.1 < NODE NO.2                     *
*                                                                      *
*       IMPORTANT PARAMETERS ARE :                                     *
*               LFILE  = AN ARRAY OF FIVE WORDS CONTAINING THE         *
*                        NAME OF THE FILES (EXTENSIONS OF .LIN         *
*                        AND .NOD ARE ASSUMED)                         *
*               IERR  = AN ERROR FLAG                                  *
*                                                                      *
************************************************************************

        SUBROUTINE RDTOP(NMAX,IBMAX,IHMAX,MHMAX,LMAX,NUMACT,NUMBPS,
     +  ISIXTN,IFIVE,ITHREE,ID0,LFILE,IERR)

        INTEGER BASENO,BPTR,HOSTNO,HPTR,HSTAT,HSTATE,HBASES

        DIMENSION NODENO(850),NPTR(850),NSTATE(850),
     +       NTYPE(850),NNEI(850),NEIGH(13600),NTYPS(10),IBASE(500),
     +       BASENO(500),BPTR(500),NHOSTS(500),HOSTNO(750),
     +       HPTR(750),HSTATE(750),HBASES(750),LNODE1(1600),
     +       LNODE2(1600),LSPEED(1600),LGRPS(1600),LSTATE(1600),
     +       LFREQ(15),LCFREQ(15),NBPS(7),BPS(7),
     +       ICONST(7),NTREE(850),LTREE(1600),NACTV(4000)
        DIMENSION NSTAT(850,2),NPEAK(850,2),NODEIO(850,3),LINKO(850,
     +       2),NPASS(10,2),NTNAME(10,3),NTERM(500,2),LINKT(500,2),
     +       IHOST(500,5),HSTAT(750,2),MBASES(5,5),LINNAM(1600,4),
     +       LSTAT(1600,2),LINEIO(1600,3),NNAME(850,2)

        COMMON/NODES/NODENO,NPTR,NNAME,NSTATE,NTYPE,NNEI,
     +         NSTAT,NPEAK,NODEIO,LINKO,NTREE
        COMMON/NMISC/NEIGH,NACTV,BASENO,BPTR,IBASE,
     +         NTERM,LINKT,NHOSTS,IHOST,HOSTNO,HPTR,HSTATE,
     +         HSTAT,HBASES,MBASES
        COMMON/LINES/LINNAM,LNODE1,LNODE2,LSPEED,LGRPS,LSTATE,
     +         LSTAT,LINEIO,LTREE
        COMMON/LMISC/LFREQ,LCFREQ
        COMMON/NUM/NAMAX,IBAMAX,IHAMAX,LAMAX,NDMAX,IBDMAX,IHDMAX,LDMAX,
     +         NCMAX,IBCMAX,IHCMAX,LCMAX
        COMMON/INIT/NBPS,BPS,ICONST,NTYPS,NPASS,NTNAME

        DIMENSION LFILE(5),NFILE(5),NNAM(2),LNAM(4),IDATA(32),IPT(32)
        DATA (NFILE(I),I=1,5)/5*'     '/

        IERR=0
C
C  USE FILENAME CONTAINED IN 'LFILE' AS NAME OF THE FILE, THEN
C  ADD EXTENSIONS OF '.NOD' AND '.LIN' TO OBTAIN ACTUAL FILENAMES
C
        DO 10 I=1,5
        NFILE(I)=LFILE(I)
 10     CONTINUE
C
C  FIND FIRST BLANK IN 'LFILE'
C
        DO 15 I=1,22
        CALL RTC(ICHAR,LFILE,I)
        IF (ICHAR.EQ.' ') GO TO 20
 15     CONTINUE
C
C  ERROR, FILENAME EXCEEDS 22 CHARACTERS
C
        WRITE(ID0,16) (LFILE(K),K=1,5)
 16     FORMAT(1X,'FILENAME ',5A5,' EXCEEDS 22 CHARACTERS')
        IERR=1
        RETURN
C
C  'I' NOW EQUALS THE POSITION OF THE FIRST BLANK IN 'LFILE'
C  ADD EXTENSIONS TO FILENAMES
C
 20     CALL STC('.',LFILE,I)
        CALL STC('L',LFILE,I+1)
        CALL STC('I',LFILE,I+2)
        CALL STC('N',LFILE,I+3)
        CALL STC('.',NFILE,I)
        CALL STC('N',NFILE,I+1)
        CALL STC('O',NFILE,I+2)
        CALL STC('D',NFILE,I+3)
C
C  START READING EACH NODE TO FILL IN ALL NODE AND HOST ARRAYS
C  THE NEIGH AND LINE ARRAYS WILL BE FILLED IN DURING THE
C  THE READING OF LIST OF LINES
C
        OPEN(24,NFILE,INPUT,SYMBOLIC,ERR=455)
 50     READ(24,51,END=500,ERR=459) INODE,NNAM,NTYP
 51     FORMAT(O4,1X,2A5,1X,I2)
C
C  FAKE NODE NUMBER AS DECIMAL
C
        ENCODE(4,52,ITEMP) INODE
        DECODE(4,53,ITEMP) INODE
 52     FORMAT(O4)
 53     FORMAT(I4)
        IF (INODE.LE.0.OR.INODE.GT.7777) GO TO 459
C
C  UPDATE NODE COUNTER
C
        NAMAX=NAMAX+1
        IF (NAMAX.LE.NMAX) GO TO 55
C
C  ERROR HERE, LIMIT NMAX EXCEEDED
C
        WRITE(ID0,56) NMAX
 56     FORMAT(1X,'NO. OF NODES IN THE NET EXCEEDS MAX OF ',I3)
        IERR=1
        RETURN
C
C  DETERMINE WHICH RANGE NODE IS IN
C
 55     IF (INODE.GT.777) GO TO 59
        IRANGE=1
        GO TO 61
 59     IF (INODE.GT.1777) GO TO 60
        IRANGE=2
        GO TO 61
 60     IRANGE=3
C
C  CHECK IF NODE IS ALREADY IN ARRAY: NODENO
C
 61     IF (NAMAX.LE.1) GO TO 90
        CALL SEARCH(NODENO,INODE,NAMAX-1,IND)
        IF (IND.GE.NAMAX) GO TO 90
C
C  ERROR HERE, MULTIPLE ENTRIES FOR INODE
C
        WRITE(ID0,86) INODE
 86     FORMAT(1X,'MULTIPLE ENTRIES FOR NODE ',I4)
        IERR=1
        RETURN
C
C  PLACE NODE INTO ARRAY NODENO AND NAME INTO NNAME
C
 90     NODENO(NAMAX)=INODE
        NNAME(NAMAX,1)=NNAM(1)
        NNAME(NAMAX,2)=NNAM(2)
        NSTATE(NAMAX)=0
C
C  CHECK IF NODE TYPE IS VALID
C
        DO 95 I=1,NUMACT
        IF (NTYPS(I).EQ.NTYP) GO TO 100
 95     CONTINUE
C
C  ERROR HERE, INVALID NODE TYPE
C
        ITEMP=NTYP
        NTYP=1
        IF (IRANGE.EQ.2) NTYP=0
        IF (IRANGE.EQ.3) NTYP=9
C
        WRITE(ID0,96) ITEMP,INODE,NTYP
 96     FORMAT(1X,'INVALID TYPE ',I2,' ON NODE ',I4,' : ',
     +  'DEFAULT TYPE ',I2,' ASSUMED')
        GO TO 110
C
C  CHECK IF NODE TYPE IS REASONABLE
C
 100    GO TO (101,102,103), IRANGE
 101    IF (NTYP.EQ.1.OR.NTYP.EQ.2.OR.NTYP.EQ.4.OR.NTYP.EQ.5.OR.
     +  NTYP.EQ.6) GO TO 110
        GO TO 104
 102    IF (NTYP.EQ.0.OR.NTYP.EQ.3.OR.NTYP.EQ.7.OR.NTYP.EQ.8) GO TO 110
        GO TO 104
 103    IF (NTYP.EQ.9) GO TO 110
 104    WRITE(ID0,105) NTYP,INODE
 105    FORMAT(1X,'DOUBTFUL TYPE ',I2,' ON NODE ',I4)
        IERR=1
        RETURN
C
C  PLACE NODE TYPE INTO ARRAY NTYPE
C
 110    NTYPE(NAMAX)=NTYP
C
C  UPDATE NODE POINTER
C
        NPTR(NAMAX)=NAMAX
C
C  SORT THE ARRAY NODENO
C
        CALL QSORT(NODENO,NPTR,NAMAX)
C
C  IF NODE IS IN RANGE 1 OR 3, PROCESS ITS HOSTS
C
        IF (IRANGE.EQ.2) GO TO 50
C
C  INCREMENT BASE COUNTER AND UPDATE BASE ARRAYS
C
        IBAMAX=IBAMAX+1
        IF (IBAMAX.LE.IBMAX) GO TO 250
C
C  ERROR HERE, LIMIT IBMAX EXCEEDED
C
        WRITE(ID0,245) IBMAX
 245    FORMAT(1X,'NO. OF BASES IN THE NET EXCEEDS MAX OF ',I3)
        IERR=1
        RETURN
C
 250    BASENO(IBAMAX)=INODE
        BPTR(IBAMAX)=IBAMAX
C
C  GET HOSTS
C
        READ(24,251,ERR=459) (IDATA(K),K=1,16)
 251    FORMAT(5X,I4,15(1X,I4))
C
C  GET ACTUAL NUMBER OF HOSTS
C
        ITMP=0
        DO 254 I=1,16
        IF (IDATA(I).EQ.0) GO TO 256
        ITMP=ITMP+1
 254    CONTINUE
C
C  IF NO HOST ON NODE, COMPLAIN
C
 256    IF (ITMP.GT.0) GO TO 260
        NHOSTS(IBAMAX)=0
        WRITE(ID0,257) INODE
 257    FORMAT(1X,'WARNING ... NO HOSTS ON NODE ',I4)
        GO TO 350
C
C  MAKE SURE FIRST THAT ALL HOST NOS. ARE DIFFERENT
C
 260    DO 262 II=1,ITMP
        ITEMP=IDATA(II)
        DO 261 JJ=1,ITMP
        IF (II.EQ.JJ) GO TO 261
        IF (ITEMP.EQ.IDATA(JJ)) GO TO 263
 261    CONTINUE
 262    CONTINUE
        GO TO 265
C
 263    WRITE(ID0,264) INODE
 264    FORMAT(1X,'HOST NOS. FOR NODE ',I4,' CONTAIN DUPLICATE ENTRIES')
        IERR=1
        RETURN
C
C  CHECK IF NO. OF ENTERED HOSTS CONSISTENT WITH NODE TYPE
C
 265    IF (ITMP.LE.IFIVE) GO TO 267
        WRITE(ID0,266) IFIVE,INODE
 266    FORMAT(1X,'MORE THAN ',I2,' HOSTS ON NODE ',I4)
        IERR=1
        RETURN
 267    IF (NTYP.EQ.9) GO TO 270
        IF ((NTYP.EQ.6).AND.(ITMP.LE.4)) GO TO 270
        IF ((NTYP.EQ.2.OR.NTYP.EQ.5).AND.(ITMP.LE.2)) GO TO 270
        IF ((NTYP.EQ.1.OR.NTYP.EQ.4).AND.(ITMP.LE.1)) GO TO 270
        WRITE(ID0,268) INODE
 268    FORMAT(1X,'MORE HOSTS THAN NODE TYPE ALLOWS ON NODE ',I4)
        IERR=1
        RETURN
C
C  PROCESS EACH HOST
C
 270    NHOSTS(IBAMAX)=0
        DO 300 I=1,ITMP
        ITEMP=IDATA(I)
        NHOSTS(IBAMAX)=NHOSTS(IBAMAX)+1
        IHOST(IBAMAX,I)=ITEMP
C
C  CHECK IF HOST IS ALREADY IN ARRAY: HOSTNO
C
        IF (IHAMAX.LE.0) GO TO 290
        CALL SEARCH(HOSTNO,ITEMP,IHAMAX,IND)
        IF (IND.GT.IHAMAX) GO TO 290
C
C  THIS HOST IS ALREADY PROCESSED
C
        WRITE(ID0,272) ITEMP
 272    FORMAT(1X,'WARNING ... HOST NO. ',I4,' IS CONNECTED TO ',
     +  'MULTIPLE BASES')
C
C  SINCE HOST IS MULTI-BASE, NODE TYPE SHOULD BE 4
C
        IF (NTYP.EQ.4) GO TO 274
        WRITE(ID0,273) INODE
 273    FORMAT(1X,'TYPE ON NODE ',I4,' SHOULD BE 4')
        IERR=1
        RETURN
C
C  THIS TRICKY PORTION UNTIL STM 290 IS USED ONLY FOR MULTI-BASE HOST
C
 274    IND=HPTR(IND)
        ITMP1=0
        IF (HBASES(IND).EQ.-1) ITMP1=ITEMP
C
C  FIND OPEN SPOT IN ARRAY MBASES
C
        DO 275 J=1,MHMAX
        IF (MBASES(J,1).EQ.ITMP1) GO TO 278
 275    CONTINUE
C
C  ERROR HERE
C
        IF (ITMP1.EQ.0) WRITE(ID0,276) MHMAX
 276    FORMAT(1X,'NO. OF MULTI-BASE HOSTS IN THE NET EXCEEDS MAX',
     +  ' OF ',I2)
        IF (ITMP1.NE.0) WRITE(ID0,277) ITMP1
 277    FORMAT(1X,'CAN''T FIND PREVIOUS BASES FOR MULTI-BASE',
     +  ' HOST NO. ',I4)
        IERR=1
        RETURN
C
C  UPDATE ARRAY MBASES
C
 278    IF (ITMP1.EQ.0) GO TO 279
        ITMP1=MBASES(J,2)
        GO TO 280
 279    MBASES(J,1)=ITEMP
C
        ITMP2=HBASES(IND)
        CALL SEARCH(NODENO,ITMP2,NAMAX,IND1)
        IF (IND1.GT.NAMAX) GO TO 2799
        IND1=NPTR(IND1)
        IF (NTYPE(IND1).EQ.4) GO TO 2801
        WRITE(ID0,273) ITMP2
        IERR=1
        RETURN
 2799   WRITE(ID0,2800) ITMP,ITEMP
 2800   FORMAT(1X,'CAN''T FIND BASE NO. ',I4,' FOR HOST ',I4)
        IERR=1
        RETURN
C
 2801   ITMP1=1
        MBASES(J,3)=ITMP2
C
 280    ITMP1=ITMP1+1
        IF (ITMP1.LE.ITHREE) GO TO 282
        WRITE(ID0,281) ITHREE,ITEMP
 281    FORMAT(1X,'MORE THAN ',I2,' BASES CONNECTED TO HOST ',I4)
        IERR=1
        RETURN
 282    MBASES(J,2)=ITMP1
        MBASES(J,ITMP1+2)=INODE
        HBASES(IND)=-1
        GO TO 300
C
C  HOST NUMBER IS NEW, UPDATE HOST COUNTER
C
 290    IHAMAX=IHAMAX+1
        IF (IHAMAX.LE.IHMAX) GO TO 295
C
C  ERROR HERE, LIMIT IHMAX EXCEEDED
C
        WRITE(ID0,292) IHMAX
 292    FORMAT(1X,'NO. OF HOSTS IN THE NET EXCEEDS MAX OF ',I3)
        IERR=1
        RETURN
C
C  PLACE HOST INTO ARRAY HOSTNO
C
 295    HOSTNO(IHAMAX)=ITEMP
        HPTR(IHAMAX)=IHAMAX
        HSTATE(IHAMAX)=0
C
C  PLACE CORRESPONDING BASE NO. INTO ARRAY HBASES
C
        HBASES(IHAMAX)=INODE
        CALL QSORT(HOSTNO,HPTR,IHAMAX)
C
 300    CONTINUE
C
C  SORT THE ARRAY BASENO
C
 350    CALL QSORT(BASENO,BPTR,IBAMAX)
C
C  FINISHED PROCESSING NODE, GO PROCESS NEXT NODE
C
        GO TO 50
C
C  ERROR CONDITIONS WHILE PROCESSING LIST OF NODES
C
 455    WRITE(ID0,456) (NFILE(K),K=1,5)
 456    FORMAT(1X,'UNABLE TO OPEN FILE ',5A5)
        IERR=1
        RETURN
 459    REREAD 460,(IDATA(K),K=1,12)
 460    FORMAT(12A5)
        WRITE(ID0,461) (NFILE(K),K=1,5),(IDATA(K),K=1,12)
 461    FORMAT(1X,'FOLLOWING LINE IN FILE ',5A5,' IS SUSPICIOUS :',
     +  /1X,12A5)
        IERR=1
        RETURN
C
C  NOW GO THROUGH THE LIST OF LINES
C
 500    CLOSE(24)
        OPEN(24,LFILE,INPUT,SYMBOLIC,ERR=645)
 505    READ(24,506,END=530,ERR=650) ITEMP1,ITMP1,ITEMP2,ITMP2,
     +  (LNAM(K),K=1,4),IBD,IGRP
C
C  CHANGE MADE ON DEC 80, BANDWIDTH IS NOW READ AS A4
C
 506    FORMAT(2(O4,1X,I2,1X),4A5,1X,A4,1X,I3)
C
C  FAKE NODE NUMBERS AS DECIMAL
C
        ENCODE(4,52,ITEMP) ITEMP1
        DECODE(4,53,ITEMP) ITEMP1
        ENCODE(4,52,ITEMP) ITEMP2
        DECODE(4,53,ITEMP) ITEMP2
C
C  CHECK FOR NODE AND PORT NUMBERS
C
        IF (ITEMP1.GE.ITEMP2) GO TO 655
        IF (ITMP1.GE.ISIXTN.OR.ITMP2.GE.ISIXTN) GO TO 660
C
C  SEARCH FOR NODE NO.
C
        CALL SEARCH(NODENO,ITEMP1,NAMAX,IND1)
        IF (IND1.LE.NAMAX) GO TO 510
C
C  ERROR HERE, CAN'T FIND NODE NO.
C
        WRITE(ID0,508) ITEMP1
 508    FORMAT(1X,'CAN''T FIND NODE NO. ',I4)
        IERR=1
        RETURN
C
C  NOW SEARCH FOR NEIGHBOR
C
 510    CALL SEARCH(NODENO,ITEMP2,NAMAX,IND2)
        IF (IND2.LE.NAMAX) GO TO 515
C
C  ERROR HERE, CAN'T FIND NEIGHBOR
C
        WRITE(ID0,512) ITEMP2,ITEMP1
 512    FORMAT(1X,'CAN''T FIND NEIGHBOR ',I4,' FOR NODE NO. ',I4)
        IERR=1
        RETURN
C
C  CHECK FOR CORRECT BANDWIDTH
C
 515    DO 517 II=1,NUMBPS
        IF (IBD.EQ.NBPS(II)) GO TO 520
 517    CONTINUE
C
C  ERROR HERE, INVALID BAUD RATE
C
        WRITE(ID0,519) IBD,ITEMP1,ITEMP2
 519    FORMAT(1X,'INVALID BANDWIDTH ',A5,' ON LINE BETWEEN ',I4,
     +  ' AND ',I4)
        IERR=1
        RETURN
C
C  FILL NEIGHBOR CELL FOR NODE NO.
C
 520    LAMAX=LAMAX+1
        IND1=NPTR(IND1)
        ITEMP=(IND1-1)*ISIXTN+1
        IF (NEIGH(ITEMP+ITMP1).NE.0) GO TO 665
        NEIGH(ITEMP+ITMP1)=LAMAX
        NNEI(IND1)=NNEI(IND1)+1
C
C  SAME HERE FOR NEIGHBOR NODE
C
        IND2=NPTR(IND2)
        ITEMP=(IND2-1)*ISIXTN+1
        IF (NEIGH(ITEMP+ITMP2).NE.0) GO TO 670
        NEIGH(ITEMP+ITMP2)=LAMAX
        NNEI(IND2)=NNEI(IND2)+1
C
C  UPDATE ARRAYS LNODE1, LNODE2
C
        LNODE1(LAMAX)=ITEMP1
        LNODE2(LAMAX)=ITEMP2
C
C  STORE LINE NAME, SPEED AND GROUPS
C
        DO 525 K=1,4
        LINNAM(LAMAX,K)=LNAM(K)
 525    CONTINUE
        LSPEED(LAMAX)=IBD
        LGRPS(LAMAX)=IGRP
        LSTATE(LAMAX)=0
C
C  GO READ NEXT LINE
C
        GO TO 505
C
C  ALL LINES READ, START SOME CHECKING
C
 530    CLOSE(24)
        DO 600 II=1,NAMAX
        IND=NPTR(II)
        ITEMP=NODENO(II)
        K=NNEI(IND)
        NPOS=(IND-1)*ISIXTN
        IF (K.GT.0) GO TO 537
C
C  ERROR HERE, ISOLATED NODE
C
        WRITE(ID0,536) ITEMP
 536    FORMAT(1X,'NODE NO. ',I4,' HAS NO NEIGHBORS')
        IERR=1
        RETURN
C
C  CHECK IF NO. OF NEIGHBORS CONSISTENT WITH NODE TYPE
C
 537    ITMP=NTYPE(IND)
        DO 538 KK=1,NUMACT
        IF (ITMP.EQ.NTYPS(KK)) GO TO 539
 538    CONTINUE
 539    ITMP=NPASS(KK,2)
        IF (K.LE.ITMP) GO TO 541
        WRITE(ID0,540) ITEMP
 540    FORMAT(1X,'MORE NEIGHBORS THAN TYPE ALLOWS ON NODE ',I4)
        IERR=1
        RETURN
C
C  CHECK IF ALL PORTS NO. ARE CONTIGUOUS
C
 541    MCOUNT=0
 542    MCOUNT=MCOUNT+1
        IF (MCOUNT.GT.K) GO TO 545
        LPOS=NEIGH(NPOS+MCOUNT)
        IF (LPOS.NE.0) GO TO 542
C
C  ERROR HERE, PORTS ARE NOT CONTIGUOUS
C
        WRITE(ID0,543) ITEMP
 543    FORMAT(1X,'PORTS NOS. ON NODE ',I4,' ARE NOT CONTIGUOUS')
        IERR=1
        RETURN
C
C  MAKE SURE NOW THAT MULTIPLE LINES ARE ON
C  CONTIGUOUS PORTS AT BOTH ENDS
C
 545    DO 547 KK=1,K
        LPOS=NEIGH(NPOS+KK)
        ITMP1=LNODE1(LPOS)
        IF (ITMP1.EQ.ITEMP) ITMP1=LNODE2(LPOS)
        IDATA(KK)=ITMP1
        IPT(KK)=KK
 547    CONTINUE
        CALL QSORT(IDATA,IPT,K)
        ITMP1=IDATA(1)
        ITMP2=IPT(1)
        IF (K.LE.1) GO TO 565
        DO 560 KK=2,K
        IF (ITMP1.LT.IDATA(KK)) GO TO 550
        IF (ITMP2.EQ.(IPT(KK)-1)) GO TO 550
C
C  ERROR HERE, MULTIPLE LINES ARE NOT CONTIGUOUS
C
        WRITE(ID0,549) ITEMP,ITMP1
 549    FORMAT(1X,'PORTS NOS. FOR MULTIPLE LINE BETWEEN ',I4,' AND ',
     +  I4,' ARE NOT CONTIGUOUS')
        IERR=1
        RETURN
C
 550    ITMP1=IDATA(KK)
        ITMP2=IPT(KK)
 560    CONTINUE
C
C  CHECK INCONSISTENCY BETWEEN NEIGHBORS
C
 565    DO 575 KK=1,K
        LPOS=NEIGH(NPOS+KK)
C
C  GET NEIGHBOR NODE
C
        ITMP1=LNODE1(LPOS)
        IF (ITMP1.NE.ITEMP) ITMP1=LNODE2(LPOS)
C
C  LOOK AT NEIGHBORS OF NEIGHBOR NODE
C
        CALL SEARCH(NODENO,ITMP1,NAMAX,IND1)
        IF (IND1.GT.NAMAX) GO TO 573
        IND1=NPTR(IND1)
        K1=NNEI(IND1)
        NPOS1=(IND1-1)*ISIXTN
        IF (K1.GT.0) GO TO 567
C
C  ERROR HERE, ISOLATED NODE
C
        WRITE(ID0,536) ITMP1
        IERR=1
        RETURN
C
 567    DO 570 JJ=1,K1
        LPOS1=NEIGH(NPOS1+JJ)
        ITMP2=LNODE1(LPOS1)
        IF (ITMP2.NE.ITMP1) ITMP2=LNODE2(LPOS1)
C
        IF (ITMP2.EQ.ITEMP) GO TO 575
 570    CONTINUE
C
C  ERROR HERE, INCONSISTENCY DETECTED
C
        WRITE(ID0,572) ITEMP,ITMP1
 572    FORMAT(1X,'INCONSISTENCY DETECTED BETWEEN ',I4,' AND ',I4)
        IERR=1
        RETURN
C
C  ERROR HERE, CAN'T FIND NEIGHBOR
C
 573    WRITE(ID0,574) ITMP1,ITEMP
 574    FORMAT(1X,'CAN''T FIND NODE ',I4,' AS NEIGHBOR OF ',I4)
        IERR=1
        RETURN
C
 575    CONTINUE
C
C  GO GET NEXT NODE
C
 600    CONTINUE
C
C  CHECK IF EVERY TYMNET-II NODE HAS AT LEAST
C  ANOTHER TYMNET-II NODE AS NEIGHBOR
C
        DO 620 I=1,NAMAX
        ITEMP=NODENO(I)
        IND=NPTR(I)
        IF (NTYPE(IND).NE.9) GO TO 620
C
C  GET NO. OF NEIGHBORS
C
        K=NNEI(IND)
C
C  GET STARTING LOC OF NEIGHBORS
C
        ILOC=(IND-1)*ISIXTN+1
C
C  CHECK ITS NEIGHBORS ONE BY ONE
C
        DO 610 J=1,K
        LPOS=NEIGH(ILOC+J-1)
        ITMP=LNODE1(LPOS)
        IF (ITMP.EQ.ITEMP) ITMP=LNODE2(LPOS)
        IF (ITMP.GE.2000) GO TO 620
 610    CONTINUE
C
C  ERROR HERE, NO TYMNET-II NEIGHBOR
C
        WRITE(ID0,611) ITEMP
 611    FORMAT(1X,'NODE ',I4,' HAS NO TYMNET-II NEIGHBOR')
        IERR=1
        RETURN
C
 620    CONTINUE
C
        RETURN
C
C  ERROR CONDITIONS WHILE PROCESSING LIST OF LINES
C
 645    WRITE(ID0,456) (LFILE(K),K=1,5)
        IERR=1
        RETURN
 650    REREAD 460,(IDATA(K),K=1,12)
        WRITE(ID0,461) (LFILE(K),K=1,5),(IDATA(K),K=1,12)
        IERR=1
        RETURN
 655    WRITE(ID0,656) ITEMP1,ITEMP2,(LFILE(K),K=1,5)
 656    FORMAT(1X,'NODE NO. ',I4,' AND ',I4,' ARE NOT IN CORRECT ORDER',
     +  ' IN FILE ',5A5)
   IERR=1
        RETURN
 660    REREAD 460,(IDATA(K),K=1,12)
        WRITE(ID0,661) (IDATA(K),K=1,12),ISIXTN
 661    FORMAT(1X,'ONE OF THE PORT NO. IN LINE : ',/1X,12A5,
     +  /1X,'MAY EXCEED THE ALLOWED MAXIMUM OF ',I2)
        IERR=1
        RETURN
 665    WRITE(ID0,666) ITMP1,ITEMP1
 666    FORMAT(1X,'PORT NO. ',I2,' ON NODE ',I4,' IS ALREADY USED')
        IERR=1
        RETURN
 670    WRITE(ID0,666) ITMP2,ITEMP2
        IERR=1
        RETURN
        END
   ( `
